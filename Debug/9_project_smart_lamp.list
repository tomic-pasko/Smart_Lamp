
9_project_smart_lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aefc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800afc0  0800afc0  0001afc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b58c  0800b58c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b58c  0800b58c  0001b58c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b594  0800b594  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b594  0800b594  0001b594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b598  0800b598  0001b598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b59c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001e0  0800b77c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  0800b77c  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c47d  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d28  00000000  00000000  0003c685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  000403b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001108  00000000  00000000  00041680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001949c  00000000  00000000  00042788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a57  00000000  00000000  0005bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e7ba  00000000  00000000  0007567b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  00103e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800afa4 	.word	0x0800afa4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800afa4 	.word	0x0800afa4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f865 	bl	800150c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffaf 	bl	80013b0 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f857 	bl	800150c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f84d 	bl	800150c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ffd1 	bl	8001428 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ffc7 	bl	8001428 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	1c08      	adds	r0, r1, #0
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f84c 	bl	8000574 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_lmul>:
 80004e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ea:	0415      	lsls	r5, r2, #16
 80004ec:	0c2d      	lsrs	r5, r5, #16
 80004ee:	000f      	movs	r7, r1
 80004f0:	0001      	movs	r1, r0
 80004f2:	002e      	movs	r6, r5
 80004f4:	46c6      	mov	lr, r8
 80004f6:	4684      	mov	ip, r0
 80004f8:	0400      	lsls	r0, r0, #16
 80004fa:	0c14      	lsrs	r4, r2, #16
 80004fc:	0c00      	lsrs	r0, r0, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	4346      	muls	r6, r0
 8000502:	434d      	muls	r5, r1
 8000504:	4360      	muls	r0, r4
 8000506:	4361      	muls	r1, r4
 8000508:	1940      	adds	r0, r0, r5
 800050a:	0c34      	lsrs	r4, r6, #16
 800050c:	1824      	adds	r4, r4, r0
 800050e:	b500      	push	{lr}
 8000510:	42a5      	cmp	r5, r4
 8000512:	d903      	bls.n	800051c <__aeabi_lmul+0x34>
 8000514:	2080      	movs	r0, #128	; 0x80
 8000516:	0240      	lsls	r0, r0, #9
 8000518:	4680      	mov	r8, r0
 800051a:	4441      	add	r1, r8
 800051c:	0c25      	lsrs	r5, r4, #16
 800051e:	186d      	adds	r5, r5, r1
 8000520:	4661      	mov	r1, ip
 8000522:	4359      	muls	r1, r3
 8000524:	437a      	muls	r2, r7
 8000526:	0430      	lsls	r0, r6, #16
 8000528:	1949      	adds	r1, r1, r5
 800052a:	0424      	lsls	r4, r4, #16
 800052c:	0c00      	lsrs	r0, r0, #16
 800052e:	1820      	adds	r0, r4, r0
 8000530:	1889      	adds	r1, r1, r2
 8000532:	bc80      	pop	{r7}
 8000534:	46b8      	mov	r8, r7
 8000536:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000538 <__aeabi_d2uiz>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	2200      	movs	r2, #0
 800053c:	4b0c      	ldr	r3, [pc, #48]	; (8000570 <__aeabi_d2uiz+0x38>)
 800053e:	0004      	movs	r4, r0
 8000540:	000d      	movs	r5, r1
 8000542:	f7ff ffa7 	bl	8000494 <__aeabi_dcmpge>
 8000546:	2800      	cmp	r0, #0
 8000548:	d104      	bne.n	8000554 <__aeabi_d2uiz+0x1c>
 800054a:	0020      	movs	r0, r4
 800054c:	0029      	movs	r1, r5
 800054e:	f001 fe69 	bl	8002224 <__aeabi_d2iz>
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <__aeabi_d2uiz+0x38>)
 8000556:	2200      	movs	r2, #0
 8000558:	0020      	movs	r0, r4
 800055a:	0029      	movs	r1, r5
 800055c:	f001 fab2 	bl	8001ac4 <__aeabi_dsub>
 8000560:	f001 fe60 	bl	8002224 <__aeabi_d2iz>
 8000564:	2380      	movs	r3, #128	; 0x80
 8000566:	061b      	lsls	r3, r3, #24
 8000568:	469c      	mov	ip, r3
 800056a:	4460      	add	r0, ip
 800056c:	e7f1      	b.n	8000552 <__aeabi_d2uiz+0x1a>
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	41e00000 	.word	0x41e00000

08000574 <__udivmoddi4>:
 8000574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000576:	4657      	mov	r7, sl
 8000578:	464e      	mov	r6, r9
 800057a:	4645      	mov	r5, r8
 800057c:	46de      	mov	lr, fp
 800057e:	b5e0      	push	{r5, r6, r7, lr}
 8000580:	0004      	movs	r4, r0
 8000582:	000d      	movs	r5, r1
 8000584:	4692      	mov	sl, r2
 8000586:	4699      	mov	r9, r3
 8000588:	b083      	sub	sp, #12
 800058a:	428b      	cmp	r3, r1
 800058c:	d830      	bhi.n	80005f0 <__udivmoddi4+0x7c>
 800058e:	d02d      	beq.n	80005ec <__udivmoddi4+0x78>
 8000590:	4649      	mov	r1, r9
 8000592:	4650      	mov	r0, sl
 8000594:	f001 ffc0 	bl	8002518 <__clzdi2>
 8000598:	0029      	movs	r1, r5
 800059a:	0006      	movs	r6, r0
 800059c:	0020      	movs	r0, r4
 800059e:	f001 ffbb 	bl	8002518 <__clzdi2>
 80005a2:	1a33      	subs	r3, r6, r0
 80005a4:	4698      	mov	r8, r3
 80005a6:	3b20      	subs	r3, #32
 80005a8:	469b      	mov	fp, r3
 80005aa:	d433      	bmi.n	8000614 <__udivmoddi4+0xa0>
 80005ac:	465a      	mov	r2, fp
 80005ae:	4653      	mov	r3, sl
 80005b0:	4093      	lsls	r3, r2
 80005b2:	4642      	mov	r2, r8
 80005b4:	001f      	movs	r7, r3
 80005b6:	4653      	mov	r3, sl
 80005b8:	4093      	lsls	r3, r2
 80005ba:	001e      	movs	r6, r3
 80005bc:	42af      	cmp	r7, r5
 80005be:	d83a      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d100      	bne.n	80005c6 <__udivmoddi4+0x52>
 80005c4:	e078      	b.n	80006b8 <__udivmoddi4+0x144>
 80005c6:	465b      	mov	r3, fp
 80005c8:	1ba4      	subs	r4, r4, r6
 80005ca:	41bd      	sbcs	r5, r7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	da00      	bge.n	80005d2 <__udivmoddi4+0x5e>
 80005d0:	e075      	b.n	80006be <__udivmoddi4+0x14a>
 80005d2:	2200      	movs	r2, #0
 80005d4:	2300      	movs	r3, #0
 80005d6:	9200      	str	r2, [sp, #0]
 80005d8:	9301      	str	r3, [sp, #4]
 80005da:	2301      	movs	r3, #1
 80005dc:	465a      	mov	r2, fp
 80005de:	4093      	lsls	r3, r2
 80005e0:	9301      	str	r3, [sp, #4]
 80005e2:	2301      	movs	r3, #1
 80005e4:	4642      	mov	r2, r8
 80005e6:	4093      	lsls	r3, r2
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	e028      	b.n	800063e <__udivmoddi4+0xca>
 80005ec:	4282      	cmp	r2, r0
 80005ee:	d9cf      	bls.n	8000590 <__udivmoddi4+0x1c>
 80005f0:	2200      	movs	r2, #0
 80005f2:	2300      	movs	r3, #0
 80005f4:	9200      	str	r2, [sp, #0]
 80005f6:	9301      	str	r3, [sp, #4]
 80005f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <__udivmoddi4+0x8e>
 80005fe:	601c      	str	r4, [r3, #0]
 8000600:	605d      	str	r5, [r3, #4]
 8000602:	9800      	ldr	r0, [sp, #0]
 8000604:	9901      	ldr	r1, [sp, #4]
 8000606:	b003      	add	sp, #12
 8000608:	bcf0      	pop	{r4, r5, r6, r7}
 800060a:	46bb      	mov	fp, r7
 800060c:	46b2      	mov	sl, r6
 800060e:	46a9      	mov	r9, r5
 8000610:	46a0      	mov	r8, r4
 8000612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000614:	4642      	mov	r2, r8
 8000616:	2320      	movs	r3, #32
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	4652      	mov	r2, sl
 800061c:	40da      	lsrs	r2, r3
 800061e:	4641      	mov	r1, r8
 8000620:	0013      	movs	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	408a      	lsls	r2, r1
 8000626:	0017      	movs	r7, r2
 8000628:	4642      	mov	r2, r8
 800062a:	431f      	orrs	r7, r3
 800062c:	4653      	mov	r3, sl
 800062e:	4093      	lsls	r3, r2
 8000630:	001e      	movs	r6, r3
 8000632:	42af      	cmp	r7, r5
 8000634:	d9c4      	bls.n	80005c0 <__udivmoddi4+0x4c>
 8000636:	2200      	movs	r2, #0
 8000638:	2300      	movs	r3, #0
 800063a:	9200      	str	r2, [sp, #0]
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	4643      	mov	r3, r8
 8000640:	2b00      	cmp	r3, #0
 8000642:	d0d9      	beq.n	80005f8 <__udivmoddi4+0x84>
 8000644:	07fb      	lsls	r3, r7, #31
 8000646:	0872      	lsrs	r2, r6, #1
 8000648:	431a      	orrs	r2, r3
 800064a:	4646      	mov	r6, r8
 800064c:	087b      	lsrs	r3, r7, #1
 800064e:	e00e      	b.n	800066e <__udivmoddi4+0xfa>
 8000650:	42ab      	cmp	r3, r5
 8000652:	d101      	bne.n	8000658 <__udivmoddi4+0xe4>
 8000654:	42a2      	cmp	r2, r4
 8000656:	d80c      	bhi.n	8000672 <__udivmoddi4+0xfe>
 8000658:	1aa4      	subs	r4, r4, r2
 800065a:	419d      	sbcs	r5, r3
 800065c:	2001      	movs	r0, #1
 800065e:	1924      	adds	r4, r4, r4
 8000660:	416d      	adcs	r5, r5
 8000662:	2100      	movs	r1, #0
 8000664:	3e01      	subs	r6, #1
 8000666:	1824      	adds	r4, r4, r0
 8000668:	414d      	adcs	r5, r1
 800066a:	2e00      	cmp	r6, #0
 800066c:	d006      	beq.n	800067c <__udivmoddi4+0x108>
 800066e:	42ab      	cmp	r3, r5
 8000670:	d9ee      	bls.n	8000650 <__udivmoddi4+0xdc>
 8000672:	3e01      	subs	r6, #1
 8000674:	1924      	adds	r4, r4, r4
 8000676:	416d      	adcs	r5, r5
 8000678:	2e00      	cmp	r6, #0
 800067a:	d1f8      	bne.n	800066e <__udivmoddi4+0xfa>
 800067c:	9800      	ldr	r0, [sp, #0]
 800067e:	9901      	ldr	r1, [sp, #4]
 8000680:	465b      	mov	r3, fp
 8000682:	1900      	adds	r0, r0, r4
 8000684:	4169      	adcs	r1, r5
 8000686:	2b00      	cmp	r3, #0
 8000688:	db24      	blt.n	80006d4 <__udivmoddi4+0x160>
 800068a:	002b      	movs	r3, r5
 800068c:	465a      	mov	r2, fp
 800068e:	4644      	mov	r4, r8
 8000690:	40d3      	lsrs	r3, r2
 8000692:	002a      	movs	r2, r5
 8000694:	40e2      	lsrs	r2, r4
 8000696:	001c      	movs	r4, r3
 8000698:	465b      	mov	r3, fp
 800069a:	0015      	movs	r5, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	db2a      	blt.n	80006f6 <__udivmoddi4+0x182>
 80006a0:	0026      	movs	r6, r4
 80006a2:	409e      	lsls	r6, r3
 80006a4:	0033      	movs	r3, r6
 80006a6:	0026      	movs	r6, r4
 80006a8:	4647      	mov	r7, r8
 80006aa:	40be      	lsls	r6, r7
 80006ac:	0032      	movs	r2, r6
 80006ae:	1a80      	subs	r0, r0, r2
 80006b0:	4199      	sbcs	r1, r3
 80006b2:	9000      	str	r0, [sp, #0]
 80006b4:	9101      	str	r1, [sp, #4]
 80006b6:	e79f      	b.n	80005f8 <__udivmoddi4+0x84>
 80006b8:	42a3      	cmp	r3, r4
 80006ba:	d8bc      	bhi.n	8000636 <__udivmoddi4+0xc2>
 80006bc:	e783      	b.n	80005c6 <__udivmoddi4+0x52>
 80006be:	4642      	mov	r2, r8
 80006c0:	2320      	movs	r3, #32
 80006c2:	2100      	movs	r1, #0
 80006c4:	1a9b      	subs	r3, r3, r2
 80006c6:	2200      	movs	r2, #0
 80006c8:	9100      	str	r1, [sp, #0]
 80006ca:	9201      	str	r2, [sp, #4]
 80006cc:	2201      	movs	r2, #1
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	e786      	b.n	80005e2 <__udivmoddi4+0x6e>
 80006d4:	4642      	mov	r2, r8
 80006d6:	2320      	movs	r3, #32
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	002a      	movs	r2, r5
 80006dc:	4646      	mov	r6, r8
 80006de:	409a      	lsls	r2, r3
 80006e0:	0023      	movs	r3, r4
 80006e2:	40f3      	lsrs	r3, r6
 80006e4:	4644      	mov	r4, r8
 80006e6:	4313      	orrs	r3, r2
 80006e8:	002a      	movs	r2, r5
 80006ea:	40e2      	lsrs	r2, r4
 80006ec:	001c      	movs	r4, r3
 80006ee:	465b      	mov	r3, fp
 80006f0:	0015      	movs	r5, r2
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	dad4      	bge.n	80006a0 <__udivmoddi4+0x12c>
 80006f6:	4642      	mov	r2, r8
 80006f8:	002f      	movs	r7, r5
 80006fa:	2320      	movs	r3, #32
 80006fc:	0026      	movs	r6, r4
 80006fe:	4097      	lsls	r7, r2
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	40de      	lsrs	r6, r3
 8000704:	003b      	movs	r3, r7
 8000706:	4333      	orrs	r3, r6
 8000708:	e7cd      	b.n	80006a6 <__udivmoddi4+0x132>
 800070a:	46c0      	nop			; (mov r8, r8)

0800070c <__aeabi_dadd>:
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070e:	464f      	mov	r7, r9
 8000710:	46d6      	mov	lr, sl
 8000712:	4646      	mov	r6, r8
 8000714:	000d      	movs	r5, r1
 8000716:	0001      	movs	r1, r0
 8000718:	0018      	movs	r0, r3
 800071a:	b5c0      	push	{r6, r7, lr}
 800071c:	0017      	movs	r7, r2
 800071e:	032b      	lsls	r3, r5, #12
 8000720:	0a5a      	lsrs	r2, r3, #9
 8000722:	0f4b      	lsrs	r3, r1, #29
 8000724:	4313      	orrs	r3, r2
 8000726:	00ca      	lsls	r2, r1, #3
 8000728:	4691      	mov	r9, r2
 800072a:	0302      	lsls	r2, r0, #12
 800072c:	006e      	lsls	r6, r5, #1
 800072e:	0041      	lsls	r1, r0, #1
 8000730:	0a52      	lsrs	r2, r2, #9
 8000732:	0fec      	lsrs	r4, r5, #31
 8000734:	0f7d      	lsrs	r5, r7, #29
 8000736:	4315      	orrs	r5, r2
 8000738:	0d76      	lsrs	r6, r6, #21
 800073a:	0d49      	lsrs	r1, r1, #21
 800073c:	0fc0      	lsrs	r0, r0, #31
 800073e:	4682      	mov	sl, r0
 8000740:	46ac      	mov	ip, r5
 8000742:	00ff      	lsls	r7, r7, #3
 8000744:	1a72      	subs	r2, r6, r1
 8000746:	4284      	cmp	r4, r0
 8000748:	d100      	bne.n	800074c <__aeabi_dadd+0x40>
 800074a:	e098      	b.n	800087e <__aeabi_dadd+0x172>
 800074c:	2a00      	cmp	r2, #0
 800074e:	dc00      	bgt.n	8000752 <__aeabi_dadd+0x46>
 8000750:	e081      	b.n	8000856 <__aeabi_dadd+0x14a>
 8000752:	2900      	cmp	r1, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x4c>
 8000756:	e0b6      	b.n	80008c6 <__aeabi_dadd+0x1ba>
 8000758:	49c9      	ldr	r1, [pc, #804]	; (8000a80 <__aeabi_dadd+0x374>)
 800075a:	428e      	cmp	r6, r1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x54>
 800075e:	e172      	b.n	8000a46 <__aeabi_dadd+0x33a>
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	0028      	movs	r0, r5
 8000764:	0409      	lsls	r1, r1, #16
 8000766:	4308      	orrs	r0, r1
 8000768:	4684      	mov	ip, r0
 800076a:	2a38      	cmp	r2, #56	; 0x38
 800076c:	dd00      	ble.n	8000770 <__aeabi_dadd+0x64>
 800076e:	e15e      	b.n	8000a2e <__aeabi_dadd+0x322>
 8000770:	2a1f      	cmp	r2, #31
 8000772:	dd00      	ble.n	8000776 <__aeabi_dadd+0x6a>
 8000774:	e1ee      	b.n	8000b54 <__aeabi_dadd+0x448>
 8000776:	2020      	movs	r0, #32
 8000778:	0039      	movs	r1, r7
 800077a:	4665      	mov	r5, ip
 800077c:	1a80      	subs	r0, r0, r2
 800077e:	4087      	lsls	r7, r0
 8000780:	40d1      	lsrs	r1, r2
 8000782:	4085      	lsls	r5, r0
 8000784:	430d      	orrs	r5, r1
 8000786:	0039      	movs	r1, r7
 8000788:	1e4f      	subs	r7, r1, #1
 800078a:	41b9      	sbcs	r1, r7
 800078c:	4667      	mov	r7, ip
 800078e:	40d7      	lsrs	r7, r2
 8000790:	4329      	orrs	r1, r5
 8000792:	1bdb      	subs	r3, r3, r7
 8000794:	464a      	mov	r2, r9
 8000796:	1a55      	subs	r5, r2, r1
 8000798:	45a9      	cmp	r9, r5
 800079a:	4189      	sbcs	r1, r1
 800079c:	4249      	negs	r1, r1
 800079e:	1a5b      	subs	r3, r3, r1
 80007a0:	4698      	mov	r8, r3
 80007a2:	4643      	mov	r3, r8
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	d400      	bmi.n	80007aa <__aeabi_dadd+0x9e>
 80007a8:	e0cc      	b.n	8000944 <__aeabi_dadd+0x238>
 80007aa:	4643      	mov	r3, r8
 80007ac:	025b      	lsls	r3, r3, #9
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	4698      	mov	r8, r3
 80007b2:	4643      	mov	r3, r8
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d100      	bne.n	80007ba <__aeabi_dadd+0xae>
 80007b8:	e12c      	b.n	8000a14 <__aeabi_dadd+0x308>
 80007ba:	4640      	mov	r0, r8
 80007bc:	f001 fe8e 	bl	80024dc <__clzsi2>
 80007c0:	0001      	movs	r1, r0
 80007c2:	3908      	subs	r1, #8
 80007c4:	2220      	movs	r2, #32
 80007c6:	0028      	movs	r0, r5
 80007c8:	4643      	mov	r3, r8
 80007ca:	1a52      	subs	r2, r2, r1
 80007cc:	408b      	lsls	r3, r1
 80007ce:	40d0      	lsrs	r0, r2
 80007d0:	408d      	lsls	r5, r1
 80007d2:	4303      	orrs	r3, r0
 80007d4:	428e      	cmp	r6, r1
 80007d6:	dd00      	ble.n	80007da <__aeabi_dadd+0xce>
 80007d8:	e117      	b.n	8000a0a <__aeabi_dadd+0x2fe>
 80007da:	1b8e      	subs	r6, r1, r6
 80007dc:	1c72      	adds	r2, r6, #1
 80007de:	2a1f      	cmp	r2, #31
 80007e0:	dd00      	ble.n	80007e4 <__aeabi_dadd+0xd8>
 80007e2:	e1a7      	b.n	8000b34 <__aeabi_dadd+0x428>
 80007e4:	2120      	movs	r1, #32
 80007e6:	0018      	movs	r0, r3
 80007e8:	002e      	movs	r6, r5
 80007ea:	1a89      	subs	r1, r1, r2
 80007ec:	408d      	lsls	r5, r1
 80007ee:	4088      	lsls	r0, r1
 80007f0:	40d6      	lsrs	r6, r2
 80007f2:	40d3      	lsrs	r3, r2
 80007f4:	1e69      	subs	r1, r5, #1
 80007f6:	418d      	sbcs	r5, r1
 80007f8:	4330      	orrs	r0, r6
 80007fa:	4698      	mov	r8, r3
 80007fc:	2600      	movs	r6, #0
 80007fe:	4305      	orrs	r5, r0
 8000800:	076b      	lsls	r3, r5, #29
 8000802:	d009      	beq.n	8000818 <__aeabi_dadd+0x10c>
 8000804:	230f      	movs	r3, #15
 8000806:	402b      	ands	r3, r5
 8000808:	2b04      	cmp	r3, #4
 800080a:	d005      	beq.n	8000818 <__aeabi_dadd+0x10c>
 800080c:	1d2b      	adds	r3, r5, #4
 800080e:	42ab      	cmp	r3, r5
 8000810:	41ad      	sbcs	r5, r5
 8000812:	426d      	negs	r5, r5
 8000814:	44a8      	add	r8, r5
 8000816:	001d      	movs	r5, r3
 8000818:	4643      	mov	r3, r8
 800081a:	021b      	lsls	r3, r3, #8
 800081c:	d400      	bmi.n	8000820 <__aeabi_dadd+0x114>
 800081e:	e094      	b.n	800094a <__aeabi_dadd+0x23e>
 8000820:	4b97      	ldr	r3, [pc, #604]	; (8000a80 <__aeabi_dadd+0x374>)
 8000822:	1c72      	adds	r2, r6, #1
 8000824:	429a      	cmp	r2, r3
 8000826:	d100      	bne.n	800082a <__aeabi_dadd+0x11e>
 8000828:	e09d      	b.n	8000966 <__aeabi_dadd+0x25a>
 800082a:	4641      	mov	r1, r8
 800082c:	4b95      	ldr	r3, [pc, #596]	; (8000a84 <__aeabi_dadd+0x378>)
 800082e:	08ed      	lsrs	r5, r5, #3
 8000830:	4019      	ands	r1, r3
 8000832:	000b      	movs	r3, r1
 8000834:	0552      	lsls	r2, r2, #21
 8000836:	0749      	lsls	r1, r1, #29
 8000838:	025b      	lsls	r3, r3, #9
 800083a:	4329      	orrs	r1, r5
 800083c:	0b1b      	lsrs	r3, r3, #12
 800083e:	0d52      	lsrs	r2, r2, #21
 8000840:	0512      	lsls	r2, r2, #20
 8000842:	4313      	orrs	r3, r2
 8000844:	07e4      	lsls	r4, r4, #31
 8000846:	4323      	orrs	r3, r4
 8000848:	0008      	movs	r0, r1
 800084a:	0019      	movs	r1, r3
 800084c:	bce0      	pop	{r5, r6, r7}
 800084e:	46ba      	mov	sl, r7
 8000850:	46b1      	mov	r9, r6
 8000852:	46a8      	mov	r8, r5
 8000854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000856:	2a00      	cmp	r2, #0
 8000858:	d043      	beq.n	80008e2 <__aeabi_dadd+0x1d6>
 800085a:	1b8a      	subs	r2, r1, r6
 800085c:	2e00      	cmp	r6, #0
 800085e:	d000      	beq.n	8000862 <__aeabi_dadd+0x156>
 8000860:	e12a      	b.n	8000ab8 <__aeabi_dadd+0x3ac>
 8000862:	464c      	mov	r4, r9
 8000864:	431c      	orrs	r4, r3
 8000866:	d100      	bne.n	800086a <__aeabi_dadd+0x15e>
 8000868:	e1d1      	b.n	8000c0e <__aeabi_dadd+0x502>
 800086a:	1e54      	subs	r4, r2, #1
 800086c:	2a01      	cmp	r2, #1
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x166>
 8000870:	e21f      	b.n	8000cb2 <__aeabi_dadd+0x5a6>
 8000872:	4d83      	ldr	r5, [pc, #524]	; (8000a80 <__aeabi_dadd+0x374>)
 8000874:	42aa      	cmp	r2, r5
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x16e>
 8000878:	e272      	b.n	8000d60 <__aeabi_dadd+0x654>
 800087a:	0022      	movs	r2, r4
 800087c:	e123      	b.n	8000ac6 <__aeabi_dadd+0x3ba>
 800087e:	2a00      	cmp	r2, #0
 8000880:	dc00      	bgt.n	8000884 <__aeabi_dadd+0x178>
 8000882:	e098      	b.n	80009b6 <__aeabi_dadd+0x2aa>
 8000884:	2900      	cmp	r1, #0
 8000886:	d042      	beq.n	800090e <__aeabi_dadd+0x202>
 8000888:	497d      	ldr	r1, [pc, #500]	; (8000a80 <__aeabi_dadd+0x374>)
 800088a:	428e      	cmp	r6, r1
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x184>
 800088e:	e0da      	b.n	8000a46 <__aeabi_dadd+0x33a>
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0028      	movs	r0, r5
 8000894:	0409      	lsls	r1, r1, #16
 8000896:	4308      	orrs	r0, r1
 8000898:	4684      	mov	ip, r0
 800089a:	2a38      	cmp	r2, #56	; 0x38
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dadd+0x194>
 800089e:	e129      	b.n	8000af4 <__aeabi_dadd+0x3e8>
 80008a0:	2a1f      	cmp	r2, #31
 80008a2:	dc00      	bgt.n	80008a6 <__aeabi_dadd+0x19a>
 80008a4:	e187      	b.n	8000bb6 <__aeabi_dadd+0x4aa>
 80008a6:	0011      	movs	r1, r2
 80008a8:	4665      	mov	r5, ip
 80008aa:	3920      	subs	r1, #32
 80008ac:	40cd      	lsrs	r5, r1
 80008ae:	2a20      	cmp	r2, #32
 80008b0:	d004      	beq.n	80008bc <__aeabi_dadd+0x1b0>
 80008b2:	2040      	movs	r0, #64	; 0x40
 80008b4:	4661      	mov	r1, ip
 80008b6:	1a82      	subs	r2, r0, r2
 80008b8:	4091      	lsls	r1, r2
 80008ba:	430f      	orrs	r7, r1
 80008bc:	0039      	movs	r1, r7
 80008be:	1e4f      	subs	r7, r1, #1
 80008c0:	41b9      	sbcs	r1, r7
 80008c2:	430d      	orrs	r5, r1
 80008c4:	e11b      	b.n	8000afe <__aeabi_dadd+0x3f2>
 80008c6:	0029      	movs	r1, r5
 80008c8:	4339      	orrs	r1, r7
 80008ca:	d100      	bne.n	80008ce <__aeabi_dadd+0x1c2>
 80008cc:	e0b5      	b.n	8000a3a <__aeabi_dadd+0x32e>
 80008ce:	1e51      	subs	r1, r2, #1
 80008d0:	2a01      	cmp	r2, #1
 80008d2:	d100      	bne.n	80008d6 <__aeabi_dadd+0x1ca>
 80008d4:	e1ab      	b.n	8000c2e <__aeabi_dadd+0x522>
 80008d6:	486a      	ldr	r0, [pc, #424]	; (8000a80 <__aeabi_dadd+0x374>)
 80008d8:	4282      	cmp	r2, r0
 80008da:	d100      	bne.n	80008de <__aeabi_dadd+0x1d2>
 80008dc:	e1b2      	b.n	8000c44 <__aeabi_dadd+0x538>
 80008de:	000a      	movs	r2, r1
 80008e0:	e743      	b.n	800076a <__aeabi_dadd+0x5e>
 80008e2:	4969      	ldr	r1, [pc, #420]	; (8000a88 <__aeabi_dadd+0x37c>)
 80008e4:	1c75      	adds	r5, r6, #1
 80008e6:	420d      	tst	r5, r1
 80008e8:	d000      	beq.n	80008ec <__aeabi_dadd+0x1e0>
 80008ea:	e0cf      	b.n	8000a8c <__aeabi_dadd+0x380>
 80008ec:	2e00      	cmp	r6, #0
 80008ee:	d000      	beq.n	80008f2 <__aeabi_dadd+0x1e6>
 80008f0:	e193      	b.n	8000c1a <__aeabi_dadd+0x50e>
 80008f2:	4649      	mov	r1, r9
 80008f4:	4319      	orrs	r1, r3
 80008f6:	d100      	bne.n	80008fa <__aeabi_dadd+0x1ee>
 80008f8:	e1d1      	b.n	8000c9e <__aeabi_dadd+0x592>
 80008fa:	4661      	mov	r1, ip
 80008fc:	4339      	orrs	r1, r7
 80008fe:	d000      	beq.n	8000902 <__aeabi_dadd+0x1f6>
 8000900:	e1e3      	b.n	8000cca <__aeabi_dadd+0x5be>
 8000902:	4649      	mov	r1, r9
 8000904:	0758      	lsls	r0, r3, #29
 8000906:	08c9      	lsrs	r1, r1, #3
 8000908:	4301      	orrs	r1, r0
 800090a:	08db      	lsrs	r3, r3, #3
 800090c:	e026      	b.n	800095c <__aeabi_dadd+0x250>
 800090e:	0029      	movs	r1, r5
 8000910:	4339      	orrs	r1, r7
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x20a>
 8000914:	e091      	b.n	8000a3a <__aeabi_dadd+0x32e>
 8000916:	1e51      	subs	r1, r2, #1
 8000918:	2a01      	cmp	r2, #1
 800091a:	d005      	beq.n	8000928 <__aeabi_dadd+0x21c>
 800091c:	4858      	ldr	r0, [pc, #352]	; (8000a80 <__aeabi_dadd+0x374>)
 800091e:	4282      	cmp	r2, r0
 8000920:	d100      	bne.n	8000924 <__aeabi_dadd+0x218>
 8000922:	e18f      	b.n	8000c44 <__aeabi_dadd+0x538>
 8000924:	000a      	movs	r2, r1
 8000926:	e7b8      	b.n	800089a <__aeabi_dadd+0x18e>
 8000928:	003d      	movs	r5, r7
 800092a:	444d      	add	r5, r9
 800092c:	454d      	cmp	r5, r9
 800092e:	4189      	sbcs	r1, r1
 8000930:	4463      	add	r3, ip
 8000932:	4698      	mov	r8, r3
 8000934:	4249      	negs	r1, r1
 8000936:	4488      	add	r8, r1
 8000938:	4643      	mov	r3, r8
 800093a:	2602      	movs	r6, #2
 800093c:	021b      	lsls	r3, r3, #8
 800093e:	d500      	bpl.n	8000942 <__aeabi_dadd+0x236>
 8000940:	e0eb      	b.n	8000b1a <__aeabi_dadd+0x40e>
 8000942:	3e01      	subs	r6, #1
 8000944:	076b      	lsls	r3, r5, #29
 8000946:	d000      	beq.n	800094a <__aeabi_dadd+0x23e>
 8000948:	e75c      	b.n	8000804 <__aeabi_dadd+0xf8>
 800094a:	4643      	mov	r3, r8
 800094c:	08e9      	lsrs	r1, r5, #3
 800094e:	075a      	lsls	r2, r3, #29
 8000950:	4311      	orrs	r1, r2
 8000952:	0032      	movs	r2, r6
 8000954:	08db      	lsrs	r3, r3, #3
 8000956:	484a      	ldr	r0, [pc, #296]	; (8000a80 <__aeabi_dadd+0x374>)
 8000958:	4282      	cmp	r2, r0
 800095a:	d021      	beq.n	80009a0 <__aeabi_dadd+0x294>
 800095c:	031b      	lsls	r3, r3, #12
 800095e:	0552      	lsls	r2, r2, #21
 8000960:	0b1b      	lsrs	r3, r3, #12
 8000962:	0d52      	lsrs	r2, r2, #21
 8000964:	e76c      	b.n	8000840 <__aeabi_dadd+0x134>
 8000966:	2300      	movs	r3, #0
 8000968:	2100      	movs	r1, #0
 800096a:	e769      	b.n	8000840 <__aeabi_dadd+0x134>
 800096c:	002a      	movs	r2, r5
 800096e:	433a      	orrs	r2, r7
 8000970:	d069      	beq.n	8000a46 <__aeabi_dadd+0x33a>
 8000972:	464a      	mov	r2, r9
 8000974:	0758      	lsls	r0, r3, #29
 8000976:	08d1      	lsrs	r1, r2, #3
 8000978:	08da      	lsrs	r2, r3, #3
 800097a:	2380      	movs	r3, #128	; 0x80
 800097c:	031b      	lsls	r3, r3, #12
 800097e:	4308      	orrs	r0, r1
 8000980:	421a      	tst	r2, r3
 8000982:	d007      	beq.n	8000994 <__aeabi_dadd+0x288>
 8000984:	0029      	movs	r1, r5
 8000986:	08ed      	lsrs	r5, r5, #3
 8000988:	421d      	tst	r5, r3
 800098a:	d103      	bne.n	8000994 <__aeabi_dadd+0x288>
 800098c:	002a      	movs	r2, r5
 800098e:	08ff      	lsrs	r7, r7, #3
 8000990:	0748      	lsls	r0, r1, #29
 8000992:	4338      	orrs	r0, r7
 8000994:	0f43      	lsrs	r3, r0, #29
 8000996:	00c1      	lsls	r1, r0, #3
 8000998:	075b      	lsls	r3, r3, #29
 800099a:	08c9      	lsrs	r1, r1, #3
 800099c:	4319      	orrs	r1, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	000a      	movs	r2, r1
 80009a2:	431a      	orrs	r2, r3
 80009a4:	d100      	bne.n	80009a8 <__aeabi_dadd+0x29c>
 80009a6:	e213      	b.n	8000dd0 <__aeabi_dadd+0x6c4>
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	0312      	lsls	r2, r2, #12
 80009ac:	4313      	orrs	r3, r2
 80009ae:	031b      	lsls	r3, r3, #12
 80009b0:	4a33      	ldr	r2, [pc, #204]	; (8000a80 <__aeabi_dadd+0x374>)
 80009b2:	0b1b      	lsrs	r3, r3, #12
 80009b4:	e744      	b.n	8000840 <__aeabi_dadd+0x134>
 80009b6:	2a00      	cmp	r2, #0
 80009b8:	d04b      	beq.n	8000a52 <__aeabi_dadd+0x346>
 80009ba:	1b8a      	subs	r2, r1, r6
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_dadd+0x2b6>
 80009c0:	e0e7      	b.n	8000b92 <__aeabi_dadd+0x486>
 80009c2:	482f      	ldr	r0, [pc, #188]	; (8000a80 <__aeabi_dadd+0x374>)
 80009c4:	4281      	cmp	r1, r0
 80009c6:	d100      	bne.n	80009ca <__aeabi_dadd+0x2be>
 80009c8:	e195      	b.n	8000cf6 <__aeabi_dadd+0x5ea>
 80009ca:	2080      	movs	r0, #128	; 0x80
 80009cc:	0400      	lsls	r0, r0, #16
 80009ce:	4303      	orrs	r3, r0
 80009d0:	2a38      	cmp	r2, #56	; 0x38
 80009d2:	dd00      	ble.n	80009d6 <__aeabi_dadd+0x2ca>
 80009d4:	e143      	b.n	8000c5e <__aeabi_dadd+0x552>
 80009d6:	2a1f      	cmp	r2, #31
 80009d8:	dd00      	ble.n	80009dc <__aeabi_dadd+0x2d0>
 80009da:	e1db      	b.n	8000d94 <__aeabi_dadd+0x688>
 80009dc:	2020      	movs	r0, #32
 80009de:	001d      	movs	r5, r3
 80009e0:	464e      	mov	r6, r9
 80009e2:	1a80      	subs	r0, r0, r2
 80009e4:	4085      	lsls	r5, r0
 80009e6:	40d6      	lsrs	r6, r2
 80009e8:	4335      	orrs	r5, r6
 80009ea:	464e      	mov	r6, r9
 80009ec:	4086      	lsls	r6, r0
 80009ee:	0030      	movs	r0, r6
 80009f0:	40d3      	lsrs	r3, r2
 80009f2:	1e46      	subs	r6, r0, #1
 80009f4:	41b0      	sbcs	r0, r6
 80009f6:	449c      	add	ip, r3
 80009f8:	4305      	orrs	r5, r0
 80009fa:	19ed      	adds	r5, r5, r7
 80009fc:	42bd      	cmp	r5, r7
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	425b      	negs	r3, r3
 8000a02:	4463      	add	r3, ip
 8000a04:	4698      	mov	r8, r3
 8000a06:	000e      	movs	r6, r1
 8000a08:	e07f      	b.n	8000b0a <__aeabi_dadd+0x3fe>
 8000a0a:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <__aeabi_dadd+0x378>)
 8000a0c:	1a76      	subs	r6, r6, r1
 8000a0e:	4013      	ands	r3, r2
 8000a10:	4698      	mov	r8, r3
 8000a12:	e6f5      	b.n	8000800 <__aeabi_dadd+0xf4>
 8000a14:	0028      	movs	r0, r5
 8000a16:	f001 fd61 	bl	80024dc <__clzsi2>
 8000a1a:	0001      	movs	r1, r0
 8000a1c:	3118      	adds	r1, #24
 8000a1e:	291f      	cmp	r1, #31
 8000a20:	dc00      	bgt.n	8000a24 <__aeabi_dadd+0x318>
 8000a22:	e6cf      	b.n	80007c4 <__aeabi_dadd+0xb8>
 8000a24:	002b      	movs	r3, r5
 8000a26:	3808      	subs	r0, #8
 8000a28:	4083      	lsls	r3, r0
 8000a2a:	2500      	movs	r5, #0
 8000a2c:	e6d2      	b.n	80007d4 <__aeabi_dadd+0xc8>
 8000a2e:	4662      	mov	r2, ip
 8000a30:	433a      	orrs	r2, r7
 8000a32:	0011      	movs	r1, r2
 8000a34:	1e4f      	subs	r7, r1, #1
 8000a36:	41b9      	sbcs	r1, r7
 8000a38:	e6ac      	b.n	8000794 <__aeabi_dadd+0x88>
 8000a3a:	4649      	mov	r1, r9
 8000a3c:	0758      	lsls	r0, r3, #29
 8000a3e:	08c9      	lsrs	r1, r1, #3
 8000a40:	4301      	orrs	r1, r0
 8000a42:	08db      	lsrs	r3, r3, #3
 8000a44:	e787      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000a46:	4649      	mov	r1, r9
 8000a48:	075a      	lsls	r2, r3, #29
 8000a4a:	08c9      	lsrs	r1, r1, #3
 8000a4c:	4311      	orrs	r1, r2
 8000a4e:	08db      	lsrs	r3, r3, #3
 8000a50:	e7a6      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000a52:	490d      	ldr	r1, [pc, #52]	; (8000a88 <__aeabi_dadd+0x37c>)
 8000a54:	1c70      	adds	r0, r6, #1
 8000a56:	4208      	tst	r0, r1
 8000a58:	d000      	beq.n	8000a5c <__aeabi_dadd+0x350>
 8000a5a:	e0bb      	b.n	8000bd4 <__aeabi_dadd+0x4c8>
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_dadd+0x356>
 8000a60:	e114      	b.n	8000c8c <__aeabi_dadd+0x580>
 8000a62:	4649      	mov	r1, r9
 8000a64:	4319      	orrs	r1, r3
 8000a66:	d100      	bne.n	8000a6a <__aeabi_dadd+0x35e>
 8000a68:	e175      	b.n	8000d56 <__aeabi_dadd+0x64a>
 8000a6a:	0029      	movs	r1, r5
 8000a6c:	4339      	orrs	r1, r7
 8000a6e:	d000      	beq.n	8000a72 <__aeabi_dadd+0x366>
 8000a70:	e17e      	b.n	8000d70 <__aeabi_dadd+0x664>
 8000a72:	4649      	mov	r1, r9
 8000a74:	0758      	lsls	r0, r3, #29
 8000a76:	08c9      	lsrs	r1, r1, #3
 8000a78:	4301      	orrs	r1, r0
 8000a7a:	08db      	lsrs	r3, r3, #3
 8000a7c:	e76e      	b.n	800095c <__aeabi_dadd+0x250>
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	000007ff 	.word	0x000007ff
 8000a84:	ff7fffff 	.word	0xff7fffff
 8000a88:	000007fe 	.word	0x000007fe
 8000a8c:	4649      	mov	r1, r9
 8000a8e:	1bcd      	subs	r5, r1, r7
 8000a90:	4661      	mov	r1, ip
 8000a92:	1a58      	subs	r0, r3, r1
 8000a94:	45a9      	cmp	r9, r5
 8000a96:	4189      	sbcs	r1, r1
 8000a98:	4249      	negs	r1, r1
 8000a9a:	4688      	mov	r8, r1
 8000a9c:	0001      	movs	r1, r0
 8000a9e:	4640      	mov	r0, r8
 8000aa0:	1a09      	subs	r1, r1, r0
 8000aa2:	4688      	mov	r8, r1
 8000aa4:	0209      	lsls	r1, r1, #8
 8000aa6:	d500      	bpl.n	8000aaa <__aeabi_dadd+0x39e>
 8000aa8:	e0a6      	b.n	8000bf8 <__aeabi_dadd+0x4ec>
 8000aaa:	4641      	mov	r1, r8
 8000aac:	4329      	orrs	r1, r5
 8000aae:	d000      	beq.n	8000ab2 <__aeabi_dadd+0x3a6>
 8000ab0:	e67f      	b.n	80007b2 <__aeabi_dadd+0xa6>
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2400      	movs	r4, #0
 8000ab6:	e751      	b.n	800095c <__aeabi_dadd+0x250>
 8000ab8:	4cc7      	ldr	r4, [pc, #796]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000aba:	42a1      	cmp	r1, r4
 8000abc:	d100      	bne.n	8000ac0 <__aeabi_dadd+0x3b4>
 8000abe:	e0c7      	b.n	8000c50 <__aeabi_dadd+0x544>
 8000ac0:	2480      	movs	r4, #128	; 0x80
 8000ac2:	0424      	lsls	r4, r4, #16
 8000ac4:	4323      	orrs	r3, r4
 8000ac6:	2a38      	cmp	r2, #56	; 0x38
 8000ac8:	dc54      	bgt.n	8000b74 <__aeabi_dadd+0x468>
 8000aca:	2a1f      	cmp	r2, #31
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_dadd+0x3c4>
 8000ace:	e0cc      	b.n	8000c6a <__aeabi_dadd+0x55e>
 8000ad0:	2420      	movs	r4, #32
 8000ad2:	4648      	mov	r0, r9
 8000ad4:	1aa4      	subs	r4, r4, r2
 8000ad6:	001d      	movs	r5, r3
 8000ad8:	464e      	mov	r6, r9
 8000ada:	40a0      	lsls	r0, r4
 8000adc:	40d6      	lsrs	r6, r2
 8000ade:	40a5      	lsls	r5, r4
 8000ae0:	0004      	movs	r4, r0
 8000ae2:	40d3      	lsrs	r3, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	4335      	orrs	r5, r6
 8000ae8:	1e66      	subs	r6, r4, #1
 8000aea:	41b4      	sbcs	r4, r6
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	469c      	mov	ip, r3
 8000af0:	4325      	orrs	r5, r4
 8000af2:	e044      	b.n	8000b7e <__aeabi_dadd+0x472>
 8000af4:	4662      	mov	r2, ip
 8000af6:	433a      	orrs	r2, r7
 8000af8:	0015      	movs	r5, r2
 8000afa:	1e6f      	subs	r7, r5, #1
 8000afc:	41bd      	sbcs	r5, r7
 8000afe:	444d      	add	r5, r9
 8000b00:	454d      	cmp	r5, r9
 8000b02:	4189      	sbcs	r1, r1
 8000b04:	4249      	negs	r1, r1
 8000b06:	4688      	mov	r8, r1
 8000b08:	4498      	add	r8, r3
 8000b0a:	4643      	mov	r3, r8
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	d400      	bmi.n	8000b12 <__aeabi_dadd+0x406>
 8000b10:	e718      	b.n	8000944 <__aeabi_dadd+0x238>
 8000b12:	4bb1      	ldr	r3, [pc, #708]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000b14:	3601      	adds	r6, #1
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d049      	beq.n	8000bae <__aeabi_dadd+0x4a2>
 8000b1a:	4642      	mov	r2, r8
 8000b1c:	4baf      	ldr	r3, [pc, #700]	; (8000ddc <__aeabi_dadd+0x6d0>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	401a      	ands	r2, r3
 8000b22:	0013      	movs	r3, r2
 8000b24:	086a      	lsrs	r2, r5, #1
 8000b26:	400d      	ands	r5, r1
 8000b28:	4315      	orrs	r5, r2
 8000b2a:	07d9      	lsls	r1, r3, #31
 8000b2c:	085b      	lsrs	r3, r3, #1
 8000b2e:	4698      	mov	r8, r3
 8000b30:	430d      	orrs	r5, r1
 8000b32:	e665      	b.n	8000800 <__aeabi_dadd+0xf4>
 8000b34:	0018      	movs	r0, r3
 8000b36:	3e1f      	subs	r6, #31
 8000b38:	40f0      	lsrs	r0, r6
 8000b3a:	2a20      	cmp	r2, #32
 8000b3c:	d003      	beq.n	8000b46 <__aeabi_dadd+0x43a>
 8000b3e:	2140      	movs	r1, #64	; 0x40
 8000b40:	1a8a      	subs	r2, r1, r2
 8000b42:	4093      	lsls	r3, r2
 8000b44:	431d      	orrs	r5, r3
 8000b46:	1e69      	subs	r1, r5, #1
 8000b48:	418d      	sbcs	r5, r1
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	2600      	movs	r6, #0
 8000b4e:	4698      	mov	r8, r3
 8000b50:	4305      	orrs	r5, r0
 8000b52:	e6f7      	b.n	8000944 <__aeabi_dadd+0x238>
 8000b54:	0011      	movs	r1, r2
 8000b56:	4665      	mov	r5, ip
 8000b58:	3920      	subs	r1, #32
 8000b5a:	40cd      	lsrs	r5, r1
 8000b5c:	2a20      	cmp	r2, #32
 8000b5e:	d004      	beq.n	8000b6a <__aeabi_dadd+0x45e>
 8000b60:	2040      	movs	r0, #64	; 0x40
 8000b62:	4661      	mov	r1, ip
 8000b64:	1a82      	subs	r2, r0, r2
 8000b66:	4091      	lsls	r1, r2
 8000b68:	430f      	orrs	r7, r1
 8000b6a:	0039      	movs	r1, r7
 8000b6c:	1e4f      	subs	r7, r1, #1
 8000b6e:	41b9      	sbcs	r1, r7
 8000b70:	4329      	orrs	r1, r5
 8000b72:	e60f      	b.n	8000794 <__aeabi_dadd+0x88>
 8000b74:	464a      	mov	r2, r9
 8000b76:	4313      	orrs	r3, r2
 8000b78:	001d      	movs	r5, r3
 8000b7a:	1e6b      	subs	r3, r5, #1
 8000b7c:	419d      	sbcs	r5, r3
 8000b7e:	1b7d      	subs	r5, r7, r5
 8000b80:	42af      	cmp	r7, r5
 8000b82:	419b      	sbcs	r3, r3
 8000b84:	4662      	mov	r2, ip
 8000b86:	425b      	negs	r3, r3
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	4698      	mov	r8, r3
 8000b8c:	4654      	mov	r4, sl
 8000b8e:	000e      	movs	r6, r1
 8000b90:	e607      	b.n	80007a2 <__aeabi_dadd+0x96>
 8000b92:	4648      	mov	r0, r9
 8000b94:	4318      	orrs	r0, r3
 8000b96:	d100      	bne.n	8000b9a <__aeabi_dadd+0x48e>
 8000b98:	e0b3      	b.n	8000d02 <__aeabi_dadd+0x5f6>
 8000b9a:	1e50      	subs	r0, r2, #1
 8000b9c:	2a01      	cmp	r2, #1
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0x496>
 8000ba0:	e10d      	b.n	8000dbe <__aeabi_dadd+0x6b2>
 8000ba2:	4d8d      	ldr	r5, [pc, #564]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000ba4:	42aa      	cmp	r2, r5
 8000ba6:	d100      	bne.n	8000baa <__aeabi_dadd+0x49e>
 8000ba8:	e0a5      	b.n	8000cf6 <__aeabi_dadd+0x5ea>
 8000baa:	0002      	movs	r2, r0
 8000bac:	e710      	b.n	80009d0 <__aeabi_dadd+0x2c4>
 8000bae:	0032      	movs	r2, r6
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	e644      	b.n	8000840 <__aeabi_dadd+0x134>
 8000bb6:	2120      	movs	r1, #32
 8000bb8:	0038      	movs	r0, r7
 8000bba:	1a89      	subs	r1, r1, r2
 8000bbc:	4665      	mov	r5, ip
 8000bbe:	408f      	lsls	r7, r1
 8000bc0:	408d      	lsls	r5, r1
 8000bc2:	40d0      	lsrs	r0, r2
 8000bc4:	1e79      	subs	r1, r7, #1
 8000bc6:	418f      	sbcs	r7, r1
 8000bc8:	4305      	orrs	r5, r0
 8000bca:	433d      	orrs	r5, r7
 8000bcc:	4667      	mov	r7, ip
 8000bce:	40d7      	lsrs	r7, r2
 8000bd0:	19db      	adds	r3, r3, r7
 8000bd2:	e794      	b.n	8000afe <__aeabi_dadd+0x3f2>
 8000bd4:	4a80      	ldr	r2, [pc, #512]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000bd6:	4290      	cmp	r0, r2
 8000bd8:	d100      	bne.n	8000bdc <__aeabi_dadd+0x4d0>
 8000bda:	e0ec      	b.n	8000db6 <__aeabi_dadd+0x6aa>
 8000bdc:	0039      	movs	r1, r7
 8000bde:	4449      	add	r1, r9
 8000be0:	4549      	cmp	r1, r9
 8000be2:	4192      	sbcs	r2, r2
 8000be4:	4463      	add	r3, ip
 8000be6:	4252      	negs	r2, r2
 8000be8:	189b      	adds	r3, r3, r2
 8000bea:	07dd      	lsls	r5, r3, #31
 8000bec:	0849      	lsrs	r1, r1, #1
 8000bee:	085b      	lsrs	r3, r3, #1
 8000bf0:	4698      	mov	r8, r3
 8000bf2:	0006      	movs	r6, r0
 8000bf4:	430d      	orrs	r5, r1
 8000bf6:	e6a5      	b.n	8000944 <__aeabi_dadd+0x238>
 8000bf8:	464a      	mov	r2, r9
 8000bfa:	1abd      	subs	r5, r7, r2
 8000bfc:	42af      	cmp	r7, r5
 8000bfe:	4189      	sbcs	r1, r1
 8000c00:	4662      	mov	r2, ip
 8000c02:	4249      	negs	r1, r1
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	1a5b      	subs	r3, r3, r1
 8000c08:	4698      	mov	r8, r3
 8000c0a:	4654      	mov	r4, sl
 8000c0c:	e5d1      	b.n	80007b2 <__aeabi_dadd+0xa6>
 8000c0e:	076c      	lsls	r4, r5, #29
 8000c10:	08f9      	lsrs	r1, r7, #3
 8000c12:	4321      	orrs	r1, r4
 8000c14:	08eb      	lsrs	r3, r5, #3
 8000c16:	0004      	movs	r4, r0
 8000c18:	e69d      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000c1a:	464a      	mov	r2, r9
 8000c1c:	431a      	orrs	r2, r3
 8000c1e:	d175      	bne.n	8000d0c <__aeabi_dadd+0x600>
 8000c20:	4661      	mov	r1, ip
 8000c22:	4339      	orrs	r1, r7
 8000c24:	d114      	bne.n	8000c50 <__aeabi_dadd+0x544>
 8000c26:	2380      	movs	r3, #128	; 0x80
 8000c28:	2400      	movs	r4, #0
 8000c2a:	031b      	lsls	r3, r3, #12
 8000c2c:	e6bc      	b.n	80009a8 <__aeabi_dadd+0x29c>
 8000c2e:	464a      	mov	r2, r9
 8000c30:	1bd5      	subs	r5, r2, r7
 8000c32:	45a9      	cmp	r9, r5
 8000c34:	4189      	sbcs	r1, r1
 8000c36:	4662      	mov	r2, ip
 8000c38:	4249      	negs	r1, r1
 8000c3a:	1a9b      	subs	r3, r3, r2
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	4698      	mov	r8, r3
 8000c40:	2601      	movs	r6, #1
 8000c42:	e5ae      	b.n	80007a2 <__aeabi_dadd+0x96>
 8000c44:	464a      	mov	r2, r9
 8000c46:	08d1      	lsrs	r1, r2, #3
 8000c48:	075a      	lsls	r2, r3, #29
 8000c4a:	4311      	orrs	r1, r2
 8000c4c:	08db      	lsrs	r3, r3, #3
 8000c4e:	e6a7      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000c50:	4663      	mov	r3, ip
 8000c52:	08f9      	lsrs	r1, r7, #3
 8000c54:	075a      	lsls	r2, r3, #29
 8000c56:	4654      	mov	r4, sl
 8000c58:	4311      	orrs	r1, r2
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	e6a0      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000c5e:	464a      	mov	r2, r9
 8000c60:	4313      	orrs	r3, r2
 8000c62:	001d      	movs	r5, r3
 8000c64:	1e6b      	subs	r3, r5, #1
 8000c66:	419d      	sbcs	r5, r3
 8000c68:	e6c7      	b.n	80009fa <__aeabi_dadd+0x2ee>
 8000c6a:	0014      	movs	r4, r2
 8000c6c:	001e      	movs	r6, r3
 8000c6e:	3c20      	subs	r4, #32
 8000c70:	40e6      	lsrs	r6, r4
 8000c72:	2a20      	cmp	r2, #32
 8000c74:	d005      	beq.n	8000c82 <__aeabi_dadd+0x576>
 8000c76:	2440      	movs	r4, #64	; 0x40
 8000c78:	1aa2      	subs	r2, r4, r2
 8000c7a:	4093      	lsls	r3, r2
 8000c7c:	464a      	mov	r2, r9
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	4691      	mov	r9, r2
 8000c82:	464d      	mov	r5, r9
 8000c84:	1e6b      	subs	r3, r5, #1
 8000c86:	419d      	sbcs	r5, r3
 8000c88:	4335      	orrs	r5, r6
 8000c8a:	e778      	b.n	8000b7e <__aeabi_dadd+0x472>
 8000c8c:	464a      	mov	r2, r9
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	d000      	beq.n	8000c94 <__aeabi_dadd+0x588>
 8000c92:	e66b      	b.n	800096c <__aeabi_dadd+0x260>
 8000c94:	076b      	lsls	r3, r5, #29
 8000c96:	08f9      	lsrs	r1, r7, #3
 8000c98:	4319      	orrs	r1, r3
 8000c9a:	08eb      	lsrs	r3, r5, #3
 8000c9c:	e680      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000c9e:	4661      	mov	r1, ip
 8000ca0:	4339      	orrs	r1, r7
 8000ca2:	d054      	beq.n	8000d4e <__aeabi_dadd+0x642>
 8000ca4:	4663      	mov	r3, ip
 8000ca6:	08f9      	lsrs	r1, r7, #3
 8000ca8:	075c      	lsls	r4, r3, #29
 8000caa:	4321      	orrs	r1, r4
 8000cac:	08db      	lsrs	r3, r3, #3
 8000cae:	0004      	movs	r4, r0
 8000cb0:	e654      	b.n	800095c <__aeabi_dadd+0x250>
 8000cb2:	464a      	mov	r2, r9
 8000cb4:	1abd      	subs	r5, r7, r2
 8000cb6:	42af      	cmp	r7, r5
 8000cb8:	4189      	sbcs	r1, r1
 8000cba:	4662      	mov	r2, ip
 8000cbc:	4249      	negs	r1, r1
 8000cbe:	1ad3      	subs	r3, r2, r3
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	4698      	mov	r8, r3
 8000cc4:	0004      	movs	r4, r0
 8000cc6:	2601      	movs	r6, #1
 8000cc8:	e56b      	b.n	80007a2 <__aeabi_dadd+0x96>
 8000cca:	464a      	mov	r2, r9
 8000ccc:	1bd5      	subs	r5, r2, r7
 8000cce:	45a9      	cmp	r9, r5
 8000cd0:	4189      	sbcs	r1, r1
 8000cd2:	4662      	mov	r2, ip
 8000cd4:	4249      	negs	r1, r1
 8000cd6:	1a9a      	subs	r2, r3, r2
 8000cd8:	1a52      	subs	r2, r2, r1
 8000cda:	4690      	mov	r8, r2
 8000cdc:	0212      	lsls	r2, r2, #8
 8000cde:	d532      	bpl.n	8000d46 <__aeabi_dadd+0x63a>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1abd      	subs	r5, r7, r2
 8000ce4:	42af      	cmp	r7, r5
 8000ce6:	4189      	sbcs	r1, r1
 8000ce8:	4662      	mov	r2, ip
 8000cea:	4249      	negs	r1, r1
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	1a5b      	subs	r3, r3, r1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	0004      	movs	r4, r0
 8000cf4:	e584      	b.n	8000800 <__aeabi_dadd+0xf4>
 8000cf6:	4663      	mov	r3, ip
 8000cf8:	08f9      	lsrs	r1, r7, #3
 8000cfa:	075a      	lsls	r2, r3, #29
 8000cfc:	4311      	orrs	r1, r2
 8000cfe:	08db      	lsrs	r3, r3, #3
 8000d00:	e64e      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000d02:	08f9      	lsrs	r1, r7, #3
 8000d04:	0768      	lsls	r0, r5, #29
 8000d06:	4301      	orrs	r1, r0
 8000d08:	08eb      	lsrs	r3, r5, #3
 8000d0a:	e624      	b.n	8000956 <__aeabi_dadd+0x24a>
 8000d0c:	4662      	mov	r2, ip
 8000d0e:	433a      	orrs	r2, r7
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x608>
 8000d12:	e698      	b.n	8000a46 <__aeabi_dadd+0x33a>
 8000d14:	464a      	mov	r2, r9
 8000d16:	08d1      	lsrs	r1, r2, #3
 8000d18:	075a      	lsls	r2, r3, #29
 8000d1a:	4311      	orrs	r1, r2
 8000d1c:	08da      	lsrs	r2, r3, #3
 8000d1e:	2380      	movs	r3, #128	; 0x80
 8000d20:	031b      	lsls	r3, r3, #12
 8000d22:	421a      	tst	r2, r3
 8000d24:	d008      	beq.n	8000d38 <__aeabi_dadd+0x62c>
 8000d26:	4660      	mov	r0, ip
 8000d28:	08c5      	lsrs	r5, r0, #3
 8000d2a:	421d      	tst	r5, r3
 8000d2c:	d104      	bne.n	8000d38 <__aeabi_dadd+0x62c>
 8000d2e:	4654      	mov	r4, sl
 8000d30:	002a      	movs	r2, r5
 8000d32:	08f9      	lsrs	r1, r7, #3
 8000d34:	0743      	lsls	r3, r0, #29
 8000d36:	4319      	orrs	r1, r3
 8000d38:	0f4b      	lsrs	r3, r1, #29
 8000d3a:	00c9      	lsls	r1, r1, #3
 8000d3c:	075b      	lsls	r3, r3, #29
 8000d3e:	08c9      	lsrs	r1, r1, #3
 8000d40:	4319      	orrs	r1, r3
 8000d42:	0013      	movs	r3, r2
 8000d44:	e62c      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000d46:	4641      	mov	r1, r8
 8000d48:	4329      	orrs	r1, r5
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_dadd+0x642>
 8000d4c:	e5fa      	b.n	8000944 <__aeabi_dadd+0x238>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	000a      	movs	r2, r1
 8000d52:	2400      	movs	r4, #0
 8000d54:	e602      	b.n	800095c <__aeabi_dadd+0x250>
 8000d56:	076b      	lsls	r3, r5, #29
 8000d58:	08f9      	lsrs	r1, r7, #3
 8000d5a:	4319      	orrs	r1, r3
 8000d5c:	08eb      	lsrs	r3, r5, #3
 8000d5e:	e5fd      	b.n	800095c <__aeabi_dadd+0x250>
 8000d60:	4663      	mov	r3, ip
 8000d62:	08f9      	lsrs	r1, r7, #3
 8000d64:	075b      	lsls	r3, r3, #29
 8000d66:	4319      	orrs	r1, r3
 8000d68:	4663      	mov	r3, ip
 8000d6a:	0004      	movs	r4, r0
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	e617      	b.n	80009a0 <__aeabi_dadd+0x294>
 8000d70:	003d      	movs	r5, r7
 8000d72:	444d      	add	r5, r9
 8000d74:	4463      	add	r3, ip
 8000d76:	454d      	cmp	r5, r9
 8000d78:	4189      	sbcs	r1, r1
 8000d7a:	4698      	mov	r8, r3
 8000d7c:	4249      	negs	r1, r1
 8000d7e:	4488      	add	r8, r1
 8000d80:	4643      	mov	r3, r8
 8000d82:	021b      	lsls	r3, r3, #8
 8000d84:	d400      	bmi.n	8000d88 <__aeabi_dadd+0x67c>
 8000d86:	e5dd      	b.n	8000944 <__aeabi_dadd+0x238>
 8000d88:	4642      	mov	r2, r8
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <__aeabi_dadd+0x6d0>)
 8000d8c:	2601      	movs	r6, #1
 8000d8e:	401a      	ands	r2, r3
 8000d90:	4690      	mov	r8, r2
 8000d92:	e5d7      	b.n	8000944 <__aeabi_dadd+0x238>
 8000d94:	0010      	movs	r0, r2
 8000d96:	001e      	movs	r6, r3
 8000d98:	3820      	subs	r0, #32
 8000d9a:	40c6      	lsrs	r6, r0
 8000d9c:	2a20      	cmp	r2, #32
 8000d9e:	d005      	beq.n	8000dac <__aeabi_dadd+0x6a0>
 8000da0:	2040      	movs	r0, #64	; 0x40
 8000da2:	1a82      	subs	r2, r0, r2
 8000da4:	4093      	lsls	r3, r2
 8000da6:	464a      	mov	r2, r9
 8000da8:	431a      	orrs	r2, r3
 8000daa:	4691      	mov	r9, r2
 8000dac:	464d      	mov	r5, r9
 8000dae:	1e6b      	subs	r3, r5, #1
 8000db0:	419d      	sbcs	r5, r3
 8000db2:	4335      	orrs	r5, r6
 8000db4:	e621      	b.n	80009fa <__aeabi_dadd+0x2ee>
 8000db6:	0002      	movs	r2, r0
 8000db8:	2300      	movs	r3, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	e540      	b.n	8000840 <__aeabi_dadd+0x134>
 8000dbe:	464a      	mov	r2, r9
 8000dc0:	19d5      	adds	r5, r2, r7
 8000dc2:	42bd      	cmp	r5, r7
 8000dc4:	4189      	sbcs	r1, r1
 8000dc6:	4463      	add	r3, ip
 8000dc8:	4698      	mov	r8, r3
 8000dca:	4249      	negs	r1, r1
 8000dcc:	4488      	add	r8, r1
 8000dce:	e5b3      	b.n	8000938 <__aeabi_dadd+0x22c>
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4a01      	ldr	r2, [pc, #4]	; (8000dd8 <__aeabi_dadd+0x6cc>)
 8000dd4:	000b      	movs	r3, r1
 8000dd6:	e533      	b.n	8000840 <__aeabi_dadd+0x134>
 8000dd8:	000007ff 	.word	0x000007ff
 8000ddc:	ff7fffff 	.word	0xff7fffff

08000de0 <__aeabi_ddiv>:
 8000de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000de2:	4657      	mov	r7, sl
 8000de4:	464e      	mov	r6, r9
 8000de6:	4645      	mov	r5, r8
 8000de8:	46de      	mov	lr, fp
 8000dea:	b5e0      	push	{r5, r6, r7, lr}
 8000dec:	4681      	mov	r9, r0
 8000dee:	0005      	movs	r5, r0
 8000df0:	030c      	lsls	r4, r1, #12
 8000df2:	0048      	lsls	r0, r1, #1
 8000df4:	4692      	mov	sl, r2
 8000df6:	001f      	movs	r7, r3
 8000df8:	b085      	sub	sp, #20
 8000dfa:	0b24      	lsrs	r4, r4, #12
 8000dfc:	0d40      	lsrs	r0, r0, #21
 8000dfe:	0fce      	lsrs	r6, r1, #31
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d059      	beq.n	8000eb8 <__aeabi_ddiv+0xd8>
 8000e04:	4b87      	ldr	r3, [pc, #540]	; (8001024 <__aeabi_ddiv+0x244>)
 8000e06:	4298      	cmp	r0, r3
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x2c>
 8000e0a:	e098      	b.n	8000f3e <__aeabi_ddiv+0x15e>
 8000e0c:	0f6b      	lsrs	r3, r5, #29
 8000e0e:	00e4      	lsls	r4, r4, #3
 8000e10:	431c      	orrs	r4, r3
 8000e12:	2380      	movs	r3, #128	; 0x80
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4323      	orrs	r3, r4
 8000e18:	4698      	mov	r8, r3
 8000e1a:	4b83      	ldr	r3, [pc, #524]	; (8001028 <__aeabi_ddiv+0x248>)
 8000e1c:	00ed      	lsls	r5, r5, #3
 8000e1e:	469b      	mov	fp, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	4699      	mov	r9, r3
 8000e24:	4483      	add	fp, r0
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	033c      	lsls	r4, r7, #12
 8000e2a:	007b      	lsls	r3, r7, #1
 8000e2c:	4650      	mov	r0, sl
 8000e2e:	0b24      	lsrs	r4, r4, #12
 8000e30:	0d5b      	lsrs	r3, r3, #21
 8000e32:	0fff      	lsrs	r7, r7, #31
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d067      	beq.n	8000f08 <__aeabi_ddiv+0x128>
 8000e38:	4a7a      	ldr	r2, [pc, #488]	; (8001024 <__aeabi_ddiv+0x244>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d018      	beq.n	8000e70 <__aeabi_ddiv+0x90>
 8000e3e:	497a      	ldr	r1, [pc, #488]	; (8001028 <__aeabi_ddiv+0x248>)
 8000e40:	0f42      	lsrs	r2, r0, #29
 8000e42:	468c      	mov	ip, r1
 8000e44:	00e4      	lsls	r4, r4, #3
 8000e46:	4659      	mov	r1, fp
 8000e48:	4314      	orrs	r4, r2
 8000e4a:	2280      	movs	r2, #128	; 0x80
 8000e4c:	4463      	add	r3, ip
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	1acb      	subs	r3, r1, r3
 8000e52:	4314      	orrs	r4, r2
 8000e54:	469b      	mov	fp, r3
 8000e56:	00c2      	lsls	r2, r0, #3
 8000e58:	2000      	movs	r0, #0
 8000e5a:	0033      	movs	r3, r6
 8000e5c:	407b      	eors	r3, r7
 8000e5e:	469a      	mov	sl, r3
 8000e60:	464b      	mov	r3, r9
 8000e62:	2b0f      	cmp	r3, #15
 8000e64:	d900      	bls.n	8000e68 <__aeabi_ddiv+0x88>
 8000e66:	e0ef      	b.n	8001048 <__aeabi_ddiv+0x268>
 8000e68:	4970      	ldr	r1, [pc, #448]	; (800102c <__aeabi_ddiv+0x24c>)
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	58cb      	ldr	r3, [r1, r3]
 8000e6e:	469f      	mov	pc, r3
 8000e70:	4b6f      	ldr	r3, [pc, #444]	; (8001030 <__aeabi_ddiv+0x250>)
 8000e72:	4652      	mov	r2, sl
 8000e74:	469c      	mov	ip, r3
 8000e76:	4322      	orrs	r2, r4
 8000e78:	44e3      	add	fp, ip
 8000e7a:	2a00      	cmp	r2, #0
 8000e7c:	d000      	beq.n	8000e80 <__aeabi_ddiv+0xa0>
 8000e7e:	e095      	b.n	8000fac <__aeabi_ddiv+0x1cc>
 8000e80:	4649      	mov	r1, r9
 8000e82:	2302      	movs	r3, #2
 8000e84:	4319      	orrs	r1, r3
 8000e86:	4689      	mov	r9, r1
 8000e88:	2400      	movs	r4, #0
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	e7e5      	b.n	8000e5a <__aeabi_ddiv+0x7a>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2400      	movs	r4, #0
 8000e92:	2500      	movs	r5, #0
 8000e94:	4652      	mov	r2, sl
 8000e96:	051b      	lsls	r3, r3, #20
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	07d2      	lsls	r2, r2, #31
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	0028      	movs	r0, r5
 8000ea0:	0019      	movs	r1, r3
 8000ea2:	b005      	add	sp, #20
 8000ea4:	bcf0      	pop	{r4, r5, r6, r7}
 8000ea6:	46bb      	mov	fp, r7
 8000ea8:	46b2      	mov	sl, r6
 8000eaa:	46a9      	mov	r9, r5
 8000eac:	46a0      	mov	r8, r4
 8000eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	4b5b      	ldr	r3, [pc, #364]	; (8001024 <__aeabi_ddiv+0x244>)
 8000eb6:	e7ed      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8000eb8:	464b      	mov	r3, r9
 8000eba:	4323      	orrs	r3, r4
 8000ebc:	4698      	mov	r8, r3
 8000ebe:	d100      	bne.n	8000ec2 <__aeabi_ddiv+0xe2>
 8000ec0:	e089      	b.n	8000fd6 <__aeabi_ddiv+0x1f6>
 8000ec2:	2c00      	cmp	r4, #0
 8000ec4:	d100      	bne.n	8000ec8 <__aeabi_ddiv+0xe8>
 8000ec6:	e1e0      	b.n	800128a <__aeabi_ddiv+0x4aa>
 8000ec8:	0020      	movs	r0, r4
 8000eca:	f001 fb07 	bl	80024dc <__clzsi2>
 8000ece:	0001      	movs	r1, r0
 8000ed0:	0002      	movs	r2, r0
 8000ed2:	390b      	subs	r1, #11
 8000ed4:	231d      	movs	r3, #29
 8000ed6:	1a5b      	subs	r3, r3, r1
 8000ed8:	4649      	mov	r1, r9
 8000eda:	0010      	movs	r0, r2
 8000edc:	40d9      	lsrs	r1, r3
 8000ede:	3808      	subs	r0, #8
 8000ee0:	4084      	lsls	r4, r0
 8000ee2:	000b      	movs	r3, r1
 8000ee4:	464d      	mov	r5, r9
 8000ee6:	4323      	orrs	r3, r4
 8000ee8:	4698      	mov	r8, r3
 8000eea:	4085      	lsls	r5, r0
 8000eec:	4851      	ldr	r0, [pc, #324]	; (8001034 <__aeabi_ddiv+0x254>)
 8000eee:	033c      	lsls	r4, r7, #12
 8000ef0:	1a83      	subs	r3, r0, r2
 8000ef2:	469b      	mov	fp, r3
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	4699      	mov	r9, r3
 8000ef8:	9300      	str	r3, [sp, #0]
 8000efa:	007b      	lsls	r3, r7, #1
 8000efc:	4650      	mov	r0, sl
 8000efe:	0b24      	lsrs	r4, r4, #12
 8000f00:	0d5b      	lsrs	r3, r3, #21
 8000f02:	0fff      	lsrs	r7, r7, #31
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d197      	bne.n	8000e38 <__aeabi_ddiv+0x58>
 8000f08:	4652      	mov	r2, sl
 8000f0a:	4322      	orrs	r2, r4
 8000f0c:	d055      	beq.n	8000fba <__aeabi_ddiv+0x1da>
 8000f0e:	2c00      	cmp	r4, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_ddiv+0x134>
 8000f12:	e1ca      	b.n	80012aa <__aeabi_ddiv+0x4ca>
 8000f14:	0020      	movs	r0, r4
 8000f16:	f001 fae1 	bl	80024dc <__clzsi2>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	3a0b      	subs	r2, #11
 8000f1e:	231d      	movs	r3, #29
 8000f20:	0001      	movs	r1, r0
 8000f22:	1a9b      	subs	r3, r3, r2
 8000f24:	4652      	mov	r2, sl
 8000f26:	3908      	subs	r1, #8
 8000f28:	40da      	lsrs	r2, r3
 8000f2a:	408c      	lsls	r4, r1
 8000f2c:	4314      	orrs	r4, r2
 8000f2e:	4652      	mov	r2, sl
 8000f30:	408a      	lsls	r2, r1
 8000f32:	4b41      	ldr	r3, [pc, #260]	; (8001038 <__aeabi_ddiv+0x258>)
 8000f34:	4458      	add	r0, fp
 8000f36:	469b      	mov	fp, r3
 8000f38:	4483      	add	fp, r0
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	e78d      	b.n	8000e5a <__aeabi_ddiv+0x7a>
 8000f3e:	464b      	mov	r3, r9
 8000f40:	4323      	orrs	r3, r4
 8000f42:	4698      	mov	r8, r3
 8000f44:	d140      	bne.n	8000fc8 <__aeabi_ddiv+0x1e8>
 8000f46:	2308      	movs	r3, #8
 8000f48:	4699      	mov	r9, r3
 8000f4a:	3b06      	subs	r3, #6
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	4683      	mov	fp, r0
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	e769      	b.n	8000e28 <__aeabi_ddiv+0x48>
 8000f54:	46b2      	mov	sl, r6
 8000f56:	9b00      	ldr	r3, [sp, #0]
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d0a9      	beq.n	8000eb0 <__aeabi_ddiv+0xd0>
 8000f5c:	2b03      	cmp	r3, #3
 8000f5e:	d100      	bne.n	8000f62 <__aeabi_ddiv+0x182>
 8000f60:	e211      	b.n	8001386 <__aeabi_ddiv+0x5a6>
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d093      	beq.n	8000e8e <__aeabi_ddiv+0xae>
 8000f66:	4a35      	ldr	r2, [pc, #212]	; (800103c <__aeabi_ddiv+0x25c>)
 8000f68:	445a      	add	r2, fp
 8000f6a:	2a00      	cmp	r2, #0
 8000f6c:	dc00      	bgt.n	8000f70 <__aeabi_ddiv+0x190>
 8000f6e:	e13c      	b.n	80011ea <__aeabi_ddiv+0x40a>
 8000f70:	076b      	lsls	r3, r5, #29
 8000f72:	d000      	beq.n	8000f76 <__aeabi_ddiv+0x196>
 8000f74:	e1a7      	b.n	80012c6 <__aeabi_ddiv+0x4e6>
 8000f76:	08ed      	lsrs	r5, r5, #3
 8000f78:	4643      	mov	r3, r8
 8000f7a:	01db      	lsls	r3, r3, #7
 8000f7c:	d506      	bpl.n	8000f8c <__aeabi_ddiv+0x1ac>
 8000f7e:	4642      	mov	r2, r8
 8000f80:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <__aeabi_ddiv+0x260>)
 8000f82:	401a      	ands	r2, r3
 8000f84:	4690      	mov	r8, r2
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	00d2      	lsls	r2, r2, #3
 8000f8a:	445a      	add	r2, fp
 8000f8c:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <__aeabi_ddiv+0x264>)
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	dc8e      	bgt.n	8000eb0 <__aeabi_ddiv+0xd0>
 8000f92:	4643      	mov	r3, r8
 8000f94:	0552      	lsls	r2, r2, #21
 8000f96:	0758      	lsls	r0, r3, #29
 8000f98:	025c      	lsls	r4, r3, #9
 8000f9a:	4305      	orrs	r5, r0
 8000f9c:	0b24      	lsrs	r4, r4, #12
 8000f9e:	0d53      	lsrs	r3, r2, #21
 8000fa0:	e778      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8000fa2:	46ba      	mov	sl, r7
 8000fa4:	46a0      	mov	r8, r4
 8000fa6:	0015      	movs	r5, r2
 8000fa8:	9000      	str	r0, [sp, #0]
 8000faa:	e7d4      	b.n	8000f56 <__aeabi_ddiv+0x176>
 8000fac:	464a      	mov	r2, r9
 8000fae:	2303      	movs	r3, #3
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	4691      	mov	r9, r2
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	4652      	mov	r2, sl
 8000fb8:	e74f      	b.n	8000e5a <__aeabi_ddiv+0x7a>
 8000fba:	4649      	mov	r1, r9
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	4319      	orrs	r1, r3
 8000fc0:	4689      	mov	r9, r1
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	e748      	b.n	8000e5a <__aeabi_ddiv+0x7a>
 8000fc8:	230c      	movs	r3, #12
 8000fca:	4699      	mov	r9, r3
 8000fcc:	3b09      	subs	r3, #9
 8000fce:	46a0      	mov	r8, r4
 8000fd0:	4683      	mov	fp, r0
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	e728      	b.n	8000e28 <__aeabi_ddiv+0x48>
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	4699      	mov	r9, r3
 8000fda:	2300      	movs	r3, #0
 8000fdc:	469b      	mov	fp, r3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	2500      	movs	r5, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	e720      	b.n	8000e28 <__aeabi_ddiv+0x48>
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	2480      	movs	r4, #128	; 0x80
 8000fea:	469a      	mov	sl, r3
 8000fec:	2500      	movs	r5, #0
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <__aeabi_ddiv+0x244>)
 8000ff0:	0324      	lsls	r4, r4, #12
 8000ff2:	e74f      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	4641      	mov	r1, r8
 8000ff8:	031b      	lsls	r3, r3, #12
 8000ffa:	4219      	tst	r1, r3
 8000ffc:	d008      	beq.n	8001010 <__aeabi_ddiv+0x230>
 8000ffe:	421c      	tst	r4, r3
 8001000:	d106      	bne.n	8001010 <__aeabi_ddiv+0x230>
 8001002:	431c      	orrs	r4, r3
 8001004:	0324      	lsls	r4, r4, #12
 8001006:	46ba      	mov	sl, r7
 8001008:	0015      	movs	r5, r2
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <__aeabi_ddiv+0x244>)
 800100c:	0b24      	lsrs	r4, r4, #12
 800100e:	e741      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8001010:	2480      	movs	r4, #128	; 0x80
 8001012:	4643      	mov	r3, r8
 8001014:	0324      	lsls	r4, r4, #12
 8001016:	431c      	orrs	r4, r3
 8001018:	0324      	lsls	r4, r4, #12
 800101a:	46b2      	mov	sl, r6
 800101c:	4b01      	ldr	r3, [pc, #4]	; (8001024 <__aeabi_ddiv+0x244>)
 800101e:	0b24      	lsrs	r4, r4, #12
 8001020:	e738      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	000007ff 	.word	0x000007ff
 8001028:	fffffc01 	.word	0xfffffc01
 800102c:	0800b0bc 	.word	0x0800b0bc
 8001030:	fffff801 	.word	0xfffff801
 8001034:	fffffc0d 	.word	0xfffffc0d
 8001038:	000003f3 	.word	0x000003f3
 800103c:	000003ff 	.word	0x000003ff
 8001040:	feffffff 	.word	0xfeffffff
 8001044:	000007fe 	.word	0x000007fe
 8001048:	4544      	cmp	r4, r8
 800104a:	d200      	bcs.n	800104e <__aeabi_ddiv+0x26e>
 800104c:	e116      	b.n	800127c <__aeabi_ddiv+0x49c>
 800104e:	d100      	bne.n	8001052 <__aeabi_ddiv+0x272>
 8001050:	e111      	b.n	8001276 <__aeabi_ddiv+0x496>
 8001052:	2301      	movs	r3, #1
 8001054:	425b      	negs	r3, r3
 8001056:	469c      	mov	ip, r3
 8001058:	002e      	movs	r6, r5
 800105a:	4640      	mov	r0, r8
 800105c:	2500      	movs	r5, #0
 800105e:	44e3      	add	fp, ip
 8001060:	0223      	lsls	r3, r4, #8
 8001062:	0e14      	lsrs	r4, r2, #24
 8001064:	431c      	orrs	r4, r3
 8001066:	0c1b      	lsrs	r3, r3, #16
 8001068:	4699      	mov	r9, r3
 800106a:	0423      	lsls	r3, r4, #16
 800106c:	0c1f      	lsrs	r7, r3, #16
 800106e:	0212      	lsls	r2, r2, #8
 8001070:	4649      	mov	r1, r9
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	9701      	str	r7, [sp, #4]
 8001076:	f7ff f8e9 	bl	800024c <__aeabi_uidivmod>
 800107a:	0002      	movs	r2, r0
 800107c:	437a      	muls	r2, r7
 800107e:	040b      	lsls	r3, r1, #16
 8001080:	0c31      	lsrs	r1, r6, #16
 8001082:	4680      	mov	r8, r0
 8001084:	4319      	orrs	r1, r3
 8001086:	428a      	cmp	r2, r1
 8001088:	d90b      	bls.n	80010a2 <__aeabi_ddiv+0x2c2>
 800108a:	2301      	movs	r3, #1
 800108c:	425b      	negs	r3, r3
 800108e:	469c      	mov	ip, r3
 8001090:	1909      	adds	r1, r1, r4
 8001092:	44e0      	add	r8, ip
 8001094:	428c      	cmp	r4, r1
 8001096:	d804      	bhi.n	80010a2 <__aeabi_ddiv+0x2c2>
 8001098:	428a      	cmp	r2, r1
 800109a:	d902      	bls.n	80010a2 <__aeabi_ddiv+0x2c2>
 800109c:	1e83      	subs	r3, r0, #2
 800109e:	4698      	mov	r8, r3
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1a88      	subs	r0, r1, r2
 80010a4:	4649      	mov	r1, r9
 80010a6:	f7ff f8d1 	bl	800024c <__aeabi_uidivmod>
 80010aa:	0409      	lsls	r1, r1, #16
 80010ac:	468c      	mov	ip, r1
 80010ae:	0431      	lsls	r1, r6, #16
 80010b0:	4666      	mov	r6, ip
 80010b2:	9a01      	ldr	r2, [sp, #4]
 80010b4:	0c09      	lsrs	r1, r1, #16
 80010b6:	4342      	muls	r2, r0
 80010b8:	0003      	movs	r3, r0
 80010ba:	4331      	orrs	r1, r6
 80010bc:	428a      	cmp	r2, r1
 80010be:	d904      	bls.n	80010ca <__aeabi_ddiv+0x2ea>
 80010c0:	1909      	adds	r1, r1, r4
 80010c2:	3b01      	subs	r3, #1
 80010c4:	428c      	cmp	r4, r1
 80010c6:	d800      	bhi.n	80010ca <__aeabi_ddiv+0x2ea>
 80010c8:	e111      	b.n	80012ee <__aeabi_ddiv+0x50e>
 80010ca:	1a89      	subs	r1, r1, r2
 80010cc:	4642      	mov	r2, r8
 80010ce:	9e00      	ldr	r6, [sp, #0]
 80010d0:	0412      	lsls	r2, r2, #16
 80010d2:	431a      	orrs	r2, r3
 80010d4:	0c33      	lsrs	r3, r6, #16
 80010d6:	001f      	movs	r7, r3
 80010d8:	0c10      	lsrs	r0, r2, #16
 80010da:	4690      	mov	r8, r2
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	0413      	lsls	r3, r2, #16
 80010e0:	0432      	lsls	r2, r6, #16
 80010e2:	0c16      	lsrs	r6, r2, #16
 80010e4:	0032      	movs	r2, r6
 80010e6:	0c1b      	lsrs	r3, r3, #16
 80010e8:	435a      	muls	r2, r3
 80010ea:	9603      	str	r6, [sp, #12]
 80010ec:	437b      	muls	r3, r7
 80010ee:	4346      	muls	r6, r0
 80010f0:	4378      	muls	r0, r7
 80010f2:	0c17      	lsrs	r7, r2, #16
 80010f4:	46bc      	mov	ip, r7
 80010f6:	199b      	adds	r3, r3, r6
 80010f8:	4463      	add	r3, ip
 80010fa:	429e      	cmp	r6, r3
 80010fc:	d903      	bls.n	8001106 <__aeabi_ddiv+0x326>
 80010fe:	2680      	movs	r6, #128	; 0x80
 8001100:	0276      	lsls	r6, r6, #9
 8001102:	46b4      	mov	ip, r6
 8001104:	4460      	add	r0, ip
 8001106:	0c1e      	lsrs	r6, r3, #16
 8001108:	1830      	adds	r0, r6, r0
 800110a:	0416      	lsls	r6, r2, #16
 800110c:	041b      	lsls	r3, r3, #16
 800110e:	0c36      	lsrs	r6, r6, #16
 8001110:	199e      	adds	r6, r3, r6
 8001112:	4281      	cmp	r1, r0
 8001114:	d200      	bcs.n	8001118 <__aeabi_ddiv+0x338>
 8001116:	e09c      	b.n	8001252 <__aeabi_ddiv+0x472>
 8001118:	d100      	bne.n	800111c <__aeabi_ddiv+0x33c>
 800111a:	e097      	b.n	800124c <__aeabi_ddiv+0x46c>
 800111c:	1bae      	subs	r6, r5, r6
 800111e:	1a09      	subs	r1, r1, r0
 8001120:	42b5      	cmp	r5, r6
 8001122:	4180      	sbcs	r0, r0
 8001124:	4240      	negs	r0, r0
 8001126:	1a08      	subs	r0, r1, r0
 8001128:	4284      	cmp	r4, r0
 800112a:	d100      	bne.n	800112e <__aeabi_ddiv+0x34e>
 800112c:	e111      	b.n	8001352 <__aeabi_ddiv+0x572>
 800112e:	4649      	mov	r1, r9
 8001130:	f7ff f88c 	bl	800024c <__aeabi_uidivmod>
 8001134:	9a01      	ldr	r2, [sp, #4]
 8001136:	040b      	lsls	r3, r1, #16
 8001138:	4342      	muls	r2, r0
 800113a:	0c31      	lsrs	r1, r6, #16
 800113c:	0005      	movs	r5, r0
 800113e:	4319      	orrs	r1, r3
 8001140:	428a      	cmp	r2, r1
 8001142:	d907      	bls.n	8001154 <__aeabi_ddiv+0x374>
 8001144:	1909      	adds	r1, r1, r4
 8001146:	3d01      	subs	r5, #1
 8001148:	428c      	cmp	r4, r1
 800114a:	d803      	bhi.n	8001154 <__aeabi_ddiv+0x374>
 800114c:	428a      	cmp	r2, r1
 800114e:	d901      	bls.n	8001154 <__aeabi_ddiv+0x374>
 8001150:	1e85      	subs	r5, r0, #2
 8001152:	1909      	adds	r1, r1, r4
 8001154:	1a88      	subs	r0, r1, r2
 8001156:	4649      	mov	r1, r9
 8001158:	f7ff f878 	bl	800024c <__aeabi_uidivmod>
 800115c:	0409      	lsls	r1, r1, #16
 800115e:	468c      	mov	ip, r1
 8001160:	0431      	lsls	r1, r6, #16
 8001162:	4666      	mov	r6, ip
 8001164:	9a01      	ldr	r2, [sp, #4]
 8001166:	0c09      	lsrs	r1, r1, #16
 8001168:	4342      	muls	r2, r0
 800116a:	0003      	movs	r3, r0
 800116c:	4331      	orrs	r1, r6
 800116e:	428a      	cmp	r2, r1
 8001170:	d907      	bls.n	8001182 <__aeabi_ddiv+0x3a2>
 8001172:	1909      	adds	r1, r1, r4
 8001174:	3b01      	subs	r3, #1
 8001176:	428c      	cmp	r4, r1
 8001178:	d803      	bhi.n	8001182 <__aeabi_ddiv+0x3a2>
 800117a:	428a      	cmp	r2, r1
 800117c:	d901      	bls.n	8001182 <__aeabi_ddiv+0x3a2>
 800117e:	1e83      	subs	r3, r0, #2
 8001180:	1909      	adds	r1, r1, r4
 8001182:	9e03      	ldr	r6, [sp, #12]
 8001184:	1a89      	subs	r1, r1, r2
 8001186:	0032      	movs	r2, r6
 8001188:	042d      	lsls	r5, r5, #16
 800118a:	431d      	orrs	r5, r3
 800118c:	9f02      	ldr	r7, [sp, #8]
 800118e:	042b      	lsls	r3, r5, #16
 8001190:	0c1b      	lsrs	r3, r3, #16
 8001192:	435a      	muls	r2, r3
 8001194:	437b      	muls	r3, r7
 8001196:	469c      	mov	ip, r3
 8001198:	0c28      	lsrs	r0, r5, #16
 800119a:	4346      	muls	r6, r0
 800119c:	0c13      	lsrs	r3, r2, #16
 800119e:	44b4      	add	ip, r6
 80011a0:	4463      	add	r3, ip
 80011a2:	4378      	muls	r0, r7
 80011a4:	429e      	cmp	r6, r3
 80011a6:	d903      	bls.n	80011b0 <__aeabi_ddiv+0x3d0>
 80011a8:	2680      	movs	r6, #128	; 0x80
 80011aa:	0276      	lsls	r6, r6, #9
 80011ac:	46b4      	mov	ip, r6
 80011ae:	4460      	add	r0, ip
 80011b0:	0c1e      	lsrs	r6, r3, #16
 80011b2:	0412      	lsls	r2, r2, #16
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	0c12      	lsrs	r2, r2, #16
 80011b8:	1830      	adds	r0, r6, r0
 80011ba:	189b      	adds	r3, r3, r2
 80011bc:	4281      	cmp	r1, r0
 80011be:	d306      	bcc.n	80011ce <__aeabi_ddiv+0x3ee>
 80011c0:	d002      	beq.n	80011c8 <__aeabi_ddiv+0x3e8>
 80011c2:	2301      	movs	r3, #1
 80011c4:	431d      	orrs	r5, r3
 80011c6:	e6ce      	b.n	8000f66 <__aeabi_ddiv+0x186>
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x3ee>
 80011cc:	e6cb      	b.n	8000f66 <__aeabi_ddiv+0x186>
 80011ce:	1861      	adds	r1, r4, r1
 80011d0:	1e6e      	subs	r6, r5, #1
 80011d2:	42a1      	cmp	r1, r4
 80011d4:	d200      	bcs.n	80011d8 <__aeabi_ddiv+0x3f8>
 80011d6:	e0a4      	b.n	8001322 <__aeabi_ddiv+0x542>
 80011d8:	4281      	cmp	r1, r0
 80011da:	d200      	bcs.n	80011de <__aeabi_ddiv+0x3fe>
 80011dc:	e0c9      	b.n	8001372 <__aeabi_ddiv+0x592>
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x402>
 80011e0:	e0d9      	b.n	8001396 <__aeabi_ddiv+0x5b6>
 80011e2:	0035      	movs	r5, r6
 80011e4:	e7ed      	b.n	80011c2 <__aeabi_ddiv+0x3e2>
 80011e6:	2501      	movs	r5, #1
 80011e8:	426d      	negs	r5, r5
 80011ea:	2101      	movs	r1, #1
 80011ec:	1a89      	subs	r1, r1, r2
 80011ee:	2938      	cmp	r1, #56	; 0x38
 80011f0:	dd00      	ble.n	80011f4 <__aeabi_ddiv+0x414>
 80011f2:	e64c      	b.n	8000e8e <__aeabi_ddiv+0xae>
 80011f4:	291f      	cmp	r1, #31
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_ddiv+0x41a>
 80011f8:	e07f      	b.n	80012fa <__aeabi_ddiv+0x51a>
 80011fa:	231f      	movs	r3, #31
 80011fc:	425b      	negs	r3, r3
 80011fe:	1a9a      	subs	r2, r3, r2
 8001200:	4643      	mov	r3, r8
 8001202:	40d3      	lsrs	r3, r2
 8001204:	2920      	cmp	r1, #32
 8001206:	d004      	beq.n	8001212 <__aeabi_ddiv+0x432>
 8001208:	4644      	mov	r4, r8
 800120a:	4a65      	ldr	r2, [pc, #404]	; (80013a0 <__aeabi_ddiv+0x5c0>)
 800120c:	445a      	add	r2, fp
 800120e:	4094      	lsls	r4, r2
 8001210:	4325      	orrs	r5, r4
 8001212:	1e6a      	subs	r2, r5, #1
 8001214:	4195      	sbcs	r5, r2
 8001216:	2207      	movs	r2, #7
 8001218:	432b      	orrs	r3, r5
 800121a:	0015      	movs	r5, r2
 800121c:	2400      	movs	r4, #0
 800121e:	401d      	ands	r5, r3
 8001220:	421a      	tst	r2, r3
 8001222:	d100      	bne.n	8001226 <__aeabi_ddiv+0x446>
 8001224:	e0a1      	b.n	800136a <__aeabi_ddiv+0x58a>
 8001226:	220f      	movs	r2, #15
 8001228:	2400      	movs	r4, #0
 800122a:	401a      	ands	r2, r3
 800122c:	2a04      	cmp	r2, #4
 800122e:	d100      	bne.n	8001232 <__aeabi_ddiv+0x452>
 8001230:	e098      	b.n	8001364 <__aeabi_ddiv+0x584>
 8001232:	1d1a      	adds	r2, r3, #4
 8001234:	429a      	cmp	r2, r3
 8001236:	419b      	sbcs	r3, r3
 8001238:	425b      	negs	r3, r3
 800123a:	18e4      	adds	r4, r4, r3
 800123c:	0013      	movs	r3, r2
 800123e:	0222      	lsls	r2, r4, #8
 8001240:	d400      	bmi.n	8001244 <__aeabi_ddiv+0x464>
 8001242:	e08f      	b.n	8001364 <__aeabi_ddiv+0x584>
 8001244:	2301      	movs	r3, #1
 8001246:	2400      	movs	r4, #0
 8001248:	2500      	movs	r5, #0
 800124a:	e623      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 800124c:	42b5      	cmp	r5, r6
 800124e:	d300      	bcc.n	8001252 <__aeabi_ddiv+0x472>
 8001250:	e764      	b.n	800111c <__aeabi_ddiv+0x33c>
 8001252:	4643      	mov	r3, r8
 8001254:	1e5a      	subs	r2, r3, #1
 8001256:	9b00      	ldr	r3, [sp, #0]
 8001258:	469c      	mov	ip, r3
 800125a:	4465      	add	r5, ip
 800125c:	001f      	movs	r7, r3
 800125e:	429d      	cmp	r5, r3
 8001260:	419b      	sbcs	r3, r3
 8001262:	425b      	negs	r3, r3
 8001264:	191b      	adds	r3, r3, r4
 8001266:	18c9      	adds	r1, r1, r3
 8001268:	428c      	cmp	r4, r1
 800126a:	d23a      	bcs.n	80012e2 <__aeabi_ddiv+0x502>
 800126c:	4288      	cmp	r0, r1
 800126e:	d863      	bhi.n	8001338 <__aeabi_ddiv+0x558>
 8001270:	d060      	beq.n	8001334 <__aeabi_ddiv+0x554>
 8001272:	4690      	mov	r8, r2
 8001274:	e752      	b.n	800111c <__aeabi_ddiv+0x33c>
 8001276:	42aa      	cmp	r2, r5
 8001278:	d900      	bls.n	800127c <__aeabi_ddiv+0x49c>
 800127a:	e6ea      	b.n	8001052 <__aeabi_ddiv+0x272>
 800127c:	4643      	mov	r3, r8
 800127e:	07de      	lsls	r6, r3, #31
 8001280:	0858      	lsrs	r0, r3, #1
 8001282:	086b      	lsrs	r3, r5, #1
 8001284:	431e      	orrs	r6, r3
 8001286:	07ed      	lsls	r5, r5, #31
 8001288:	e6ea      	b.n	8001060 <__aeabi_ddiv+0x280>
 800128a:	4648      	mov	r0, r9
 800128c:	f001 f926 	bl	80024dc <__clzsi2>
 8001290:	0001      	movs	r1, r0
 8001292:	0002      	movs	r2, r0
 8001294:	3115      	adds	r1, #21
 8001296:	3220      	adds	r2, #32
 8001298:	291c      	cmp	r1, #28
 800129a:	dc00      	bgt.n	800129e <__aeabi_ddiv+0x4be>
 800129c:	e61a      	b.n	8000ed4 <__aeabi_ddiv+0xf4>
 800129e:	464b      	mov	r3, r9
 80012a0:	3808      	subs	r0, #8
 80012a2:	4083      	lsls	r3, r0
 80012a4:	2500      	movs	r5, #0
 80012a6:	4698      	mov	r8, r3
 80012a8:	e620      	b.n	8000eec <__aeabi_ddiv+0x10c>
 80012aa:	f001 f917 	bl	80024dc <__clzsi2>
 80012ae:	0003      	movs	r3, r0
 80012b0:	001a      	movs	r2, r3
 80012b2:	3215      	adds	r2, #21
 80012b4:	3020      	adds	r0, #32
 80012b6:	2a1c      	cmp	r2, #28
 80012b8:	dc00      	bgt.n	80012bc <__aeabi_ddiv+0x4dc>
 80012ba:	e630      	b.n	8000f1e <__aeabi_ddiv+0x13e>
 80012bc:	4654      	mov	r4, sl
 80012be:	3b08      	subs	r3, #8
 80012c0:	2200      	movs	r2, #0
 80012c2:	409c      	lsls	r4, r3
 80012c4:	e635      	b.n	8000f32 <__aeabi_ddiv+0x152>
 80012c6:	230f      	movs	r3, #15
 80012c8:	402b      	ands	r3, r5
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	d100      	bne.n	80012d0 <__aeabi_ddiv+0x4f0>
 80012ce:	e652      	b.n	8000f76 <__aeabi_ddiv+0x196>
 80012d0:	2305      	movs	r3, #5
 80012d2:	425b      	negs	r3, r3
 80012d4:	42ab      	cmp	r3, r5
 80012d6:	419b      	sbcs	r3, r3
 80012d8:	3504      	adds	r5, #4
 80012da:	425b      	negs	r3, r3
 80012dc:	08ed      	lsrs	r5, r5, #3
 80012de:	4498      	add	r8, r3
 80012e0:	e64a      	b.n	8000f78 <__aeabi_ddiv+0x198>
 80012e2:	428c      	cmp	r4, r1
 80012e4:	d1c5      	bne.n	8001272 <__aeabi_ddiv+0x492>
 80012e6:	42af      	cmp	r7, r5
 80012e8:	d9c0      	bls.n	800126c <__aeabi_ddiv+0x48c>
 80012ea:	4690      	mov	r8, r2
 80012ec:	e716      	b.n	800111c <__aeabi_ddiv+0x33c>
 80012ee:	428a      	cmp	r2, r1
 80012f0:	d800      	bhi.n	80012f4 <__aeabi_ddiv+0x514>
 80012f2:	e6ea      	b.n	80010ca <__aeabi_ddiv+0x2ea>
 80012f4:	1e83      	subs	r3, r0, #2
 80012f6:	1909      	adds	r1, r1, r4
 80012f8:	e6e7      	b.n	80010ca <__aeabi_ddiv+0x2ea>
 80012fa:	4a2a      	ldr	r2, [pc, #168]	; (80013a4 <__aeabi_ddiv+0x5c4>)
 80012fc:	0028      	movs	r0, r5
 80012fe:	445a      	add	r2, fp
 8001300:	4643      	mov	r3, r8
 8001302:	4095      	lsls	r5, r2
 8001304:	4093      	lsls	r3, r2
 8001306:	40c8      	lsrs	r0, r1
 8001308:	1e6a      	subs	r2, r5, #1
 800130a:	4195      	sbcs	r5, r2
 800130c:	4644      	mov	r4, r8
 800130e:	4303      	orrs	r3, r0
 8001310:	432b      	orrs	r3, r5
 8001312:	40cc      	lsrs	r4, r1
 8001314:	075a      	lsls	r2, r3, #29
 8001316:	d092      	beq.n	800123e <__aeabi_ddiv+0x45e>
 8001318:	220f      	movs	r2, #15
 800131a:	401a      	ands	r2, r3
 800131c:	2a04      	cmp	r2, #4
 800131e:	d188      	bne.n	8001232 <__aeabi_ddiv+0x452>
 8001320:	e78d      	b.n	800123e <__aeabi_ddiv+0x45e>
 8001322:	0035      	movs	r5, r6
 8001324:	4281      	cmp	r1, r0
 8001326:	d000      	beq.n	800132a <__aeabi_ddiv+0x54a>
 8001328:	e74b      	b.n	80011c2 <__aeabi_ddiv+0x3e2>
 800132a:	9a00      	ldr	r2, [sp, #0]
 800132c:	4293      	cmp	r3, r2
 800132e:	d000      	beq.n	8001332 <__aeabi_ddiv+0x552>
 8001330:	e747      	b.n	80011c2 <__aeabi_ddiv+0x3e2>
 8001332:	e618      	b.n	8000f66 <__aeabi_ddiv+0x186>
 8001334:	42ae      	cmp	r6, r5
 8001336:	d99c      	bls.n	8001272 <__aeabi_ddiv+0x492>
 8001338:	2302      	movs	r3, #2
 800133a:	425b      	negs	r3, r3
 800133c:	469c      	mov	ip, r3
 800133e:	9b00      	ldr	r3, [sp, #0]
 8001340:	44e0      	add	r8, ip
 8001342:	469c      	mov	ip, r3
 8001344:	4465      	add	r5, ip
 8001346:	429d      	cmp	r5, r3
 8001348:	419b      	sbcs	r3, r3
 800134a:	425b      	negs	r3, r3
 800134c:	191b      	adds	r3, r3, r4
 800134e:	18c9      	adds	r1, r1, r3
 8001350:	e6e4      	b.n	800111c <__aeabi_ddiv+0x33c>
 8001352:	4a15      	ldr	r2, [pc, #84]	; (80013a8 <__aeabi_ddiv+0x5c8>)
 8001354:	445a      	add	r2, fp
 8001356:	2a00      	cmp	r2, #0
 8001358:	dc00      	bgt.n	800135c <__aeabi_ddiv+0x57c>
 800135a:	e744      	b.n	80011e6 <__aeabi_ddiv+0x406>
 800135c:	2301      	movs	r3, #1
 800135e:	2500      	movs	r5, #0
 8001360:	4498      	add	r8, r3
 8001362:	e609      	b.n	8000f78 <__aeabi_ddiv+0x198>
 8001364:	0765      	lsls	r5, r4, #29
 8001366:	0264      	lsls	r4, r4, #9
 8001368:	0b24      	lsrs	r4, r4, #12
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	431d      	orrs	r5, r3
 800136e:	2300      	movs	r3, #0
 8001370:	e590      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8001372:	9e00      	ldr	r6, [sp, #0]
 8001374:	3d02      	subs	r5, #2
 8001376:	0072      	lsls	r2, r6, #1
 8001378:	42b2      	cmp	r2, r6
 800137a:	41bf      	sbcs	r7, r7
 800137c:	427f      	negs	r7, r7
 800137e:	193c      	adds	r4, r7, r4
 8001380:	1909      	adds	r1, r1, r4
 8001382:	9200      	str	r2, [sp, #0]
 8001384:	e7ce      	b.n	8001324 <__aeabi_ddiv+0x544>
 8001386:	2480      	movs	r4, #128	; 0x80
 8001388:	4643      	mov	r3, r8
 800138a:	0324      	lsls	r4, r4, #12
 800138c:	431c      	orrs	r4, r3
 800138e:	0324      	lsls	r4, r4, #12
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <__aeabi_ddiv+0x5cc>)
 8001392:	0b24      	lsrs	r4, r4, #12
 8001394:	e57e      	b.n	8000e94 <__aeabi_ddiv+0xb4>
 8001396:	9a00      	ldr	r2, [sp, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d3ea      	bcc.n	8001372 <__aeabi_ddiv+0x592>
 800139c:	0035      	movs	r5, r6
 800139e:	e7c4      	b.n	800132a <__aeabi_ddiv+0x54a>
 80013a0:	0000043e 	.word	0x0000043e
 80013a4:	0000041e 	.word	0x0000041e
 80013a8:	000003ff 	.word	0x000003ff
 80013ac:	000007ff 	.word	0x000007ff

080013b0 <__eqdf2>:
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b2:	464f      	mov	r7, r9
 80013b4:	4646      	mov	r6, r8
 80013b6:	46d6      	mov	lr, sl
 80013b8:	4694      	mov	ip, r2
 80013ba:	4691      	mov	r9, r2
 80013bc:	031a      	lsls	r2, r3, #12
 80013be:	0b12      	lsrs	r2, r2, #12
 80013c0:	4d18      	ldr	r5, [pc, #96]	; (8001424 <__eqdf2+0x74>)
 80013c2:	b5c0      	push	{r6, r7, lr}
 80013c4:	004c      	lsls	r4, r1, #1
 80013c6:	030f      	lsls	r7, r1, #12
 80013c8:	4692      	mov	sl, r2
 80013ca:	005a      	lsls	r2, r3, #1
 80013cc:	0006      	movs	r6, r0
 80013ce:	4680      	mov	r8, r0
 80013d0:	0b3f      	lsrs	r7, r7, #12
 80013d2:	2001      	movs	r0, #1
 80013d4:	0d64      	lsrs	r4, r4, #21
 80013d6:	0fc9      	lsrs	r1, r1, #31
 80013d8:	0d52      	lsrs	r2, r2, #21
 80013da:	0fdb      	lsrs	r3, r3, #31
 80013dc:	42ac      	cmp	r4, r5
 80013de:	d00a      	beq.n	80013f6 <__eqdf2+0x46>
 80013e0:	42aa      	cmp	r2, r5
 80013e2:	d003      	beq.n	80013ec <__eqdf2+0x3c>
 80013e4:	4294      	cmp	r4, r2
 80013e6:	d101      	bne.n	80013ec <__eqdf2+0x3c>
 80013e8:	4557      	cmp	r7, sl
 80013ea:	d00d      	beq.n	8001408 <__eqdf2+0x58>
 80013ec:	bce0      	pop	{r5, r6, r7}
 80013ee:	46ba      	mov	sl, r7
 80013f0:	46b1      	mov	r9, r6
 80013f2:	46a8      	mov	r8, r5
 80013f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f6:	003d      	movs	r5, r7
 80013f8:	4335      	orrs	r5, r6
 80013fa:	d1f7      	bne.n	80013ec <__eqdf2+0x3c>
 80013fc:	42a2      	cmp	r2, r4
 80013fe:	d1f5      	bne.n	80013ec <__eqdf2+0x3c>
 8001400:	4652      	mov	r2, sl
 8001402:	4665      	mov	r5, ip
 8001404:	432a      	orrs	r2, r5
 8001406:	d1f1      	bne.n	80013ec <__eqdf2+0x3c>
 8001408:	2001      	movs	r0, #1
 800140a:	45c8      	cmp	r8, r9
 800140c:	d1ee      	bne.n	80013ec <__eqdf2+0x3c>
 800140e:	4299      	cmp	r1, r3
 8001410:	d006      	beq.n	8001420 <__eqdf2+0x70>
 8001412:	2c00      	cmp	r4, #0
 8001414:	d1ea      	bne.n	80013ec <__eqdf2+0x3c>
 8001416:	433e      	orrs	r6, r7
 8001418:	0030      	movs	r0, r6
 800141a:	1e46      	subs	r6, r0, #1
 800141c:	41b0      	sbcs	r0, r6
 800141e:	e7e5      	b.n	80013ec <__eqdf2+0x3c>
 8001420:	2000      	movs	r0, #0
 8001422:	e7e3      	b.n	80013ec <__eqdf2+0x3c>
 8001424:	000007ff 	.word	0x000007ff

08001428 <__gedf2>:
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	464e      	mov	r6, r9
 800142c:	4645      	mov	r5, r8
 800142e:	4657      	mov	r7, sl
 8001430:	46de      	mov	lr, fp
 8001432:	0004      	movs	r4, r0
 8001434:	0018      	movs	r0, r3
 8001436:	b5e0      	push	{r5, r6, r7, lr}
 8001438:	0016      	movs	r6, r2
 800143a:	031b      	lsls	r3, r3, #12
 800143c:	0b1b      	lsrs	r3, r3, #12
 800143e:	4d32      	ldr	r5, [pc, #200]	; (8001508 <__gedf2+0xe0>)
 8001440:	030f      	lsls	r7, r1, #12
 8001442:	004a      	lsls	r2, r1, #1
 8001444:	4699      	mov	r9, r3
 8001446:	0043      	lsls	r3, r0, #1
 8001448:	46a4      	mov	ip, r4
 800144a:	46b0      	mov	r8, r6
 800144c:	0b3f      	lsrs	r7, r7, #12
 800144e:	0d52      	lsrs	r2, r2, #21
 8001450:	0fc9      	lsrs	r1, r1, #31
 8001452:	0d5b      	lsrs	r3, r3, #21
 8001454:	0fc0      	lsrs	r0, r0, #31
 8001456:	42aa      	cmp	r2, r5
 8001458:	d029      	beq.n	80014ae <__gedf2+0x86>
 800145a:	42ab      	cmp	r3, r5
 800145c:	d018      	beq.n	8001490 <__gedf2+0x68>
 800145e:	2a00      	cmp	r2, #0
 8001460:	d12a      	bne.n	80014b8 <__gedf2+0x90>
 8001462:	433c      	orrs	r4, r7
 8001464:	46a3      	mov	fp, r4
 8001466:	4265      	negs	r5, r4
 8001468:	4165      	adcs	r5, r4
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <__gedf2+0x4c>
 800146e:	464c      	mov	r4, r9
 8001470:	4326      	orrs	r6, r4
 8001472:	d027      	beq.n	80014c4 <__gedf2+0x9c>
 8001474:	2d00      	cmp	r5, #0
 8001476:	d115      	bne.n	80014a4 <__gedf2+0x7c>
 8001478:	4281      	cmp	r1, r0
 800147a:	d028      	beq.n	80014ce <__gedf2+0xa6>
 800147c:	2002      	movs	r0, #2
 800147e:	3901      	subs	r1, #1
 8001480:	4008      	ands	r0, r1
 8001482:	3801      	subs	r0, #1
 8001484:	bcf0      	pop	{r4, r5, r6, r7}
 8001486:	46bb      	mov	fp, r7
 8001488:	46b2      	mov	sl, r6
 800148a:	46a9      	mov	r9, r5
 800148c:	46a0      	mov	r8, r4
 800148e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001490:	464d      	mov	r5, r9
 8001492:	432e      	orrs	r6, r5
 8001494:	d12f      	bne.n	80014f6 <__gedf2+0xce>
 8001496:	2a00      	cmp	r2, #0
 8001498:	d1ee      	bne.n	8001478 <__gedf2+0x50>
 800149a:	433c      	orrs	r4, r7
 800149c:	4265      	negs	r5, r4
 800149e:	4165      	adcs	r5, r4
 80014a0:	2d00      	cmp	r5, #0
 80014a2:	d0e9      	beq.n	8001478 <__gedf2+0x50>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d1ed      	bne.n	8001484 <__gedf2+0x5c>
 80014a8:	2001      	movs	r0, #1
 80014aa:	4240      	negs	r0, r0
 80014ac:	e7ea      	b.n	8001484 <__gedf2+0x5c>
 80014ae:	003d      	movs	r5, r7
 80014b0:	4325      	orrs	r5, r4
 80014b2:	d120      	bne.n	80014f6 <__gedf2+0xce>
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d0eb      	beq.n	8001490 <__gedf2+0x68>
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1dd      	bne.n	8001478 <__gedf2+0x50>
 80014bc:	464c      	mov	r4, r9
 80014be:	4326      	orrs	r6, r4
 80014c0:	d1da      	bne.n	8001478 <__gedf2+0x50>
 80014c2:	e7db      	b.n	800147c <__gedf2+0x54>
 80014c4:	465b      	mov	r3, fp
 80014c6:	2000      	movs	r0, #0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d0db      	beq.n	8001484 <__gedf2+0x5c>
 80014cc:	e7d6      	b.n	800147c <__gedf2+0x54>
 80014ce:	429a      	cmp	r2, r3
 80014d0:	dc0a      	bgt.n	80014e8 <__gedf2+0xc0>
 80014d2:	dbe7      	blt.n	80014a4 <__gedf2+0x7c>
 80014d4:	454f      	cmp	r7, r9
 80014d6:	d8d1      	bhi.n	800147c <__gedf2+0x54>
 80014d8:	d010      	beq.n	80014fc <__gedf2+0xd4>
 80014da:	2000      	movs	r0, #0
 80014dc:	454f      	cmp	r7, r9
 80014de:	d2d1      	bcs.n	8001484 <__gedf2+0x5c>
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d0e1      	beq.n	80014a8 <__gedf2+0x80>
 80014e4:	0008      	movs	r0, r1
 80014e6:	e7cd      	b.n	8001484 <__gedf2+0x5c>
 80014e8:	4243      	negs	r3, r0
 80014ea:	4158      	adcs	r0, r3
 80014ec:	2302      	movs	r3, #2
 80014ee:	4240      	negs	r0, r0
 80014f0:	4018      	ands	r0, r3
 80014f2:	3801      	subs	r0, #1
 80014f4:	e7c6      	b.n	8001484 <__gedf2+0x5c>
 80014f6:	2002      	movs	r0, #2
 80014f8:	4240      	negs	r0, r0
 80014fa:	e7c3      	b.n	8001484 <__gedf2+0x5c>
 80014fc:	45c4      	cmp	ip, r8
 80014fe:	d8bd      	bhi.n	800147c <__gedf2+0x54>
 8001500:	2000      	movs	r0, #0
 8001502:	45c4      	cmp	ip, r8
 8001504:	d2be      	bcs.n	8001484 <__gedf2+0x5c>
 8001506:	e7eb      	b.n	80014e0 <__gedf2+0xb8>
 8001508:	000007ff 	.word	0x000007ff

0800150c <__ledf2>:
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	464e      	mov	r6, r9
 8001510:	4645      	mov	r5, r8
 8001512:	4657      	mov	r7, sl
 8001514:	46de      	mov	lr, fp
 8001516:	0004      	movs	r4, r0
 8001518:	0018      	movs	r0, r3
 800151a:	b5e0      	push	{r5, r6, r7, lr}
 800151c:	0016      	movs	r6, r2
 800151e:	031b      	lsls	r3, r3, #12
 8001520:	0b1b      	lsrs	r3, r3, #12
 8001522:	4d31      	ldr	r5, [pc, #196]	; (80015e8 <__ledf2+0xdc>)
 8001524:	030f      	lsls	r7, r1, #12
 8001526:	004a      	lsls	r2, r1, #1
 8001528:	4699      	mov	r9, r3
 800152a:	0043      	lsls	r3, r0, #1
 800152c:	46a4      	mov	ip, r4
 800152e:	46b0      	mov	r8, r6
 8001530:	0b3f      	lsrs	r7, r7, #12
 8001532:	0d52      	lsrs	r2, r2, #21
 8001534:	0fc9      	lsrs	r1, r1, #31
 8001536:	0d5b      	lsrs	r3, r3, #21
 8001538:	0fc0      	lsrs	r0, r0, #31
 800153a:	42aa      	cmp	r2, r5
 800153c:	d011      	beq.n	8001562 <__ledf2+0x56>
 800153e:	42ab      	cmp	r3, r5
 8001540:	d014      	beq.n	800156c <__ledf2+0x60>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d12f      	bne.n	80015a6 <__ledf2+0x9a>
 8001546:	433c      	orrs	r4, r7
 8001548:	46a3      	mov	fp, r4
 800154a:	4265      	negs	r5, r4
 800154c:	4165      	adcs	r5, r4
 800154e:	2b00      	cmp	r3, #0
 8001550:	d114      	bne.n	800157c <__ledf2+0x70>
 8001552:	464c      	mov	r4, r9
 8001554:	4326      	orrs	r6, r4
 8001556:	d111      	bne.n	800157c <__ledf2+0x70>
 8001558:	465b      	mov	r3, fp
 800155a:	2000      	movs	r0, #0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d017      	beq.n	8001590 <__ledf2+0x84>
 8001560:	e010      	b.n	8001584 <__ledf2+0x78>
 8001562:	003d      	movs	r5, r7
 8001564:	4325      	orrs	r5, r4
 8001566:	d112      	bne.n	800158e <__ledf2+0x82>
 8001568:	4293      	cmp	r3, r2
 800156a:	d11c      	bne.n	80015a6 <__ledf2+0x9a>
 800156c:	464d      	mov	r5, r9
 800156e:	432e      	orrs	r6, r5
 8001570:	d10d      	bne.n	800158e <__ledf2+0x82>
 8001572:	2a00      	cmp	r2, #0
 8001574:	d104      	bne.n	8001580 <__ledf2+0x74>
 8001576:	433c      	orrs	r4, r7
 8001578:	4265      	negs	r5, r4
 800157a:	4165      	adcs	r5, r4
 800157c:	2d00      	cmp	r5, #0
 800157e:	d10d      	bne.n	800159c <__ledf2+0x90>
 8001580:	4281      	cmp	r1, r0
 8001582:	d016      	beq.n	80015b2 <__ledf2+0xa6>
 8001584:	2002      	movs	r0, #2
 8001586:	3901      	subs	r1, #1
 8001588:	4008      	ands	r0, r1
 800158a:	3801      	subs	r0, #1
 800158c:	e000      	b.n	8001590 <__ledf2+0x84>
 800158e:	2002      	movs	r0, #2
 8001590:	bcf0      	pop	{r4, r5, r6, r7}
 8001592:	46bb      	mov	fp, r7
 8001594:	46b2      	mov	sl, r6
 8001596:	46a9      	mov	r9, r5
 8001598:	46a0      	mov	r8, r4
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800159c:	2800      	cmp	r0, #0
 800159e:	d1f7      	bne.n	8001590 <__ledf2+0x84>
 80015a0:	2001      	movs	r0, #1
 80015a2:	4240      	negs	r0, r0
 80015a4:	e7f4      	b.n	8001590 <__ledf2+0x84>
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1ea      	bne.n	8001580 <__ledf2+0x74>
 80015aa:	464c      	mov	r4, r9
 80015ac:	4326      	orrs	r6, r4
 80015ae:	d1e7      	bne.n	8001580 <__ledf2+0x74>
 80015b0:	e7e8      	b.n	8001584 <__ledf2+0x78>
 80015b2:	429a      	cmp	r2, r3
 80015b4:	dd06      	ble.n	80015c4 <__ledf2+0xb8>
 80015b6:	4243      	negs	r3, r0
 80015b8:	4158      	adcs	r0, r3
 80015ba:	2302      	movs	r3, #2
 80015bc:	4240      	negs	r0, r0
 80015be:	4018      	ands	r0, r3
 80015c0:	3801      	subs	r0, #1
 80015c2:	e7e5      	b.n	8001590 <__ledf2+0x84>
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbe9      	blt.n	800159c <__ledf2+0x90>
 80015c8:	454f      	cmp	r7, r9
 80015ca:	d8db      	bhi.n	8001584 <__ledf2+0x78>
 80015cc:	d006      	beq.n	80015dc <__ledf2+0xd0>
 80015ce:	2000      	movs	r0, #0
 80015d0:	454f      	cmp	r7, r9
 80015d2:	d2dd      	bcs.n	8001590 <__ledf2+0x84>
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d0e3      	beq.n	80015a0 <__ledf2+0x94>
 80015d8:	0008      	movs	r0, r1
 80015da:	e7d9      	b.n	8001590 <__ledf2+0x84>
 80015dc:	45c4      	cmp	ip, r8
 80015de:	d8d1      	bhi.n	8001584 <__ledf2+0x78>
 80015e0:	2000      	movs	r0, #0
 80015e2:	45c4      	cmp	ip, r8
 80015e4:	d2d4      	bcs.n	8001590 <__ledf2+0x84>
 80015e6:	e7f5      	b.n	80015d4 <__ledf2+0xc8>
 80015e8:	000007ff 	.word	0x000007ff

080015ec <__aeabi_dmul>:
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	4657      	mov	r7, sl
 80015f0:	464e      	mov	r6, r9
 80015f2:	4645      	mov	r5, r8
 80015f4:	46de      	mov	lr, fp
 80015f6:	b5e0      	push	{r5, r6, r7, lr}
 80015f8:	4698      	mov	r8, r3
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004b      	lsls	r3, r1, #1
 80015fe:	0006      	movs	r6, r0
 8001600:	4692      	mov	sl, r2
 8001602:	b087      	sub	sp, #28
 8001604:	0b24      	lsrs	r4, r4, #12
 8001606:	0d5b      	lsrs	r3, r3, #21
 8001608:	0fcf      	lsrs	r7, r1, #31
 800160a:	2b00      	cmp	r3, #0
 800160c:	d06c      	beq.n	80016e8 <__aeabi_dmul+0xfc>
 800160e:	4add      	ldr	r2, [pc, #884]	; (8001984 <__aeabi_dmul+0x398>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d100      	bne.n	8001616 <__aeabi_dmul+0x2a>
 8001614:	e086      	b.n	8001724 <__aeabi_dmul+0x138>
 8001616:	0f42      	lsrs	r2, r0, #29
 8001618:	00e4      	lsls	r4, r4, #3
 800161a:	4314      	orrs	r4, r2
 800161c:	2280      	movs	r2, #128	; 0x80
 800161e:	0412      	lsls	r2, r2, #16
 8001620:	4314      	orrs	r4, r2
 8001622:	4ad9      	ldr	r2, [pc, #868]	; (8001988 <__aeabi_dmul+0x39c>)
 8001624:	00c5      	lsls	r5, r0, #3
 8001626:	4694      	mov	ip, r2
 8001628:	4463      	add	r3, ip
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2300      	movs	r3, #0
 800162e:	4699      	mov	r9, r3
 8001630:	469b      	mov	fp, r3
 8001632:	4643      	mov	r3, r8
 8001634:	4642      	mov	r2, r8
 8001636:	031e      	lsls	r6, r3, #12
 8001638:	0fd2      	lsrs	r2, r2, #31
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4650      	mov	r0, sl
 800163e:	4690      	mov	r8, r2
 8001640:	0b36      	lsrs	r6, r6, #12
 8001642:	0d5b      	lsrs	r3, r3, #21
 8001644:	d100      	bne.n	8001648 <__aeabi_dmul+0x5c>
 8001646:	e078      	b.n	800173a <__aeabi_dmul+0x14e>
 8001648:	4ace      	ldr	r2, [pc, #824]	; (8001984 <__aeabi_dmul+0x398>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d01d      	beq.n	800168a <__aeabi_dmul+0x9e>
 800164e:	49ce      	ldr	r1, [pc, #824]	; (8001988 <__aeabi_dmul+0x39c>)
 8001650:	0f42      	lsrs	r2, r0, #29
 8001652:	468c      	mov	ip, r1
 8001654:	9900      	ldr	r1, [sp, #0]
 8001656:	4463      	add	r3, ip
 8001658:	00f6      	lsls	r6, r6, #3
 800165a:	468c      	mov	ip, r1
 800165c:	4316      	orrs	r6, r2
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	449c      	add	ip, r3
 8001662:	0412      	lsls	r2, r2, #16
 8001664:	4663      	mov	r3, ip
 8001666:	4316      	orrs	r6, r2
 8001668:	00c2      	lsls	r2, r0, #3
 800166a:	2000      	movs	r0, #0
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	9900      	ldr	r1, [sp, #0]
 8001670:	4643      	mov	r3, r8
 8001672:	3101      	adds	r1, #1
 8001674:	468c      	mov	ip, r1
 8001676:	4649      	mov	r1, r9
 8001678:	407b      	eors	r3, r7
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	290f      	cmp	r1, #15
 800167e:	d900      	bls.n	8001682 <__aeabi_dmul+0x96>
 8001680:	e07e      	b.n	8001780 <__aeabi_dmul+0x194>
 8001682:	4bc2      	ldr	r3, [pc, #776]	; (800198c <__aeabi_dmul+0x3a0>)
 8001684:	0089      	lsls	r1, r1, #2
 8001686:	5859      	ldr	r1, [r3, r1]
 8001688:	468f      	mov	pc, r1
 800168a:	4652      	mov	r2, sl
 800168c:	9b00      	ldr	r3, [sp, #0]
 800168e:	4332      	orrs	r2, r6
 8001690:	d000      	beq.n	8001694 <__aeabi_dmul+0xa8>
 8001692:	e156      	b.n	8001942 <__aeabi_dmul+0x356>
 8001694:	49bb      	ldr	r1, [pc, #748]	; (8001984 <__aeabi_dmul+0x398>)
 8001696:	2600      	movs	r6, #0
 8001698:	468c      	mov	ip, r1
 800169a:	4463      	add	r3, ip
 800169c:	4649      	mov	r1, r9
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	4319      	orrs	r1, r3
 80016a4:	4689      	mov	r9, r1
 80016a6:	2002      	movs	r0, #2
 80016a8:	e7e1      	b.n	800166e <__aeabi_dmul+0x82>
 80016aa:	4643      	mov	r3, r8
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	0034      	movs	r4, r6
 80016b0:	0015      	movs	r5, r2
 80016b2:	4683      	mov	fp, r0
 80016b4:	465b      	mov	r3, fp
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d05e      	beq.n	8001778 <__aeabi_dmul+0x18c>
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dmul+0xd4>
 80016be:	e1f3      	b.n	8001aa8 <__aeabi_dmul+0x4bc>
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d000      	beq.n	80016c6 <__aeabi_dmul+0xda>
 80016c4:	e118      	b.n	80018f8 <__aeabi_dmul+0x30c>
 80016c6:	2200      	movs	r2, #0
 80016c8:	2400      	movs	r4, #0
 80016ca:	2500      	movs	r5, #0
 80016cc:	9b01      	ldr	r3, [sp, #4]
 80016ce:	0512      	lsls	r2, r2, #20
 80016d0:	4322      	orrs	r2, r4
 80016d2:	07db      	lsls	r3, r3, #31
 80016d4:	431a      	orrs	r2, r3
 80016d6:	0028      	movs	r0, r5
 80016d8:	0011      	movs	r1, r2
 80016da:	b007      	add	sp, #28
 80016dc:	bcf0      	pop	{r4, r5, r6, r7}
 80016de:	46bb      	mov	fp, r7
 80016e0:	46b2      	mov	sl, r6
 80016e2:	46a9      	mov	r9, r5
 80016e4:	46a0      	mov	r8, r4
 80016e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e8:	0025      	movs	r5, r4
 80016ea:	4305      	orrs	r5, r0
 80016ec:	d100      	bne.n	80016f0 <__aeabi_dmul+0x104>
 80016ee:	e141      	b.n	8001974 <__aeabi_dmul+0x388>
 80016f0:	2c00      	cmp	r4, #0
 80016f2:	d100      	bne.n	80016f6 <__aeabi_dmul+0x10a>
 80016f4:	e1ad      	b.n	8001a52 <__aeabi_dmul+0x466>
 80016f6:	0020      	movs	r0, r4
 80016f8:	f000 fef0 	bl	80024dc <__clzsi2>
 80016fc:	0001      	movs	r1, r0
 80016fe:	0002      	movs	r2, r0
 8001700:	390b      	subs	r1, #11
 8001702:	231d      	movs	r3, #29
 8001704:	0010      	movs	r0, r2
 8001706:	1a5b      	subs	r3, r3, r1
 8001708:	0031      	movs	r1, r6
 800170a:	0035      	movs	r5, r6
 800170c:	3808      	subs	r0, #8
 800170e:	4084      	lsls	r4, r0
 8001710:	40d9      	lsrs	r1, r3
 8001712:	4085      	lsls	r5, r0
 8001714:	430c      	orrs	r4, r1
 8001716:	489e      	ldr	r0, [pc, #632]	; (8001990 <__aeabi_dmul+0x3a4>)
 8001718:	1a83      	subs	r3, r0, r2
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2300      	movs	r3, #0
 800171e:	4699      	mov	r9, r3
 8001720:	469b      	mov	fp, r3
 8001722:	e786      	b.n	8001632 <__aeabi_dmul+0x46>
 8001724:	0005      	movs	r5, r0
 8001726:	4325      	orrs	r5, r4
 8001728:	d000      	beq.n	800172c <__aeabi_dmul+0x140>
 800172a:	e11c      	b.n	8001966 <__aeabi_dmul+0x37a>
 800172c:	2208      	movs	r2, #8
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	2302      	movs	r3, #2
 8001732:	2400      	movs	r4, #0
 8001734:	4691      	mov	r9, r2
 8001736:	469b      	mov	fp, r3
 8001738:	e77b      	b.n	8001632 <__aeabi_dmul+0x46>
 800173a:	4652      	mov	r2, sl
 800173c:	4332      	orrs	r2, r6
 800173e:	d100      	bne.n	8001742 <__aeabi_dmul+0x156>
 8001740:	e10a      	b.n	8001958 <__aeabi_dmul+0x36c>
 8001742:	2e00      	cmp	r6, #0
 8001744:	d100      	bne.n	8001748 <__aeabi_dmul+0x15c>
 8001746:	e176      	b.n	8001a36 <__aeabi_dmul+0x44a>
 8001748:	0030      	movs	r0, r6
 800174a:	f000 fec7 	bl	80024dc <__clzsi2>
 800174e:	0002      	movs	r2, r0
 8001750:	3a0b      	subs	r2, #11
 8001752:	231d      	movs	r3, #29
 8001754:	0001      	movs	r1, r0
 8001756:	1a9b      	subs	r3, r3, r2
 8001758:	4652      	mov	r2, sl
 800175a:	3908      	subs	r1, #8
 800175c:	40da      	lsrs	r2, r3
 800175e:	408e      	lsls	r6, r1
 8001760:	4316      	orrs	r6, r2
 8001762:	4652      	mov	r2, sl
 8001764:	408a      	lsls	r2, r1
 8001766:	9b00      	ldr	r3, [sp, #0]
 8001768:	4989      	ldr	r1, [pc, #548]	; (8001990 <__aeabi_dmul+0x3a4>)
 800176a:	1a18      	subs	r0, r3, r0
 800176c:	0003      	movs	r3, r0
 800176e:	468c      	mov	ip, r1
 8001770:	4463      	add	r3, ip
 8001772:	2000      	movs	r0, #0
 8001774:	9300      	str	r3, [sp, #0]
 8001776:	e77a      	b.n	800166e <__aeabi_dmul+0x82>
 8001778:	2400      	movs	r4, #0
 800177a:	2500      	movs	r5, #0
 800177c:	4a81      	ldr	r2, [pc, #516]	; (8001984 <__aeabi_dmul+0x398>)
 800177e:	e7a5      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001780:	0c2f      	lsrs	r7, r5, #16
 8001782:	042d      	lsls	r5, r5, #16
 8001784:	0c2d      	lsrs	r5, r5, #16
 8001786:	002b      	movs	r3, r5
 8001788:	0c11      	lsrs	r1, r2, #16
 800178a:	0412      	lsls	r2, r2, #16
 800178c:	0c12      	lsrs	r2, r2, #16
 800178e:	4353      	muls	r3, r2
 8001790:	4698      	mov	r8, r3
 8001792:	0013      	movs	r3, r2
 8001794:	0028      	movs	r0, r5
 8001796:	437b      	muls	r3, r7
 8001798:	4699      	mov	r9, r3
 800179a:	4348      	muls	r0, r1
 800179c:	4448      	add	r0, r9
 800179e:	4683      	mov	fp, r0
 80017a0:	4640      	mov	r0, r8
 80017a2:	000b      	movs	r3, r1
 80017a4:	0c00      	lsrs	r0, r0, #16
 80017a6:	4682      	mov	sl, r0
 80017a8:	4658      	mov	r0, fp
 80017aa:	437b      	muls	r3, r7
 80017ac:	4450      	add	r0, sl
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	4581      	cmp	r9, r0
 80017b2:	d906      	bls.n	80017c2 <__aeabi_dmul+0x1d6>
 80017b4:	469a      	mov	sl, r3
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	025b      	lsls	r3, r3, #9
 80017ba:	4699      	mov	r9, r3
 80017bc:	44ca      	add	sl, r9
 80017be:	4653      	mov	r3, sl
 80017c0:	9302      	str	r3, [sp, #8]
 80017c2:	0c03      	lsrs	r3, r0, #16
 80017c4:	469b      	mov	fp, r3
 80017c6:	4643      	mov	r3, r8
 80017c8:	041b      	lsls	r3, r3, #16
 80017ca:	0400      	lsls	r0, r0, #16
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	4698      	mov	r8, r3
 80017d0:	0003      	movs	r3, r0
 80017d2:	4443      	add	r3, r8
 80017d4:	9304      	str	r3, [sp, #16]
 80017d6:	0c33      	lsrs	r3, r6, #16
 80017d8:	4699      	mov	r9, r3
 80017da:	002b      	movs	r3, r5
 80017dc:	0436      	lsls	r6, r6, #16
 80017de:	0c36      	lsrs	r6, r6, #16
 80017e0:	4373      	muls	r3, r6
 80017e2:	4698      	mov	r8, r3
 80017e4:	0033      	movs	r3, r6
 80017e6:	437b      	muls	r3, r7
 80017e8:	469a      	mov	sl, r3
 80017ea:	464b      	mov	r3, r9
 80017ec:	435d      	muls	r5, r3
 80017ee:	435f      	muls	r7, r3
 80017f0:	4643      	mov	r3, r8
 80017f2:	4455      	add	r5, sl
 80017f4:	0c18      	lsrs	r0, r3, #16
 80017f6:	1940      	adds	r0, r0, r5
 80017f8:	4582      	cmp	sl, r0
 80017fa:	d903      	bls.n	8001804 <__aeabi_dmul+0x218>
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	025b      	lsls	r3, r3, #9
 8001800:	469a      	mov	sl, r3
 8001802:	4457      	add	r7, sl
 8001804:	0c05      	lsrs	r5, r0, #16
 8001806:	19eb      	adds	r3, r5, r7
 8001808:	9305      	str	r3, [sp, #20]
 800180a:	4643      	mov	r3, r8
 800180c:	041d      	lsls	r5, r3, #16
 800180e:	0c2d      	lsrs	r5, r5, #16
 8001810:	0400      	lsls	r0, r0, #16
 8001812:	1940      	adds	r0, r0, r5
 8001814:	0c25      	lsrs	r5, r4, #16
 8001816:	0424      	lsls	r4, r4, #16
 8001818:	0c24      	lsrs	r4, r4, #16
 800181a:	0027      	movs	r7, r4
 800181c:	4357      	muls	r7, r2
 800181e:	436a      	muls	r2, r5
 8001820:	4690      	mov	r8, r2
 8001822:	002a      	movs	r2, r5
 8001824:	0c3b      	lsrs	r3, r7, #16
 8001826:	469a      	mov	sl, r3
 8001828:	434a      	muls	r2, r1
 800182a:	4361      	muls	r1, r4
 800182c:	4441      	add	r1, r8
 800182e:	4451      	add	r1, sl
 8001830:	4483      	add	fp, r0
 8001832:	4588      	cmp	r8, r1
 8001834:	d903      	bls.n	800183e <__aeabi_dmul+0x252>
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	025b      	lsls	r3, r3, #9
 800183a:	4698      	mov	r8, r3
 800183c:	4442      	add	r2, r8
 800183e:	043f      	lsls	r7, r7, #16
 8001840:	0c0b      	lsrs	r3, r1, #16
 8001842:	0c3f      	lsrs	r7, r7, #16
 8001844:	0409      	lsls	r1, r1, #16
 8001846:	19c9      	adds	r1, r1, r7
 8001848:	0027      	movs	r7, r4
 800184a:	4698      	mov	r8, r3
 800184c:	464b      	mov	r3, r9
 800184e:	4377      	muls	r7, r6
 8001850:	435c      	muls	r4, r3
 8001852:	436e      	muls	r6, r5
 8001854:	435d      	muls	r5, r3
 8001856:	0c3b      	lsrs	r3, r7, #16
 8001858:	4699      	mov	r9, r3
 800185a:	19a4      	adds	r4, r4, r6
 800185c:	444c      	add	r4, r9
 800185e:	4442      	add	r2, r8
 8001860:	9503      	str	r5, [sp, #12]
 8001862:	42a6      	cmp	r6, r4
 8001864:	d904      	bls.n	8001870 <__aeabi_dmul+0x284>
 8001866:	2380      	movs	r3, #128	; 0x80
 8001868:	025b      	lsls	r3, r3, #9
 800186a:	4698      	mov	r8, r3
 800186c:	4445      	add	r5, r8
 800186e:	9503      	str	r5, [sp, #12]
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	043f      	lsls	r7, r7, #16
 8001874:	445b      	add	r3, fp
 8001876:	001e      	movs	r6, r3
 8001878:	4283      	cmp	r3, r0
 800187a:	4180      	sbcs	r0, r0
 800187c:	0423      	lsls	r3, r4, #16
 800187e:	4698      	mov	r8, r3
 8001880:	9b05      	ldr	r3, [sp, #20]
 8001882:	0c3f      	lsrs	r7, r7, #16
 8001884:	4447      	add	r7, r8
 8001886:	4698      	mov	r8, r3
 8001888:	1876      	adds	r6, r6, r1
 800188a:	428e      	cmp	r6, r1
 800188c:	4189      	sbcs	r1, r1
 800188e:	4447      	add	r7, r8
 8001890:	4240      	negs	r0, r0
 8001892:	183d      	adds	r5, r7, r0
 8001894:	46a8      	mov	r8, r5
 8001896:	4693      	mov	fp, r2
 8001898:	4249      	negs	r1, r1
 800189a:	468a      	mov	sl, r1
 800189c:	44c3      	add	fp, r8
 800189e:	429f      	cmp	r7, r3
 80018a0:	41bf      	sbcs	r7, r7
 80018a2:	4580      	cmp	r8, r0
 80018a4:	4180      	sbcs	r0, r0
 80018a6:	9b03      	ldr	r3, [sp, #12]
 80018a8:	44da      	add	sl, fp
 80018aa:	4698      	mov	r8, r3
 80018ac:	4653      	mov	r3, sl
 80018ae:	4240      	negs	r0, r0
 80018b0:	427f      	negs	r7, r7
 80018b2:	4307      	orrs	r7, r0
 80018b4:	0c24      	lsrs	r4, r4, #16
 80018b6:	4593      	cmp	fp, r2
 80018b8:	4192      	sbcs	r2, r2
 80018ba:	458a      	cmp	sl, r1
 80018bc:	4189      	sbcs	r1, r1
 80018be:	193f      	adds	r7, r7, r4
 80018c0:	0ddc      	lsrs	r4, r3, #23
 80018c2:	9b04      	ldr	r3, [sp, #16]
 80018c4:	0275      	lsls	r5, r6, #9
 80018c6:	431d      	orrs	r5, r3
 80018c8:	1e68      	subs	r0, r5, #1
 80018ca:	4185      	sbcs	r5, r0
 80018cc:	4653      	mov	r3, sl
 80018ce:	4252      	negs	r2, r2
 80018d0:	4249      	negs	r1, r1
 80018d2:	430a      	orrs	r2, r1
 80018d4:	18bf      	adds	r7, r7, r2
 80018d6:	4447      	add	r7, r8
 80018d8:	0df6      	lsrs	r6, r6, #23
 80018da:	027f      	lsls	r7, r7, #9
 80018dc:	4335      	orrs	r5, r6
 80018de:	025a      	lsls	r2, r3, #9
 80018e0:	433c      	orrs	r4, r7
 80018e2:	4315      	orrs	r5, r2
 80018e4:	01fb      	lsls	r3, r7, #7
 80018e6:	d400      	bmi.n	80018ea <__aeabi_dmul+0x2fe>
 80018e8:	e0c1      	b.n	8001a6e <__aeabi_dmul+0x482>
 80018ea:	2101      	movs	r1, #1
 80018ec:	086a      	lsrs	r2, r5, #1
 80018ee:	400d      	ands	r5, r1
 80018f0:	4315      	orrs	r5, r2
 80018f2:	07e2      	lsls	r2, r4, #31
 80018f4:	4315      	orrs	r5, r2
 80018f6:	0864      	lsrs	r4, r4, #1
 80018f8:	4926      	ldr	r1, [pc, #152]	; (8001994 <__aeabi_dmul+0x3a8>)
 80018fa:	4461      	add	r1, ip
 80018fc:	2900      	cmp	r1, #0
 80018fe:	dd56      	ble.n	80019ae <__aeabi_dmul+0x3c2>
 8001900:	076b      	lsls	r3, r5, #29
 8001902:	d009      	beq.n	8001918 <__aeabi_dmul+0x32c>
 8001904:	220f      	movs	r2, #15
 8001906:	402a      	ands	r2, r5
 8001908:	2a04      	cmp	r2, #4
 800190a:	d005      	beq.n	8001918 <__aeabi_dmul+0x32c>
 800190c:	1d2a      	adds	r2, r5, #4
 800190e:	42aa      	cmp	r2, r5
 8001910:	41ad      	sbcs	r5, r5
 8001912:	426d      	negs	r5, r5
 8001914:	1964      	adds	r4, r4, r5
 8001916:	0015      	movs	r5, r2
 8001918:	01e3      	lsls	r3, r4, #7
 800191a:	d504      	bpl.n	8001926 <__aeabi_dmul+0x33a>
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	4a1e      	ldr	r2, [pc, #120]	; (8001998 <__aeabi_dmul+0x3ac>)
 8001920:	00c9      	lsls	r1, r1, #3
 8001922:	4014      	ands	r4, r2
 8001924:	4461      	add	r1, ip
 8001926:	4a1d      	ldr	r2, [pc, #116]	; (800199c <__aeabi_dmul+0x3b0>)
 8001928:	4291      	cmp	r1, r2
 800192a:	dd00      	ble.n	800192e <__aeabi_dmul+0x342>
 800192c:	e724      	b.n	8001778 <__aeabi_dmul+0x18c>
 800192e:	0762      	lsls	r2, r4, #29
 8001930:	08ed      	lsrs	r5, r5, #3
 8001932:	0264      	lsls	r4, r4, #9
 8001934:	0549      	lsls	r1, r1, #21
 8001936:	4315      	orrs	r5, r2
 8001938:	0b24      	lsrs	r4, r4, #12
 800193a:	0d4a      	lsrs	r2, r1, #21
 800193c:	e6c6      	b.n	80016cc <__aeabi_dmul+0xe0>
 800193e:	9701      	str	r7, [sp, #4]
 8001940:	e6b8      	b.n	80016b4 <__aeabi_dmul+0xc8>
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <__aeabi_dmul+0x398>)
 8001944:	2003      	movs	r0, #3
 8001946:	4694      	mov	ip, r2
 8001948:	4463      	add	r3, ip
 800194a:	464a      	mov	r2, r9
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2303      	movs	r3, #3
 8001950:	431a      	orrs	r2, r3
 8001952:	4691      	mov	r9, r2
 8001954:	4652      	mov	r2, sl
 8001956:	e68a      	b.n	800166e <__aeabi_dmul+0x82>
 8001958:	4649      	mov	r1, r9
 800195a:	2301      	movs	r3, #1
 800195c:	4319      	orrs	r1, r3
 800195e:	4689      	mov	r9, r1
 8001960:	2600      	movs	r6, #0
 8001962:	2001      	movs	r0, #1
 8001964:	e683      	b.n	800166e <__aeabi_dmul+0x82>
 8001966:	220c      	movs	r2, #12
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2303      	movs	r3, #3
 800196c:	0005      	movs	r5, r0
 800196e:	4691      	mov	r9, r2
 8001970:	469b      	mov	fp, r3
 8001972:	e65e      	b.n	8001632 <__aeabi_dmul+0x46>
 8001974:	2304      	movs	r3, #4
 8001976:	4699      	mov	r9, r3
 8001978:	2300      	movs	r3, #0
 800197a:	9300      	str	r3, [sp, #0]
 800197c:	3301      	adds	r3, #1
 800197e:	2400      	movs	r4, #0
 8001980:	469b      	mov	fp, r3
 8001982:	e656      	b.n	8001632 <__aeabi_dmul+0x46>
 8001984:	000007ff 	.word	0x000007ff
 8001988:	fffffc01 	.word	0xfffffc01
 800198c:	0800b0fc 	.word	0x0800b0fc
 8001990:	fffffc0d 	.word	0xfffffc0d
 8001994:	000003ff 	.word	0x000003ff
 8001998:	feffffff 	.word	0xfeffffff
 800199c:	000007fe 	.word	0x000007fe
 80019a0:	2300      	movs	r3, #0
 80019a2:	2480      	movs	r4, #128	; 0x80
 80019a4:	2500      	movs	r5, #0
 80019a6:	4a44      	ldr	r2, [pc, #272]	; (8001ab8 <__aeabi_dmul+0x4cc>)
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	0324      	lsls	r4, r4, #12
 80019ac:	e68e      	b.n	80016cc <__aeabi_dmul+0xe0>
 80019ae:	2001      	movs	r0, #1
 80019b0:	1a40      	subs	r0, r0, r1
 80019b2:	2838      	cmp	r0, #56	; 0x38
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dmul+0x3cc>
 80019b6:	e686      	b.n	80016c6 <__aeabi_dmul+0xda>
 80019b8:	281f      	cmp	r0, #31
 80019ba:	dd5b      	ble.n	8001a74 <__aeabi_dmul+0x488>
 80019bc:	221f      	movs	r2, #31
 80019be:	0023      	movs	r3, r4
 80019c0:	4252      	negs	r2, r2
 80019c2:	1a51      	subs	r1, r2, r1
 80019c4:	40cb      	lsrs	r3, r1
 80019c6:	0019      	movs	r1, r3
 80019c8:	2820      	cmp	r0, #32
 80019ca:	d003      	beq.n	80019d4 <__aeabi_dmul+0x3e8>
 80019cc:	4a3b      	ldr	r2, [pc, #236]	; (8001abc <__aeabi_dmul+0x4d0>)
 80019ce:	4462      	add	r2, ip
 80019d0:	4094      	lsls	r4, r2
 80019d2:	4325      	orrs	r5, r4
 80019d4:	1e6a      	subs	r2, r5, #1
 80019d6:	4195      	sbcs	r5, r2
 80019d8:	002a      	movs	r2, r5
 80019da:	430a      	orrs	r2, r1
 80019dc:	2107      	movs	r1, #7
 80019de:	000d      	movs	r5, r1
 80019e0:	2400      	movs	r4, #0
 80019e2:	4015      	ands	r5, r2
 80019e4:	4211      	tst	r1, r2
 80019e6:	d05b      	beq.n	8001aa0 <__aeabi_dmul+0x4b4>
 80019e8:	210f      	movs	r1, #15
 80019ea:	2400      	movs	r4, #0
 80019ec:	4011      	ands	r1, r2
 80019ee:	2904      	cmp	r1, #4
 80019f0:	d053      	beq.n	8001a9a <__aeabi_dmul+0x4ae>
 80019f2:	1d11      	adds	r1, r2, #4
 80019f4:	4291      	cmp	r1, r2
 80019f6:	4192      	sbcs	r2, r2
 80019f8:	4252      	negs	r2, r2
 80019fa:	18a4      	adds	r4, r4, r2
 80019fc:	000a      	movs	r2, r1
 80019fe:	0223      	lsls	r3, r4, #8
 8001a00:	d54b      	bpl.n	8001a9a <__aeabi_dmul+0x4ae>
 8001a02:	2201      	movs	r2, #1
 8001a04:	2400      	movs	r4, #0
 8001a06:	2500      	movs	r5, #0
 8001a08:	e660      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	031b      	lsls	r3, r3, #12
 8001a0e:	421c      	tst	r4, r3
 8001a10:	d009      	beq.n	8001a26 <__aeabi_dmul+0x43a>
 8001a12:	421e      	tst	r6, r3
 8001a14:	d107      	bne.n	8001a26 <__aeabi_dmul+0x43a>
 8001a16:	4333      	orrs	r3, r6
 8001a18:	031c      	lsls	r4, r3, #12
 8001a1a:	4643      	mov	r3, r8
 8001a1c:	0015      	movs	r5, r2
 8001a1e:	0b24      	lsrs	r4, r4, #12
 8001a20:	4a25      	ldr	r2, [pc, #148]	; (8001ab8 <__aeabi_dmul+0x4cc>)
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	e652      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001a26:	2280      	movs	r2, #128	; 0x80
 8001a28:	0312      	lsls	r2, r2, #12
 8001a2a:	4314      	orrs	r4, r2
 8001a2c:	0324      	lsls	r4, r4, #12
 8001a2e:	4a22      	ldr	r2, [pc, #136]	; (8001ab8 <__aeabi_dmul+0x4cc>)
 8001a30:	0b24      	lsrs	r4, r4, #12
 8001a32:	9701      	str	r7, [sp, #4]
 8001a34:	e64a      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001a36:	f000 fd51 	bl	80024dc <__clzsi2>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	001a      	movs	r2, r3
 8001a3e:	3215      	adds	r2, #21
 8001a40:	3020      	adds	r0, #32
 8001a42:	2a1c      	cmp	r2, #28
 8001a44:	dc00      	bgt.n	8001a48 <__aeabi_dmul+0x45c>
 8001a46:	e684      	b.n	8001752 <__aeabi_dmul+0x166>
 8001a48:	4656      	mov	r6, sl
 8001a4a:	3b08      	subs	r3, #8
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	409e      	lsls	r6, r3
 8001a50:	e689      	b.n	8001766 <__aeabi_dmul+0x17a>
 8001a52:	f000 fd43 	bl	80024dc <__clzsi2>
 8001a56:	0001      	movs	r1, r0
 8001a58:	0002      	movs	r2, r0
 8001a5a:	3115      	adds	r1, #21
 8001a5c:	3220      	adds	r2, #32
 8001a5e:	291c      	cmp	r1, #28
 8001a60:	dc00      	bgt.n	8001a64 <__aeabi_dmul+0x478>
 8001a62:	e64e      	b.n	8001702 <__aeabi_dmul+0x116>
 8001a64:	0034      	movs	r4, r6
 8001a66:	3808      	subs	r0, #8
 8001a68:	2500      	movs	r5, #0
 8001a6a:	4084      	lsls	r4, r0
 8001a6c:	e653      	b.n	8001716 <__aeabi_dmul+0x12a>
 8001a6e:	9b00      	ldr	r3, [sp, #0]
 8001a70:	469c      	mov	ip, r3
 8001a72:	e741      	b.n	80018f8 <__aeabi_dmul+0x30c>
 8001a74:	4912      	ldr	r1, [pc, #72]	; (8001ac0 <__aeabi_dmul+0x4d4>)
 8001a76:	0022      	movs	r2, r4
 8001a78:	4461      	add	r1, ip
 8001a7a:	002e      	movs	r6, r5
 8001a7c:	408d      	lsls	r5, r1
 8001a7e:	408a      	lsls	r2, r1
 8001a80:	40c6      	lsrs	r6, r0
 8001a82:	1e69      	subs	r1, r5, #1
 8001a84:	418d      	sbcs	r5, r1
 8001a86:	4332      	orrs	r2, r6
 8001a88:	432a      	orrs	r2, r5
 8001a8a:	40c4      	lsrs	r4, r0
 8001a8c:	0753      	lsls	r3, r2, #29
 8001a8e:	d0b6      	beq.n	80019fe <__aeabi_dmul+0x412>
 8001a90:	210f      	movs	r1, #15
 8001a92:	4011      	ands	r1, r2
 8001a94:	2904      	cmp	r1, #4
 8001a96:	d1ac      	bne.n	80019f2 <__aeabi_dmul+0x406>
 8001a98:	e7b1      	b.n	80019fe <__aeabi_dmul+0x412>
 8001a9a:	0765      	lsls	r5, r4, #29
 8001a9c:	0264      	lsls	r4, r4, #9
 8001a9e:	0b24      	lsrs	r4, r4, #12
 8001aa0:	08d2      	lsrs	r2, r2, #3
 8001aa2:	4315      	orrs	r5, r2
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	e611      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	0312      	lsls	r2, r2, #12
 8001aac:	4314      	orrs	r4, r2
 8001aae:	0324      	lsls	r4, r4, #12
 8001ab0:	4a01      	ldr	r2, [pc, #4]	; (8001ab8 <__aeabi_dmul+0x4cc>)
 8001ab2:	0b24      	lsrs	r4, r4, #12
 8001ab4:	e60a      	b.n	80016cc <__aeabi_dmul+0xe0>
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	000007ff 	.word	0x000007ff
 8001abc:	0000043e 	.word	0x0000043e
 8001ac0:	0000041e 	.word	0x0000041e

08001ac4 <__aeabi_dsub>:
 8001ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac6:	4657      	mov	r7, sl
 8001ac8:	464e      	mov	r6, r9
 8001aca:	4645      	mov	r5, r8
 8001acc:	46de      	mov	lr, fp
 8001ace:	0004      	movs	r4, r0
 8001ad0:	b5e0      	push	{r5, r6, r7, lr}
 8001ad2:	001f      	movs	r7, r3
 8001ad4:	0010      	movs	r0, r2
 8001ad6:	030b      	lsls	r3, r1, #12
 8001ad8:	0f62      	lsrs	r2, r4, #29
 8001ada:	004e      	lsls	r6, r1, #1
 8001adc:	0fcd      	lsrs	r5, r1, #31
 8001ade:	0a5b      	lsrs	r3, r3, #9
 8001ae0:	0339      	lsls	r1, r7, #12
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	0a49      	lsrs	r1, r1, #9
 8001ae6:	00e2      	lsls	r2, r4, #3
 8001ae8:	0f44      	lsrs	r4, r0, #29
 8001aea:	4321      	orrs	r1, r4
 8001aec:	4cc2      	ldr	r4, [pc, #776]	; (8001df8 <__aeabi_dsub+0x334>)
 8001aee:	4691      	mov	r9, r2
 8001af0:	4692      	mov	sl, r2
 8001af2:	00c0      	lsls	r0, r0, #3
 8001af4:	007a      	lsls	r2, r7, #1
 8001af6:	4680      	mov	r8, r0
 8001af8:	0d76      	lsrs	r6, r6, #21
 8001afa:	0d52      	lsrs	r2, r2, #21
 8001afc:	0fff      	lsrs	r7, r7, #31
 8001afe:	42a2      	cmp	r2, r4
 8001b00:	d100      	bne.n	8001b04 <__aeabi_dsub+0x40>
 8001b02:	e0b4      	b.n	8001c6e <__aeabi_dsub+0x1aa>
 8001b04:	2401      	movs	r4, #1
 8001b06:	4067      	eors	r7, r4
 8001b08:	46bb      	mov	fp, r7
 8001b0a:	42bd      	cmp	r5, r7
 8001b0c:	d100      	bne.n	8001b10 <__aeabi_dsub+0x4c>
 8001b0e:	e088      	b.n	8001c22 <__aeabi_dsub+0x15e>
 8001b10:	1ab4      	subs	r4, r6, r2
 8001b12:	46a4      	mov	ip, r4
 8001b14:	2c00      	cmp	r4, #0
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_dsub+0x56>
 8001b18:	e0b2      	b.n	8001c80 <__aeabi_dsub+0x1bc>
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_dsub+0x5c>
 8001b1e:	e0c5      	b.n	8001cac <__aeabi_dsub+0x1e8>
 8001b20:	4ab5      	ldr	r2, [pc, #724]	; (8001df8 <__aeabi_dsub+0x334>)
 8001b22:	4296      	cmp	r6, r2
 8001b24:	d100      	bne.n	8001b28 <__aeabi_dsub+0x64>
 8001b26:	e28b      	b.n	8002040 <__aeabi_dsub+0x57c>
 8001b28:	2280      	movs	r2, #128	; 0x80
 8001b2a:	0412      	lsls	r2, r2, #16
 8001b2c:	4311      	orrs	r1, r2
 8001b2e:	4662      	mov	r2, ip
 8001b30:	2a38      	cmp	r2, #56	; 0x38
 8001b32:	dd00      	ble.n	8001b36 <__aeabi_dsub+0x72>
 8001b34:	e1a1      	b.n	8001e7a <__aeabi_dsub+0x3b6>
 8001b36:	2a1f      	cmp	r2, #31
 8001b38:	dd00      	ble.n	8001b3c <__aeabi_dsub+0x78>
 8001b3a:	e216      	b.n	8001f6a <__aeabi_dsub+0x4a6>
 8001b3c:	2720      	movs	r7, #32
 8001b3e:	000c      	movs	r4, r1
 8001b40:	1abf      	subs	r7, r7, r2
 8001b42:	40bc      	lsls	r4, r7
 8001b44:	0002      	movs	r2, r0
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4664      	mov	r4, ip
 8001b4a:	40b8      	lsls	r0, r7
 8001b4c:	40e2      	lsrs	r2, r4
 8001b4e:	4644      	mov	r4, r8
 8001b50:	4314      	orrs	r4, r2
 8001b52:	0002      	movs	r2, r0
 8001b54:	1e50      	subs	r0, r2, #1
 8001b56:	4182      	sbcs	r2, r0
 8001b58:	4660      	mov	r0, ip
 8001b5a:	40c1      	lsrs	r1, r0
 8001b5c:	4322      	orrs	r2, r4
 8001b5e:	1a5b      	subs	r3, r3, r1
 8001b60:	4649      	mov	r1, r9
 8001b62:	1a8c      	subs	r4, r1, r2
 8001b64:	45a1      	cmp	r9, r4
 8001b66:	4192      	sbcs	r2, r2
 8001b68:	4252      	negs	r2, r2
 8001b6a:	1a9b      	subs	r3, r3, r2
 8001b6c:	4698      	mov	r8, r3
 8001b6e:	4643      	mov	r3, r8
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	d400      	bmi.n	8001b76 <__aeabi_dsub+0xb2>
 8001b74:	e117      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 8001b76:	4643      	mov	r3, r8
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	0a5b      	lsrs	r3, r3, #9
 8001b7c:	4698      	mov	r8, r3
 8001b7e:	4643      	mov	r3, r8
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d100      	bne.n	8001b86 <__aeabi_dsub+0xc2>
 8001b84:	e16c      	b.n	8001e60 <__aeabi_dsub+0x39c>
 8001b86:	4640      	mov	r0, r8
 8001b88:	f000 fca8 	bl	80024dc <__clzsi2>
 8001b8c:	0002      	movs	r2, r0
 8001b8e:	3a08      	subs	r2, #8
 8001b90:	2120      	movs	r1, #32
 8001b92:	0020      	movs	r0, r4
 8001b94:	4643      	mov	r3, r8
 8001b96:	1a89      	subs	r1, r1, r2
 8001b98:	4093      	lsls	r3, r2
 8001b9a:	40c8      	lsrs	r0, r1
 8001b9c:	4094      	lsls	r4, r2
 8001b9e:	4303      	orrs	r3, r0
 8001ba0:	4296      	cmp	r6, r2
 8001ba2:	dd00      	ble.n	8001ba6 <__aeabi_dsub+0xe2>
 8001ba4:	e157      	b.n	8001e56 <__aeabi_dsub+0x392>
 8001ba6:	1b96      	subs	r6, r2, r6
 8001ba8:	1c71      	adds	r1, r6, #1
 8001baa:	291f      	cmp	r1, #31
 8001bac:	dd00      	ble.n	8001bb0 <__aeabi_dsub+0xec>
 8001bae:	e1cb      	b.n	8001f48 <__aeabi_dsub+0x484>
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	0026      	movs	r6, r4
 8001bb6:	1a52      	subs	r2, r2, r1
 8001bb8:	4094      	lsls	r4, r2
 8001bba:	4090      	lsls	r0, r2
 8001bbc:	40ce      	lsrs	r6, r1
 8001bbe:	40cb      	lsrs	r3, r1
 8001bc0:	1e62      	subs	r2, r4, #1
 8001bc2:	4194      	sbcs	r4, r2
 8001bc4:	4330      	orrs	r0, r6
 8001bc6:	4698      	mov	r8, r3
 8001bc8:	2600      	movs	r6, #0
 8001bca:	4304      	orrs	r4, r0
 8001bcc:	0763      	lsls	r3, r4, #29
 8001bce:	d009      	beq.n	8001be4 <__aeabi_dsub+0x120>
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	4023      	ands	r3, r4
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d005      	beq.n	8001be4 <__aeabi_dsub+0x120>
 8001bd8:	1d23      	adds	r3, r4, #4
 8001bda:	42a3      	cmp	r3, r4
 8001bdc:	41a4      	sbcs	r4, r4
 8001bde:	4264      	negs	r4, r4
 8001be0:	44a0      	add	r8, r4
 8001be2:	001c      	movs	r4, r3
 8001be4:	4643      	mov	r3, r8
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	d400      	bmi.n	8001bec <__aeabi_dsub+0x128>
 8001bea:	e0df      	b.n	8001dac <__aeabi_dsub+0x2e8>
 8001bec:	4b82      	ldr	r3, [pc, #520]	; (8001df8 <__aeabi_dsub+0x334>)
 8001bee:	3601      	adds	r6, #1
 8001bf0:	429e      	cmp	r6, r3
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x132>
 8001bf4:	e0fb      	b.n	8001dee <__aeabi_dsub+0x32a>
 8001bf6:	4642      	mov	r2, r8
 8001bf8:	4b80      	ldr	r3, [pc, #512]	; (8001dfc <__aeabi_dsub+0x338>)
 8001bfa:	08e4      	lsrs	r4, r4, #3
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	0013      	movs	r3, r2
 8001c00:	0571      	lsls	r1, r6, #21
 8001c02:	0752      	lsls	r2, r2, #29
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	4322      	orrs	r2, r4
 8001c08:	0b1b      	lsrs	r3, r3, #12
 8001c0a:	0d49      	lsrs	r1, r1, #21
 8001c0c:	0509      	lsls	r1, r1, #20
 8001c0e:	07ed      	lsls	r5, r5, #31
 8001c10:	4319      	orrs	r1, r3
 8001c12:	4329      	orrs	r1, r5
 8001c14:	0010      	movs	r0, r2
 8001c16:	bcf0      	pop	{r4, r5, r6, r7}
 8001c18:	46bb      	mov	fp, r7
 8001c1a:	46b2      	mov	sl, r6
 8001c1c:	46a9      	mov	r9, r5
 8001c1e:	46a0      	mov	r8, r4
 8001c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c22:	1ab4      	subs	r4, r6, r2
 8001c24:	46a4      	mov	ip, r4
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	dd58      	ble.n	8001cdc <__aeabi_dsub+0x218>
 8001c2a:	2a00      	cmp	r2, #0
 8001c2c:	d100      	bne.n	8001c30 <__aeabi_dsub+0x16c>
 8001c2e:	e09e      	b.n	8001d6e <__aeabi_dsub+0x2aa>
 8001c30:	4a71      	ldr	r2, [pc, #452]	; (8001df8 <__aeabi_dsub+0x334>)
 8001c32:	4296      	cmp	r6, r2
 8001c34:	d100      	bne.n	8001c38 <__aeabi_dsub+0x174>
 8001c36:	e13b      	b.n	8001eb0 <__aeabi_dsub+0x3ec>
 8001c38:	2280      	movs	r2, #128	; 0x80
 8001c3a:	0412      	lsls	r2, r2, #16
 8001c3c:	4311      	orrs	r1, r2
 8001c3e:	4662      	mov	r2, ip
 8001c40:	2a38      	cmp	r2, #56	; 0x38
 8001c42:	dd00      	ble.n	8001c46 <__aeabi_dsub+0x182>
 8001c44:	e0c1      	b.n	8001dca <__aeabi_dsub+0x306>
 8001c46:	2a1f      	cmp	r2, #31
 8001c48:	dc00      	bgt.n	8001c4c <__aeabi_dsub+0x188>
 8001c4a:	e1bb      	b.n	8001fc4 <__aeabi_dsub+0x500>
 8001c4c:	000c      	movs	r4, r1
 8001c4e:	3a20      	subs	r2, #32
 8001c50:	40d4      	lsrs	r4, r2
 8001c52:	0022      	movs	r2, r4
 8001c54:	4664      	mov	r4, ip
 8001c56:	2c20      	cmp	r4, #32
 8001c58:	d004      	beq.n	8001c64 <__aeabi_dsub+0x1a0>
 8001c5a:	2740      	movs	r7, #64	; 0x40
 8001c5c:	1b3f      	subs	r7, r7, r4
 8001c5e:	40b9      	lsls	r1, r7
 8001c60:	4308      	orrs	r0, r1
 8001c62:	4680      	mov	r8, r0
 8001c64:	4644      	mov	r4, r8
 8001c66:	1e61      	subs	r1, r4, #1
 8001c68:	418c      	sbcs	r4, r1
 8001c6a:	4314      	orrs	r4, r2
 8001c6c:	e0b1      	b.n	8001dd2 <__aeabi_dsub+0x30e>
 8001c6e:	000c      	movs	r4, r1
 8001c70:	4304      	orrs	r4, r0
 8001c72:	d02a      	beq.n	8001cca <__aeabi_dsub+0x206>
 8001c74:	46bb      	mov	fp, r7
 8001c76:	42bd      	cmp	r5, r7
 8001c78:	d02d      	beq.n	8001cd6 <__aeabi_dsub+0x212>
 8001c7a:	4c61      	ldr	r4, [pc, #388]	; (8001e00 <__aeabi_dsub+0x33c>)
 8001c7c:	46a4      	mov	ip, r4
 8001c7e:	44b4      	add	ip, r6
 8001c80:	4664      	mov	r4, ip
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d05c      	beq.n	8001d40 <__aeabi_dsub+0x27c>
 8001c86:	1b94      	subs	r4, r2, r6
 8001c88:	46a4      	mov	ip, r4
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dsub+0x1cc>
 8001c8e:	e115      	b.n	8001ebc <__aeabi_dsub+0x3f8>
 8001c90:	464d      	mov	r5, r9
 8001c92:	431d      	orrs	r5, r3
 8001c94:	d100      	bne.n	8001c98 <__aeabi_dsub+0x1d4>
 8001c96:	e1c3      	b.n	8002020 <__aeabi_dsub+0x55c>
 8001c98:	1e65      	subs	r5, r4, #1
 8001c9a:	2c01      	cmp	r4, #1
 8001c9c:	d100      	bne.n	8001ca0 <__aeabi_dsub+0x1dc>
 8001c9e:	e20c      	b.n	80020ba <__aeabi_dsub+0x5f6>
 8001ca0:	4e55      	ldr	r6, [pc, #340]	; (8001df8 <__aeabi_dsub+0x334>)
 8001ca2:	42b4      	cmp	r4, r6
 8001ca4:	d100      	bne.n	8001ca8 <__aeabi_dsub+0x1e4>
 8001ca6:	e1f8      	b.n	800209a <__aeabi_dsub+0x5d6>
 8001ca8:	46ac      	mov	ip, r5
 8001caa:	e10e      	b.n	8001eca <__aeabi_dsub+0x406>
 8001cac:	000a      	movs	r2, r1
 8001cae:	4302      	orrs	r2, r0
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_dsub+0x1f0>
 8001cb2:	e136      	b.n	8001f22 <__aeabi_dsub+0x45e>
 8001cb4:	0022      	movs	r2, r4
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	2c01      	cmp	r4, #1
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dsub+0x1fa>
 8001cbc:	e1c6      	b.n	800204c <__aeabi_dsub+0x588>
 8001cbe:	4c4e      	ldr	r4, [pc, #312]	; (8001df8 <__aeabi_dsub+0x334>)
 8001cc0:	45a4      	cmp	ip, r4
 8001cc2:	d100      	bne.n	8001cc6 <__aeabi_dsub+0x202>
 8001cc4:	e0f4      	b.n	8001eb0 <__aeabi_dsub+0x3ec>
 8001cc6:	4694      	mov	ip, r2
 8001cc8:	e731      	b.n	8001b2e <__aeabi_dsub+0x6a>
 8001cca:	2401      	movs	r4, #1
 8001ccc:	4067      	eors	r7, r4
 8001cce:	46bb      	mov	fp, r7
 8001cd0:	42bd      	cmp	r5, r7
 8001cd2:	d000      	beq.n	8001cd6 <__aeabi_dsub+0x212>
 8001cd4:	e71c      	b.n	8001b10 <__aeabi_dsub+0x4c>
 8001cd6:	4c4a      	ldr	r4, [pc, #296]	; (8001e00 <__aeabi_dsub+0x33c>)
 8001cd8:	46a4      	mov	ip, r4
 8001cda:	44b4      	add	ip, r6
 8001cdc:	4664      	mov	r4, ip
 8001cde:	2c00      	cmp	r4, #0
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_dsub+0x220>
 8001ce2:	e0cf      	b.n	8001e84 <__aeabi_dsub+0x3c0>
 8001ce4:	1b94      	subs	r4, r2, r6
 8001ce6:	46a4      	mov	ip, r4
 8001ce8:	2e00      	cmp	r6, #0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x22a>
 8001cec:	e15c      	b.n	8001fa8 <__aeabi_dsub+0x4e4>
 8001cee:	4e42      	ldr	r6, [pc, #264]	; (8001df8 <__aeabi_dsub+0x334>)
 8001cf0:	42b2      	cmp	r2, r6
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_dsub+0x232>
 8001cf4:	e1ec      	b.n	80020d0 <__aeabi_dsub+0x60c>
 8001cf6:	2680      	movs	r6, #128	; 0x80
 8001cf8:	0436      	lsls	r6, r6, #16
 8001cfa:	4333      	orrs	r3, r6
 8001cfc:	4664      	mov	r4, ip
 8001cfe:	2c38      	cmp	r4, #56	; 0x38
 8001d00:	dd00      	ble.n	8001d04 <__aeabi_dsub+0x240>
 8001d02:	e1b3      	b.n	800206c <__aeabi_dsub+0x5a8>
 8001d04:	2c1f      	cmp	r4, #31
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x246>
 8001d08:	e238      	b.n	800217c <__aeabi_dsub+0x6b8>
 8001d0a:	2620      	movs	r6, #32
 8001d0c:	1b36      	subs	r6, r6, r4
 8001d0e:	001c      	movs	r4, r3
 8001d10:	40b4      	lsls	r4, r6
 8001d12:	464f      	mov	r7, r9
 8001d14:	46a0      	mov	r8, r4
 8001d16:	4664      	mov	r4, ip
 8001d18:	40e7      	lsrs	r7, r4
 8001d1a:	4644      	mov	r4, r8
 8001d1c:	433c      	orrs	r4, r7
 8001d1e:	464f      	mov	r7, r9
 8001d20:	40b7      	lsls	r7, r6
 8001d22:	003e      	movs	r6, r7
 8001d24:	1e77      	subs	r7, r6, #1
 8001d26:	41be      	sbcs	r6, r7
 8001d28:	4334      	orrs	r4, r6
 8001d2a:	4666      	mov	r6, ip
 8001d2c:	40f3      	lsrs	r3, r6
 8001d2e:	18c9      	adds	r1, r1, r3
 8001d30:	1824      	adds	r4, r4, r0
 8001d32:	4284      	cmp	r4, r0
 8001d34:	419b      	sbcs	r3, r3
 8001d36:	425b      	negs	r3, r3
 8001d38:	4698      	mov	r8, r3
 8001d3a:	0016      	movs	r6, r2
 8001d3c:	4488      	add	r8, r1
 8001d3e:	e04e      	b.n	8001dde <__aeabi_dsub+0x31a>
 8001d40:	4a30      	ldr	r2, [pc, #192]	; (8001e04 <__aeabi_dsub+0x340>)
 8001d42:	1c74      	adds	r4, r6, #1
 8001d44:	4214      	tst	r4, r2
 8001d46:	d000      	beq.n	8001d4a <__aeabi_dsub+0x286>
 8001d48:	e0d6      	b.n	8001ef8 <__aeabi_dsub+0x434>
 8001d4a:	464a      	mov	r2, r9
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	2e00      	cmp	r6, #0
 8001d50:	d000      	beq.n	8001d54 <__aeabi_dsub+0x290>
 8001d52:	e15b      	b.n	800200c <__aeabi_dsub+0x548>
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x296>
 8001d58:	e1a5      	b.n	80020a6 <__aeabi_dsub+0x5e2>
 8001d5a:	000a      	movs	r2, r1
 8001d5c:	4302      	orrs	r2, r0
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x29e>
 8001d60:	e1bb      	b.n	80020da <__aeabi_dsub+0x616>
 8001d62:	464a      	mov	r2, r9
 8001d64:	0759      	lsls	r1, r3, #29
 8001d66:	08d2      	lsrs	r2, r2, #3
 8001d68:	430a      	orrs	r2, r1
 8001d6a:	08db      	lsrs	r3, r3, #3
 8001d6c:	e027      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 8001d6e:	000a      	movs	r2, r1
 8001d70:	4302      	orrs	r2, r0
 8001d72:	d100      	bne.n	8001d76 <__aeabi_dsub+0x2b2>
 8001d74:	e174      	b.n	8002060 <__aeabi_dsub+0x59c>
 8001d76:	0022      	movs	r2, r4
 8001d78:	3a01      	subs	r2, #1
 8001d7a:	2c01      	cmp	r4, #1
 8001d7c:	d005      	beq.n	8001d8a <__aeabi_dsub+0x2c6>
 8001d7e:	4c1e      	ldr	r4, [pc, #120]	; (8001df8 <__aeabi_dsub+0x334>)
 8001d80:	45a4      	cmp	ip, r4
 8001d82:	d100      	bne.n	8001d86 <__aeabi_dsub+0x2c2>
 8001d84:	e094      	b.n	8001eb0 <__aeabi_dsub+0x3ec>
 8001d86:	4694      	mov	ip, r2
 8001d88:	e759      	b.n	8001c3e <__aeabi_dsub+0x17a>
 8001d8a:	4448      	add	r0, r9
 8001d8c:	4548      	cmp	r0, r9
 8001d8e:	4192      	sbcs	r2, r2
 8001d90:	185b      	adds	r3, r3, r1
 8001d92:	4698      	mov	r8, r3
 8001d94:	0004      	movs	r4, r0
 8001d96:	4252      	negs	r2, r2
 8001d98:	4490      	add	r8, r2
 8001d9a:	4643      	mov	r3, r8
 8001d9c:	2602      	movs	r6, #2
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	d500      	bpl.n	8001da4 <__aeabi_dsub+0x2e0>
 8001da2:	e0c4      	b.n	8001f2e <__aeabi_dsub+0x46a>
 8001da4:	3e01      	subs	r6, #1
 8001da6:	0763      	lsls	r3, r4, #29
 8001da8:	d000      	beq.n	8001dac <__aeabi_dsub+0x2e8>
 8001daa:	e711      	b.n	8001bd0 <__aeabi_dsub+0x10c>
 8001dac:	4643      	mov	r3, r8
 8001dae:	46b4      	mov	ip, r6
 8001db0:	0759      	lsls	r1, r3, #29
 8001db2:	08e2      	lsrs	r2, r4, #3
 8001db4:	430a      	orrs	r2, r1
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	490f      	ldr	r1, [pc, #60]	; (8001df8 <__aeabi_dsub+0x334>)
 8001dba:	458c      	cmp	ip, r1
 8001dbc:	d040      	beq.n	8001e40 <__aeabi_dsub+0x37c>
 8001dbe:	4661      	mov	r1, ip
 8001dc0:	031b      	lsls	r3, r3, #12
 8001dc2:	0549      	lsls	r1, r1, #21
 8001dc4:	0b1b      	lsrs	r3, r3, #12
 8001dc6:	0d49      	lsrs	r1, r1, #21
 8001dc8:	e720      	b.n	8001c0c <__aeabi_dsub+0x148>
 8001dca:	4301      	orrs	r1, r0
 8001dcc:	000c      	movs	r4, r1
 8001dce:	1e61      	subs	r1, r4, #1
 8001dd0:	418c      	sbcs	r4, r1
 8001dd2:	444c      	add	r4, r9
 8001dd4:	454c      	cmp	r4, r9
 8001dd6:	4192      	sbcs	r2, r2
 8001dd8:	4252      	negs	r2, r2
 8001dda:	4690      	mov	r8, r2
 8001ddc:	4498      	add	r8, r3
 8001dde:	4643      	mov	r3, r8
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	d5e0      	bpl.n	8001da6 <__aeabi_dsub+0x2e2>
 8001de4:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <__aeabi_dsub+0x334>)
 8001de6:	3601      	adds	r6, #1
 8001de8:	429e      	cmp	r6, r3
 8001dea:	d000      	beq.n	8001dee <__aeabi_dsub+0x32a>
 8001dec:	e09f      	b.n	8001f2e <__aeabi_dsub+0x46a>
 8001dee:	0031      	movs	r1, r6
 8001df0:	2300      	movs	r3, #0
 8001df2:	2200      	movs	r2, #0
 8001df4:	e70a      	b.n	8001c0c <__aeabi_dsub+0x148>
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	000007ff 	.word	0x000007ff
 8001dfc:	ff7fffff 	.word	0xff7fffff
 8001e00:	fffff801 	.word	0xfffff801
 8001e04:	000007fe 	.word	0x000007fe
 8001e08:	2a00      	cmp	r2, #0
 8001e0a:	d100      	bne.n	8001e0e <__aeabi_dsub+0x34a>
 8001e0c:	e160      	b.n	80020d0 <__aeabi_dsub+0x60c>
 8001e0e:	000a      	movs	r2, r1
 8001e10:	4302      	orrs	r2, r0
 8001e12:	d04d      	beq.n	8001eb0 <__aeabi_dsub+0x3ec>
 8001e14:	464a      	mov	r2, r9
 8001e16:	075c      	lsls	r4, r3, #29
 8001e18:	08d2      	lsrs	r2, r2, #3
 8001e1a:	4322      	orrs	r2, r4
 8001e1c:	2480      	movs	r4, #128	; 0x80
 8001e1e:	08db      	lsrs	r3, r3, #3
 8001e20:	0324      	lsls	r4, r4, #12
 8001e22:	4223      	tst	r3, r4
 8001e24:	d007      	beq.n	8001e36 <__aeabi_dsub+0x372>
 8001e26:	08ce      	lsrs	r6, r1, #3
 8001e28:	4226      	tst	r6, r4
 8001e2a:	d104      	bne.n	8001e36 <__aeabi_dsub+0x372>
 8001e2c:	465d      	mov	r5, fp
 8001e2e:	0033      	movs	r3, r6
 8001e30:	08c2      	lsrs	r2, r0, #3
 8001e32:	0749      	lsls	r1, r1, #29
 8001e34:	430a      	orrs	r2, r1
 8001e36:	0f51      	lsrs	r1, r2, #29
 8001e38:	00d2      	lsls	r2, r2, #3
 8001e3a:	08d2      	lsrs	r2, r2, #3
 8001e3c:	0749      	lsls	r1, r1, #29
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	0011      	movs	r1, r2
 8001e42:	4319      	orrs	r1, r3
 8001e44:	d100      	bne.n	8001e48 <__aeabi_dsub+0x384>
 8001e46:	e1c8      	b.n	80021da <__aeabi_dsub+0x716>
 8001e48:	2180      	movs	r1, #128	; 0x80
 8001e4a:	0309      	lsls	r1, r1, #12
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	031b      	lsls	r3, r3, #12
 8001e50:	49d5      	ldr	r1, [pc, #852]	; (80021a8 <__aeabi_dsub+0x6e4>)
 8001e52:	0b1b      	lsrs	r3, r3, #12
 8001e54:	e6da      	b.n	8001c0c <__aeabi_dsub+0x148>
 8001e56:	49d5      	ldr	r1, [pc, #852]	; (80021ac <__aeabi_dsub+0x6e8>)
 8001e58:	1ab6      	subs	r6, r6, r2
 8001e5a:	400b      	ands	r3, r1
 8001e5c:	4698      	mov	r8, r3
 8001e5e:	e6b5      	b.n	8001bcc <__aeabi_dsub+0x108>
 8001e60:	0020      	movs	r0, r4
 8001e62:	f000 fb3b 	bl	80024dc <__clzsi2>
 8001e66:	0002      	movs	r2, r0
 8001e68:	3218      	adds	r2, #24
 8001e6a:	2a1f      	cmp	r2, #31
 8001e6c:	dc00      	bgt.n	8001e70 <__aeabi_dsub+0x3ac>
 8001e6e:	e68f      	b.n	8001b90 <__aeabi_dsub+0xcc>
 8001e70:	0023      	movs	r3, r4
 8001e72:	3808      	subs	r0, #8
 8001e74:	4083      	lsls	r3, r0
 8001e76:	2400      	movs	r4, #0
 8001e78:	e692      	b.n	8001ba0 <__aeabi_dsub+0xdc>
 8001e7a:	4308      	orrs	r0, r1
 8001e7c:	0002      	movs	r2, r0
 8001e7e:	1e50      	subs	r0, r2, #1
 8001e80:	4182      	sbcs	r2, r0
 8001e82:	e66d      	b.n	8001b60 <__aeabi_dsub+0x9c>
 8001e84:	4cca      	ldr	r4, [pc, #808]	; (80021b0 <__aeabi_dsub+0x6ec>)
 8001e86:	1c72      	adds	r2, r6, #1
 8001e88:	4222      	tst	r2, r4
 8001e8a:	d000      	beq.n	8001e8e <__aeabi_dsub+0x3ca>
 8001e8c:	e0ad      	b.n	8001fea <__aeabi_dsub+0x526>
 8001e8e:	464a      	mov	r2, r9
 8001e90:	431a      	orrs	r2, r3
 8001e92:	2e00      	cmp	r6, #0
 8001e94:	d1b8      	bne.n	8001e08 <__aeabi_dsub+0x344>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x3d8>
 8001e9a:	e158      	b.n	800214e <__aeabi_dsub+0x68a>
 8001e9c:	000a      	movs	r2, r1
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	d000      	beq.n	8001ea4 <__aeabi_dsub+0x3e0>
 8001ea2:	e159      	b.n	8002158 <__aeabi_dsub+0x694>
 8001ea4:	464a      	mov	r2, r9
 8001ea6:	0759      	lsls	r1, r3, #29
 8001ea8:	08d2      	lsrs	r2, r2, #3
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	08db      	lsrs	r3, r3, #3
 8001eae:	e786      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 8001eb0:	464a      	mov	r2, r9
 8001eb2:	0759      	lsls	r1, r3, #29
 8001eb4:	08d2      	lsrs	r2, r2, #3
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	e7c1      	b.n	8001e40 <__aeabi_dsub+0x37c>
 8001ebc:	4dba      	ldr	r5, [pc, #744]	; (80021a8 <__aeabi_dsub+0x6e4>)
 8001ebe:	42aa      	cmp	r2, r5
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x400>
 8001ec2:	e11e      	b.n	8002102 <__aeabi_dsub+0x63e>
 8001ec4:	2580      	movs	r5, #128	; 0x80
 8001ec6:	042d      	lsls	r5, r5, #16
 8001ec8:	432b      	orrs	r3, r5
 8001eca:	4664      	mov	r4, ip
 8001ecc:	2c38      	cmp	r4, #56	; 0x38
 8001ece:	dc5d      	bgt.n	8001f8c <__aeabi_dsub+0x4c8>
 8001ed0:	2c1f      	cmp	r4, #31
 8001ed2:	dd00      	ble.n	8001ed6 <__aeabi_dsub+0x412>
 8001ed4:	e0d0      	b.n	8002078 <__aeabi_dsub+0x5b4>
 8001ed6:	2520      	movs	r5, #32
 8001ed8:	4667      	mov	r7, ip
 8001eda:	1b2d      	subs	r5, r5, r4
 8001edc:	464e      	mov	r6, r9
 8001ede:	001c      	movs	r4, r3
 8001ee0:	40fe      	lsrs	r6, r7
 8001ee2:	40ac      	lsls	r4, r5
 8001ee4:	4334      	orrs	r4, r6
 8001ee6:	464e      	mov	r6, r9
 8001ee8:	40ae      	lsls	r6, r5
 8001eea:	0035      	movs	r5, r6
 8001eec:	40fb      	lsrs	r3, r7
 8001eee:	1e6e      	subs	r6, r5, #1
 8001ef0:	41b5      	sbcs	r5, r6
 8001ef2:	1ac9      	subs	r1, r1, r3
 8001ef4:	432c      	orrs	r4, r5
 8001ef6:	e04e      	b.n	8001f96 <__aeabi_dsub+0x4d2>
 8001ef8:	464a      	mov	r2, r9
 8001efa:	1a14      	subs	r4, r2, r0
 8001efc:	45a1      	cmp	r9, r4
 8001efe:	4192      	sbcs	r2, r2
 8001f00:	4252      	negs	r2, r2
 8001f02:	4690      	mov	r8, r2
 8001f04:	1a5f      	subs	r7, r3, r1
 8001f06:	003a      	movs	r2, r7
 8001f08:	4647      	mov	r7, r8
 8001f0a:	1bd2      	subs	r2, r2, r7
 8001f0c:	4690      	mov	r8, r2
 8001f0e:	0212      	lsls	r2, r2, #8
 8001f10:	d500      	bpl.n	8001f14 <__aeabi_dsub+0x450>
 8001f12:	e08b      	b.n	800202c <__aeabi_dsub+0x568>
 8001f14:	4642      	mov	r2, r8
 8001f16:	4322      	orrs	r2, r4
 8001f18:	d000      	beq.n	8001f1c <__aeabi_dsub+0x458>
 8001f1a:	e630      	b.n	8001b7e <__aeabi_dsub+0xba>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	2500      	movs	r5, #0
 8001f20:	e74d      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 8001f22:	464a      	mov	r2, r9
 8001f24:	0759      	lsls	r1, r3, #29
 8001f26:	08d2      	lsrs	r2, r2, #3
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	08db      	lsrs	r3, r3, #3
 8001f2c:	e744      	b.n	8001db8 <__aeabi_dsub+0x2f4>
 8001f2e:	4642      	mov	r2, r8
 8001f30:	4b9e      	ldr	r3, [pc, #632]	; (80021ac <__aeabi_dsub+0x6e8>)
 8001f32:	0861      	lsrs	r1, r4, #1
 8001f34:	401a      	ands	r2, r3
 8001f36:	0013      	movs	r3, r2
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4014      	ands	r4, r2
 8001f3c:	430c      	orrs	r4, r1
 8001f3e:	07da      	lsls	r2, r3, #31
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	4698      	mov	r8, r3
 8001f44:	4314      	orrs	r4, r2
 8001f46:	e641      	b.n	8001bcc <__aeabi_dsub+0x108>
 8001f48:	001a      	movs	r2, r3
 8001f4a:	3e1f      	subs	r6, #31
 8001f4c:	40f2      	lsrs	r2, r6
 8001f4e:	0016      	movs	r6, r2
 8001f50:	2920      	cmp	r1, #32
 8001f52:	d003      	beq.n	8001f5c <__aeabi_dsub+0x498>
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	1a51      	subs	r1, r2, r1
 8001f58:	408b      	lsls	r3, r1
 8001f5a:	431c      	orrs	r4, r3
 8001f5c:	1e62      	subs	r2, r4, #1
 8001f5e:	4194      	sbcs	r4, r2
 8001f60:	2300      	movs	r3, #0
 8001f62:	4334      	orrs	r4, r6
 8001f64:	4698      	mov	r8, r3
 8001f66:	2600      	movs	r6, #0
 8001f68:	e71d      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 8001f6a:	000c      	movs	r4, r1
 8001f6c:	3a20      	subs	r2, #32
 8001f6e:	40d4      	lsrs	r4, r2
 8001f70:	0022      	movs	r2, r4
 8001f72:	4664      	mov	r4, ip
 8001f74:	2c20      	cmp	r4, #32
 8001f76:	d004      	beq.n	8001f82 <__aeabi_dsub+0x4be>
 8001f78:	2740      	movs	r7, #64	; 0x40
 8001f7a:	1b3f      	subs	r7, r7, r4
 8001f7c:	40b9      	lsls	r1, r7
 8001f7e:	4308      	orrs	r0, r1
 8001f80:	4680      	mov	r8, r0
 8001f82:	4644      	mov	r4, r8
 8001f84:	1e61      	subs	r1, r4, #1
 8001f86:	418c      	sbcs	r4, r1
 8001f88:	4322      	orrs	r2, r4
 8001f8a:	e5e9      	b.n	8001b60 <__aeabi_dsub+0x9c>
 8001f8c:	464c      	mov	r4, r9
 8001f8e:	4323      	orrs	r3, r4
 8001f90:	001c      	movs	r4, r3
 8001f92:	1e63      	subs	r3, r4, #1
 8001f94:	419c      	sbcs	r4, r3
 8001f96:	1b04      	subs	r4, r0, r4
 8001f98:	42a0      	cmp	r0, r4
 8001f9a:	419b      	sbcs	r3, r3
 8001f9c:	425b      	negs	r3, r3
 8001f9e:	1acb      	subs	r3, r1, r3
 8001fa0:	4698      	mov	r8, r3
 8001fa2:	465d      	mov	r5, fp
 8001fa4:	0016      	movs	r6, r2
 8001fa6:	e5e2      	b.n	8001b6e <__aeabi_dsub+0xaa>
 8001fa8:	464e      	mov	r6, r9
 8001faa:	431e      	orrs	r6, r3
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x4ec>
 8001fae:	e0ae      	b.n	800210e <__aeabi_dsub+0x64a>
 8001fb0:	1e66      	subs	r6, r4, #1
 8001fb2:	2c01      	cmp	r4, #1
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x4f4>
 8001fb6:	e0fd      	b.n	80021b4 <__aeabi_dsub+0x6f0>
 8001fb8:	4f7b      	ldr	r7, [pc, #492]	; (80021a8 <__aeabi_dsub+0x6e4>)
 8001fba:	42bc      	cmp	r4, r7
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x4fc>
 8001fbe:	e107      	b.n	80021d0 <__aeabi_dsub+0x70c>
 8001fc0:	46b4      	mov	ip, r6
 8001fc2:	e69b      	b.n	8001cfc <__aeabi_dsub+0x238>
 8001fc4:	4664      	mov	r4, ip
 8001fc6:	2220      	movs	r2, #32
 8001fc8:	1b12      	subs	r2, r2, r4
 8001fca:	000c      	movs	r4, r1
 8001fcc:	4094      	lsls	r4, r2
 8001fce:	0007      	movs	r7, r0
 8001fd0:	4090      	lsls	r0, r2
 8001fd2:	46a0      	mov	r8, r4
 8001fd4:	4664      	mov	r4, ip
 8001fd6:	1e42      	subs	r2, r0, #1
 8001fd8:	4190      	sbcs	r0, r2
 8001fda:	4662      	mov	r2, ip
 8001fdc:	40e7      	lsrs	r7, r4
 8001fde:	4644      	mov	r4, r8
 8001fe0:	40d1      	lsrs	r1, r2
 8001fe2:	433c      	orrs	r4, r7
 8001fe4:	4304      	orrs	r4, r0
 8001fe6:	185b      	adds	r3, r3, r1
 8001fe8:	e6f3      	b.n	8001dd2 <__aeabi_dsub+0x30e>
 8001fea:	4c6f      	ldr	r4, [pc, #444]	; (80021a8 <__aeabi_dsub+0x6e4>)
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x52e>
 8001ff0:	e0d5      	b.n	800219e <__aeabi_dsub+0x6da>
 8001ff2:	4448      	add	r0, r9
 8001ff4:	185b      	adds	r3, r3, r1
 8001ff6:	4548      	cmp	r0, r9
 8001ff8:	4189      	sbcs	r1, r1
 8001ffa:	4249      	negs	r1, r1
 8001ffc:	185b      	adds	r3, r3, r1
 8001ffe:	07dc      	lsls	r4, r3, #31
 8002000:	0840      	lsrs	r0, r0, #1
 8002002:	085b      	lsrs	r3, r3, #1
 8002004:	4698      	mov	r8, r3
 8002006:	0016      	movs	r6, r2
 8002008:	4304      	orrs	r4, r0
 800200a:	e6cc      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 800200c:	2a00      	cmp	r2, #0
 800200e:	d000      	beq.n	8002012 <__aeabi_dsub+0x54e>
 8002010:	e082      	b.n	8002118 <__aeabi_dsub+0x654>
 8002012:	000a      	movs	r2, r1
 8002014:	4302      	orrs	r2, r0
 8002016:	d140      	bne.n	800209a <__aeabi_dsub+0x5d6>
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	2500      	movs	r5, #0
 800201c:	031b      	lsls	r3, r3, #12
 800201e:	e713      	b.n	8001e48 <__aeabi_dsub+0x384>
 8002020:	074b      	lsls	r3, r1, #29
 8002022:	08c2      	lsrs	r2, r0, #3
 8002024:	431a      	orrs	r2, r3
 8002026:	465d      	mov	r5, fp
 8002028:	08cb      	lsrs	r3, r1, #3
 800202a:	e6c5      	b.n	8001db8 <__aeabi_dsub+0x2f4>
 800202c:	464a      	mov	r2, r9
 800202e:	1a84      	subs	r4, r0, r2
 8002030:	42a0      	cmp	r0, r4
 8002032:	4192      	sbcs	r2, r2
 8002034:	1acb      	subs	r3, r1, r3
 8002036:	4252      	negs	r2, r2
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	4698      	mov	r8, r3
 800203c:	465d      	mov	r5, fp
 800203e:	e59e      	b.n	8001b7e <__aeabi_dsub+0xba>
 8002040:	464a      	mov	r2, r9
 8002042:	0759      	lsls	r1, r3, #29
 8002044:	08d2      	lsrs	r2, r2, #3
 8002046:	430a      	orrs	r2, r1
 8002048:	08db      	lsrs	r3, r3, #3
 800204a:	e6f9      	b.n	8001e40 <__aeabi_dsub+0x37c>
 800204c:	464a      	mov	r2, r9
 800204e:	1a14      	subs	r4, r2, r0
 8002050:	45a1      	cmp	r9, r4
 8002052:	4192      	sbcs	r2, r2
 8002054:	1a5b      	subs	r3, r3, r1
 8002056:	4252      	negs	r2, r2
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	4698      	mov	r8, r3
 800205c:	2601      	movs	r6, #1
 800205e:	e586      	b.n	8001b6e <__aeabi_dsub+0xaa>
 8002060:	464a      	mov	r2, r9
 8002062:	0759      	lsls	r1, r3, #29
 8002064:	08d2      	lsrs	r2, r2, #3
 8002066:	430a      	orrs	r2, r1
 8002068:	08db      	lsrs	r3, r3, #3
 800206a:	e6a5      	b.n	8001db8 <__aeabi_dsub+0x2f4>
 800206c:	464c      	mov	r4, r9
 800206e:	4323      	orrs	r3, r4
 8002070:	001c      	movs	r4, r3
 8002072:	1e63      	subs	r3, r4, #1
 8002074:	419c      	sbcs	r4, r3
 8002076:	e65b      	b.n	8001d30 <__aeabi_dsub+0x26c>
 8002078:	4665      	mov	r5, ip
 800207a:	001e      	movs	r6, r3
 800207c:	3d20      	subs	r5, #32
 800207e:	40ee      	lsrs	r6, r5
 8002080:	2c20      	cmp	r4, #32
 8002082:	d005      	beq.n	8002090 <__aeabi_dsub+0x5cc>
 8002084:	2540      	movs	r5, #64	; 0x40
 8002086:	1b2d      	subs	r5, r5, r4
 8002088:	40ab      	lsls	r3, r5
 800208a:	464c      	mov	r4, r9
 800208c:	431c      	orrs	r4, r3
 800208e:	46a2      	mov	sl, r4
 8002090:	4654      	mov	r4, sl
 8002092:	1e63      	subs	r3, r4, #1
 8002094:	419c      	sbcs	r4, r3
 8002096:	4334      	orrs	r4, r6
 8002098:	e77d      	b.n	8001f96 <__aeabi_dsub+0x4d2>
 800209a:	074b      	lsls	r3, r1, #29
 800209c:	08c2      	lsrs	r2, r0, #3
 800209e:	431a      	orrs	r2, r3
 80020a0:	465d      	mov	r5, fp
 80020a2:	08cb      	lsrs	r3, r1, #3
 80020a4:	e6cc      	b.n	8001e40 <__aeabi_dsub+0x37c>
 80020a6:	000a      	movs	r2, r1
 80020a8:	4302      	orrs	r2, r0
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x5ea>
 80020ac:	e736      	b.n	8001f1c <__aeabi_dsub+0x458>
 80020ae:	074b      	lsls	r3, r1, #29
 80020b0:	08c2      	lsrs	r2, r0, #3
 80020b2:	431a      	orrs	r2, r3
 80020b4:	465d      	mov	r5, fp
 80020b6:	08cb      	lsrs	r3, r1, #3
 80020b8:	e681      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 80020ba:	464a      	mov	r2, r9
 80020bc:	1a84      	subs	r4, r0, r2
 80020be:	42a0      	cmp	r0, r4
 80020c0:	4192      	sbcs	r2, r2
 80020c2:	1acb      	subs	r3, r1, r3
 80020c4:	4252      	negs	r2, r2
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	4698      	mov	r8, r3
 80020ca:	465d      	mov	r5, fp
 80020cc:	2601      	movs	r6, #1
 80020ce:	e54e      	b.n	8001b6e <__aeabi_dsub+0xaa>
 80020d0:	074b      	lsls	r3, r1, #29
 80020d2:	08c2      	lsrs	r2, r0, #3
 80020d4:	431a      	orrs	r2, r3
 80020d6:	08cb      	lsrs	r3, r1, #3
 80020d8:	e6b2      	b.n	8001e40 <__aeabi_dsub+0x37c>
 80020da:	464a      	mov	r2, r9
 80020dc:	1a14      	subs	r4, r2, r0
 80020de:	45a1      	cmp	r9, r4
 80020e0:	4192      	sbcs	r2, r2
 80020e2:	1a5f      	subs	r7, r3, r1
 80020e4:	4252      	negs	r2, r2
 80020e6:	1aba      	subs	r2, r7, r2
 80020e8:	4690      	mov	r8, r2
 80020ea:	0212      	lsls	r2, r2, #8
 80020ec:	d56b      	bpl.n	80021c6 <__aeabi_dsub+0x702>
 80020ee:	464a      	mov	r2, r9
 80020f0:	1a84      	subs	r4, r0, r2
 80020f2:	42a0      	cmp	r0, r4
 80020f4:	4192      	sbcs	r2, r2
 80020f6:	1acb      	subs	r3, r1, r3
 80020f8:	4252      	negs	r2, r2
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	4698      	mov	r8, r3
 80020fe:	465d      	mov	r5, fp
 8002100:	e564      	b.n	8001bcc <__aeabi_dsub+0x108>
 8002102:	074b      	lsls	r3, r1, #29
 8002104:	08c2      	lsrs	r2, r0, #3
 8002106:	431a      	orrs	r2, r3
 8002108:	465d      	mov	r5, fp
 800210a:	08cb      	lsrs	r3, r1, #3
 800210c:	e698      	b.n	8001e40 <__aeabi_dsub+0x37c>
 800210e:	074b      	lsls	r3, r1, #29
 8002110:	08c2      	lsrs	r2, r0, #3
 8002112:	431a      	orrs	r2, r3
 8002114:	08cb      	lsrs	r3, r1, #3
 8002116:	e64f      	b.n	8001db8 <__aeabi_dsub+0x2f4>
 8002118:	000a      	movs	r2, r1
 800211a:	4302      	orrs	r2, r0
 800211c:	d090      	beq.n	8002040 <__aeabi_dsub+0x57c>
 800211e:	464a      	mov	r2, r9
 8002120:	075c      	lsls	r4, r3, #29
 8002122:	08d2      	lsrs	r2, r2, #3
 8002124:	4314      	orrs	r4, r2
 8002126:	2280      	movs	r2, #128	; 0x80
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	0312      	lsls	r2, r2, #12
 800212c:	4213      	tst	r3, r2
 800212e:	d008      	beq.n	8002142 <__aeabi_dsub+0x67e>
 8002130:	08ce      	lsrs	r6, r1, #3
 8002132:	4216      	tst	r6, r2
 8002134:	d105      	bne.n	8002142 <__aeabi_dsub+0x67e>
 8002136:	08c0      	lsrs	r0, r0, #3
 8002138:	0749      	lsls	r1, r1, #29
 800213a:	4308      	orrs	r0, r1
 800213c:	0004      	movs	r4, r0
 800213e:	465d      	mov	r5, fp
 8002140:	0033      	movs	r3, r6
 8002142:	0f61      	lsrs	r1, r4, #29
 8002144:	00e2      	lsls	r2, r4, #3
 8002146:	0749      	lsls	r1, r1, #29
 8002148:	08d2      	lsrs	r2, r2, #3
 800214a:	430a      	orrs	r2, r1
 800214c:	e678      	b.n	8001e40 <__aeabi_dsub+0x37c>
 800214e:	074b      	lsls	r3, r1, #29
 8002150:	08c2      	lsrs	r2, r0, #3
 8002152:	431a      	orrs	r2, r3
 8002154:	08cb      	lsrs	r3, r1, #3
 8002156:	e632      	b.n	8001dbe <__aeabi_dsub+0x2fa>
 8002158:	4448      	add	r0, r9
 800215a:	185b      	adds	r3, r3, r1
 800215c:	4548      	cmp	r0, r9
 800215e:	4192      	sbcs	r2, r2
 8002160:	4698      	mov	r8, r3
 8002162:	4252      	negs	r2, r2
 8002164:	4490      	add	r8, r2
 8002166:	4643      	mov	r3, r8
 8002168:	0004      	movs	r4, r0
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	d400      	bmi.n	8002170 <__aeabi_dsub+0x6ac>
 800216e:	e61a      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 8002170:	4642      	mov	r2, r8
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <__aeabi_dsub+0x6e8>)
 8002174:	2601      	movs	r6, #1
 8002176:	401a      	ands	r2, r3
 8002178:	4690      	mov	r8, r2
 800217a:	e614      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 800217c:	4666      	mov	r6, ip
 800217e:	001f      	movs	r7, r3
 8002180:	3e20      	subs	r6, #32
 8002182:	40f7      	lsrs	r7, r6
 8002184:	2c20      	cmp	r4, #32
 8002186:	d005      	beq.n	8002194 <__aeabi_dsub+0x6d0>
 8002188:	2640      	movs	r6, #64	; 0x40
 800218a:	1b36      	subs	r6, r6, r4
 800218c:	40b3      	lsls	r3, r6
 800218e:	464c      	mov	r4, r9
 8002190:	431c      	orrs	r4, r3
 8002192:	46a2      	mov	sl, r4
 8002194:	4654      	mov	r4, sl
 8002196:	1e63      	subs	r3, r4, #1
 8002198:	419c      	sbcs	r4, r3
 800219a:	433c      	orrs	r4, r7
 800219c:	e5c8      	b.n	8001d30 <__aeabi_dsub+0x26c>
 800219e:	0011      	movs	r1, r2
 80021a0:	2300      	movs	r3, #0
 80021a2:	2200      	movs	r2, #0
 80021a4:	e532      	b.n	8001c0c <__aeabi_dsub+0x148>
 80021a6:	46c0      	nop			; (mov r8, r8)
 80021a8:	000007ff 	.word	0x000007ff
 80021ac:	ff7fffff 	.word	0xff7fffff
 80021b0:	000007fe 	.word	0x000007fe
 80021b4:	464a      	mov	r2, r9
 80021b6:	1814      	adds	r4, r2, r0
 80021b8:	4284      	cmp	r4, r0
 80021ba:	4192      	sbcs	r2, r2
 80021bc:	185b      	adds	r3, r3, r1
 80021be:	4698      	mov	r8, r3
 80021c0:	4252      	negs	r2, r2
 80021c2:	4490      	add	r8, r2
 80021c4:	e5e9      	b.n	8001d9a <__aeabi_dsub+0x2d6>
 80021c6:	4642      	mov	r2, r8
 80021c8:	4322      	orrs	r2, r4
 80021ca:	d100      	bne.n	80021ce <__aeabi_dsub+0x70a>
 80021cc:	e6a6      	b.n	8001f1c <__aeabi_dsub+0x458>
 80021ce:	e5ea      	b.n	8001da6 <__aeabi_dsub+0x2e2>
 80021d0:	074b      	lsls	r3, r1, #29
 80021d2:	08c2      	lsrs	r2, r0, #3
 80021d4:	431a      	orrs	r2, r3
 80021d6:	08cb      	lsrs	r3, r1, #3
 80021d8:	e632      	b.n	8001e40 <__aeabi_dsub+0x37c>
 80021da:	2200      	movs	r2, #0
 80021dc:	4901      	ldr	r1, [pc, #4]	; (80021e4 <__aeabi_dsub+0x720>)
 80021de:	0013      	movs	r3, r2
 80021e0:	e514      	b.n	8001c0c <__aeabi_dsub+0x148>
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	000007ff 	.word	0x000007ff

080021e8 <__aeabi_dcmpun>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	0005      	movs	r5, r0
 80021ec:	480c      	ldr	r0, [pc, #48]	; (8002220 <__aeabi_dcmpun+0x38>)
 80021ee:	030c      	lsls	r4, r1, #12
 80021f0:	0016      	movs	r6, r2
 80021f2:	0049      	lsls	r1, r1, #1
 80021f4:	031a      	lsls	r2, r3, #12
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	0b24      	lsrs	r4, r4, #12
 80021fa:	0d49      	lsrs	r1, r1, #21
 80021fc:	0b12      	lsrs	r2, r2, #12
 80021fe:	0d5b      	lsrs	r3, r3, #21
 8002200:	4281      	cmp	r1, r0
 8002202:	d008      	beq.n	8002216 <__aeabi_dcmpun+0x2e>
 8002204:	4906      	ldr	r1, [pc, #24]	; (8002220 <__aeabi_dcmpun+0x38>)
 8002206:	2000      	movs	r0, #0
 8002208:	428b      	cmp	r3, r1
 800220a:	d103      	bne.n	8002214 <__aeabi_dcmpun+0x2c>
 800220c:	4332      	orrs	r2, r6
 800220e:	0010      	movs	r0, r2
 8002210:	1e42      	subs	r2, r0, #1
 8002212:	4190      	sbcs	r0, r2
 8002214:	bd70      	pop	{r4, r5, r6, pc}
 8002216:	2001      	movs	r0, #1
 8002218:	432c      	orrs	r4, r5
 800221a:	d1fb      	bne.n	8002214 <__aeabi_dcmpun+0x2c>
 800221c:	e7f2      	b.n	8002204 <__aeabi_dcmpun+0x1c>
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	000007ff 	.word	0x000007ff

08002224 <__aeabi_d2iz>:
 8002224:	000a      	movs	r2, r1
 8002226:	b530      	push	{r4, r5, lr}
 8002228:	4c13      	ldr	r4, [pc, #76]	; (8002278 <__aeabi_d2iz+0x54>)
 800222a:	0053      	lsls	r3, r2, #1
 800222c:	0309      	lsls	r1, r1, #12
 800222e:	0005      	movs	r5, r0
 8002230:	0b09      	lsrs	r1, r1, #12
 8002232:	2000      	movs	r0, #0
 8002234:	0d5b      	lsrs	r3, r3, #21
 8002236:	0fd2      	lsrs	r2, r2, #31
 8002238:	42a3      	cmp	r3, r4
 800223a:	dd04      	ble.n	8002246 <__aeabi_d2iz+0x22>
 800223c:	480f      	ldr	r0, [pc, #60]	; (800227c <__aeabi_d2iz+0x58>)
 800223e:	4283      	cmp	r3, r0
 8002240:	dd02      	ble.n	8002248 <__aeabi_d2iz+0x24>
 8002242:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <__aeabi_d2iz+0x5c>)
 8002244:	18d0      	adds	r0, r2, r3
 8002246:	bd30      	pop	{r4, r5, pc}
 8002248:	2080      	movs	r0, #128	; 0x80
 800224a:	0340      	lsls	r0, r0, #13
 800224c:	4301      	orrs	r1, r0
 800224e:	480d      	ldr	r0, [pc, #52]	; (8002284 <__aeabi_d2iz+0x60>)
 8002250:	1ac0      	subs	r0, r0, r3
 8002252:	281f      	cmp	r0, #31
 8002254:	dd08      	ble.n	8002268 <__aeabi_d2iz+0x44>
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <__aeabi_d2iz+0x64>)
 8002258:	1ac3      	subs	r3, r0, r3
 800225a:	40d9      	lsrs	r1, r3
 800225c:	000b      	movs	r3, r1
 800225e:	4258      	negs	r0, r3
 8002260:	2a00      	cmp	r2, #0
 8002262:	d1f0      	bne.n	8002246 <__aeabi_d2iz+0x22>
 8002264:	0018      	movs	r0, r3
 8002266:	e7ee      	b.n	8002246 <__aeabi_d2iz+0x22>
 8002268:	4c08      	ldr	r4, [pc, #32]	; (800228c <__aeabi_d2iz+0x68>)
 800226a:	40c5      	lsrs	r5, r0
 800226c:	46a4      	mov	ip, r4
 800226e:	4463      	add	r3, ip
 8002270:	4099      	lsls	r1, r3
 8002272:	000b      	movs	r3, r1
 8002274:	432b      	orrs	r3, r5
 8002276:	e7f2      	b.n	800225e <__aeabi_d2iz+0x3a>
 8002278:	000003fe 	.word	0x000003fe
 800227c:	0000041d 	.word	0x0000041d
 8002280:	7fffffff 	.word	0x7fffffff
 8002284:	00000433 	.word	0x00000433
 8002288:	00000413 	.word	0x00000413
 800228c:	fffffbed 	.word	0xfffffbed

08002290 <__aeabi_i2d>:
 8002290:	b570      	push	{r4, r5, r6, lr}
 8002292:	2800      	cmp	r0, #0
 8002294:	d016      	beq.n	80022c4 <__aeabi_i2d+0x34>
 8002296:	17c3      	asrs	r3, r0, #31
 8002298:	18c5      	adds	r5, r0, r3
 800229a:	405d      	eors	r5, r3
 800229c:	0fc4      	lsrs	r4, r0, #31
 800229e:	0028      	movs	r0, r5
 80022a0:	f000 f91c 	bl	80024dc <__clzsi2>
 80022a4:	4a11      	ldr	r2, [pc, #68]	; (80022ec <__aeabi_i2d+0x5c>)
 80022a6:	1a12      	subs	r2, r2, r0
 80022a8:	280a      	cmp	r0, #10
 80022aa:	dc16      	bgt.n	80022da <__aeabi_i2d+0x4a>
 80022ac:	0003      	movs	r3, r0
 80022ae:	002e      	movs	r6, r5
 80022b0:	3315      	adds	r3, #21
 80022b2:	409e      	lsls	r6, r3
 80022b4:	230b      	movs	r3, #11
 80022b6:	1a18      	subs	r0, r3, r0
 80022b8:	40c5      	lsrs	r5, r0
 80022ba:	0553      	lsls	r3, r2, #21
 80022bc:	032d      	lsls	r5, r5, #12
 80022be:	0b2d      	lsrs	r5, r5, #12
 80022c0:	0d5b      	lsrs	r3, r3, #21
 80022c2:	e003      	b.n	80022cc <__aeabi_i2d+0x3c>
 80022c4:	2400      	movs	r4, #0
 80022c6:	2300      	movs	r3, #0
 80022c8:	2500      	movs	r5, #0
 80022ca:	2600      	movs	r6, #0
 80022cc:	051b      	lsls	r3, r3, #20
 80022ce:	432b      	orrs	r3, r5
 80022d0:	07e4      	lsls	r4, r4, #31
 80022d2:	4323      	orrs	r3, r4
 80022d4:	0030      	movs	r0, r6
 80022d6:	0019      	movs	r1, r3
 80022d8:	bd70      	pop	{r4, r5, r6, pc}
 80022da:	380b      	subs	r0, #11
 80022dc:	4085      	lsls	r5, r0
 80022de:	0553      	lsls	r3, r2, #21
 80022e0:	032d      	lsls	r5, r5, #12
 80022e2:	2600      	movs	r6, #0
 80022e4:	0b2d      	lsrs	r5, r5, #12
 80022e6:	0d5b      	lsrs	r3, r3, #21
 80022e8:	e7f0      	b.n	80022cc <__aeabi_i2d+0x3c>
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	0000041e 	.word	0x0000041e

080022f0 <__aeabi_ui2d>:
 80022f0:	b510      	push	{r4, lr}
 80022f2:	1e04      	subs	r4, r0, #0
 80022f4:	d010      	beq.n	8002318 <__aeabi_ui2d+0x28>
 80022f6:	f000 f8f1 	bl	80024dc <__clzsi2>
 80022fa:	4b0f      	ldr	r3, [pc, #60]	; (8002338 <__aeabi_ui2d+0x48>)
 80022fc:	1a1b      	subs	r3, r3, r0
 80022fe:	280a      	cmp	r0, #10
 8002300:	dc11      	bgt.n	8002326 <__aeabi_ui2d+0x36>
 8002302:	220b      	movs	r2, #11
 8002304:	0021      	movs	r1, r4
 8002306:	1a12      	subs	r2, r2, r0
 8002308:	40d1      	lsrs	r1, r2
 800230a:	3015      	adds	r0, #21
 800230c:	030a      	lsls	r2, r1, #12
 800230e:	055b      	lsls	r3, r3, #21
 8002310:	4084      	lsls	r4, r0
 8002312:	0b12      	lsrs	r2, r2, #12
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	e001      	b.n	800231c <__aeabi_ui2d+0x2c>
 8002318:	2300      	movs	r3, #0
 800231a:	2200      	movs	r2, #0
 800231c:	051b      	lsls	r3, r3, #20
 800231e:	4313      	orrs	r3, r2
 8002320:	0020      	movs	r0, r4
 8002322:	0019      	movs	r1, r3
 8002324:	bd10      	pop	{r4, pc}
 8002326:	0022      	movs	r2, r4
 8002328:	380b      	subs	r0, #11
 800232a:	4082      	lsls	r2, r0
 800232c:	055b      	lsls	r3, r3, #21
 800232e:	0312      	lsls	r2, r2, #12
 8002330:	2400      	movs	r4, #0
 8002332:	0b12      	lsrs	r2, r2, #12
 8002334:	0d5b      	lsrs	r3, r3, #21
 8002336:	e7f1      	b.n	800231c <__aeabi_ui2d+0x2c>
 8002338:	0000041e 	.word	0x0000041e

0800233c <__aeabi_f2d>:
 800233c:	b570      	push	{r4, r5, r6, lr}
 800233e:	0043      	lsls	r3, r0, #1
 8002340:	0246      	lsls	r6, r0, #9
 8002342:	0fc4      	lsrs	r4, r0, #31
 8002344:	20fe      	movs	r0, #254	; 0xfe
 8002346:	0e1b      	lsrs	r3, r3, #24
 8002348:	1c59      	adds	r1, r3, #1
 800234a:	0a75      	lsrs	r5, r6, #9
 800234c:	4208      	tst	r0, r1
 800234e:	d00c      	beq.n	800236a <__aeabi_f2d+0x2e>
 8002350:	22e0      	movs	r2, #224	; 0xe0
 8002352:	0092      	lsls	r2, r2, #2
 8002354:	4694      	mov	ip, r2
 8002356:	076d      	lsls	r5, r5, #29
 8002358:	0b36      	lsrs	r6, r6, #12
 800235a:	4463      	add	r3, ip
 800235c:	051b      	lsls	r3, r3, #20
 800235e:	4333      	orrs	r3, r6
 8002360:	07e4      	lsls	r4, r4, #31
 8002362:	4323      	orrs	r3, r4
 8002364:	0028      	movs	r0, r5
 8002366:	0019      	movs	r1, r3
 8002368:	bd70      	pop	{r4, r5, r6, pc}
 800236a:	2b00      	cmp	r3, #0
 800236c:	d114      	bne.n	8002398 <__aeabi_f2d+0x5c>
 800236e:	2d00      	cmp	r5, #0
 8002370:	d01b      	beq.n	80023aa <__aeabi_f2d+0x6e>
 8002372:	0028      	movs	r0, r5
 8002374:	f000 f8b2 	bl	80024dc <__clzsi2>
 8002378:	280a      	cmp	r0, #10
 800237a:	dc1c      	bgt.n	80023b6 <__aeabi_f2d+0x7a>
 800237c:	230b      	movs	r3, #11
 800237e:	002a      	movs	r2, r5
 8002380:	1a1b      	subs	r3, r3, r0
 8002382:	40da      	lsrs	r2, r3
 8002384:	0003      	movs	r3, r0
 8002386:	3315      	adds	r3, #21
 8002388:	409d      	lsls	r5, r3
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <__aeabi_f2d+0x88>)
 800238c:	0312      	lsls	r2, r2, #12
 800238e:	1a1b      	subs	r3, r3, r0
 8002390:	055b      	lsls	r3, r3, #21
 8002392:	0b16      	lsrs	r6, r2, #12
 8002394:	0d5b      	lsrs	r3, r3, #21
 8002396:	e7e1      	b.n	800235c <__aeabi_f2d+0x20>
 8002398:	2d00      	cmp	r5, #0
 800239a:	d009      	beq.n	80023b0 <__aeabi_f2d+0x74>
 800239c:	0b32      	lsrs	r2, r6, #12
 800239e:	2680      	movs	r6, #128	; 0x80
 80023a0:	0336      	lsls	r6, r6, #12
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <__aeabi_f2d+0x8c>)
 80023a4:	076d      	lsls	r5, r5, #29
 80023a6:	4316      	orrs	r6, r2
 80023a8:	e7d8      	b.n	800235c <__aeabi_f2d+0x20>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2600      	movs	r6, #0
 80023ae:	e7d5      	b.n	800235c <__aeabi_f2d+0x20>
 80023b0:	2600      	movs	r6, #0
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <__aeabi_f2d+0x8c>)
 80023b4:	e7d2      	b.n	800235c <__aeabi_f2d+0x20>
 80023b6:	0003      	movs	r3, r0
 80023b8:	002a      	movs	r2, r5
 80023ba:	3b0b      	subs	r3, #11
 80023bc:	409a      	lsls	r2, r3
 80023be:	2500      	movs	r5, #0
 80023c0:	e7e3      	b.n	800238a <__aeabi_f2d+0x4e>
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	00000389 	.word	0x00000389
 80023c8:	000007ff 	.word	0x000007ff

080023cc <__aeabi_d2f>:
 80023cc:	0002      	movs	r2, r0
 80023ce:	004b      	lsls	r3, r1, #1
 80023d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d2:	0308      	lsls	r0, r1, #12
 80023d4:	0d5b      	lsrs	r3, r3, #21
 80023d6:	4e3d      	ldr	r6, [pc, #244]	; (80024cc <__aeabi_d2f+0x100>)
 80023d8:	0fcc      	lsrs	r4, r1, #31
 80023da:	0a40      	lsrs	r0, r0, #9
 80023dc:	0f51      	lsrs	r1, r2, #29
 80023de:	1c5f      	adds	r7, r3, #1
 80023e0:	4308      	orrs	r0, r1
 80023e2:	00d5      	lsls	r5, r2, #3
 80023e4:	4237      	tst	r7, r6
 80023e6:	d00a      	beq.n	80023fe <__aeabi_d2f+0x32>
 80023e8:	4939      	ldr	r1, [pc, #228]	; (80024d0 <__aeabi_d2f+0x104>)
 80023ea:	185e      	adds	r6, r3, r1
 80023ec:	2efe      	cmp	r6, #254	; 0xfe
 80023ee:	dd16      	ble.n	800241e <__aeabi_d2f+0x52>
 80023f0:	23ff      	movs	r3, #255	; 0xff
 80023f2:	2100      	movs	r1, #0
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	430b      	orrs	r3, r1
 80023f8:	07e0      	lsls	r0, r4, #31
 80023fa:	4318      	orrs	r0, r3
 80023fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <__aeabi_d2f+0x44>
 8002402:	4328      	orrs	r0, r5
 8002404:	d027      	beq.n	8002456 <__aeabi_d2f+0x8a>
 8002406:	2105      	movs	r1, #5
 8002408:	0189      	lsls	r1, r1, #6
 800240a:	0a49      	lsrs	r1, r1, #9
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e7f1      	b.n	80023f4 <__aeabi_d2f+0x28>
 8002410:	4305      	orrs	r5, r0
 8002412:	d0ed      	beq.n	80023f0 <__aeabi_d2f+0x24>
 8002414:	2180      	movs	r1, #128	; 0x80
 8002416:	03c9      	lsls	r1, r1, #15
 8002418:	23ff      	movs	r3, #255	; 0xff
 800241a:	4301      	orrs	r1, r0
 800241c:	e7ea      	b.n	80023f4 <__aeabi_d2f+0x28>
 800241e:	2e00      	cmp	r6, #0
 8002420:	dd1c      	ble.n	800245c <__aeabi_d2f+0x90>
 8002422:	0192      	lsls	r2, r2, #6
 8002424:	0011      	movs	r1, r2
 8002426:	1e4a      	subs	r2, r1, #1
 8002428:	4191      	sbcs	r1, r2
 800242a:	00c0      	lsls	r0, r0, #3
 800242c:	0f6d      	lsrs	r5, r5, #29
 800242e:	4301      	orrs	r1, r0
 8002430:	4329      	orrs	r1, r5
 8002432:	074b      	lsls	r3, r1, #29
 8002434:	d048      	beq.n	80024c8 <__aeabi_d2f+0xfc>
 8002436:	230f      	movs	r3, #15
 8002438:	400b      	ands	r3, r1
 800243a:	2b04      	cmp	r3, #4
 800243c:	d000      	beq.n	8002440 <__aeabi_d2f+0x74>
 800243e:	3104      	adds	r1, #4
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	04db      	lsls	r3, r3, #19
 8002444:	400b      	ands	r3, r1
 8002446:	d03f      	beq.n	80024c8 <__aeabi_d2f+0xfc>
 8002448:	1c72      	adds	r2, r6, #1
 800244a:	2efe      	cmp	r6, #254	; 0xfe
 800244c:	d0d0      	beq.n	80023f0 <__aeabi_d2f+0x24>
 800244e:	0189      	lsls	r1, r1, #6
 8002450:	0a49      	lsrs	r1, r1, #9
 8002452:	b2d3      	uxtb	r3, r2
 8002454:	e7ce      	b.n	80023f4 <__aeabi_d2f+0x28>
 8002456:	2300      	movs	r3, #0
 8002458:	2100      	movs	r1, #0
 800245a:	e7cb      	b.n	80023f4 <__aeabi_d2f+0x28>
 800245c:	0032      	movs	r2, r6
 800245e:	3217      	adds	r2, #23
 8002460:	db22      	blt.n	80024a8 <__aeabi_d2f+0xdc>
 8002462:	2180      	movs	r1, #128	; 0x80
 8002464:	221e      	movs	r2, #30
 8002466:	0409      	lsls	r1, r1, #16
 8002468:	4308      	orrs	r0, r1
 800246a:	1b92      	subs	r2, r2, r6
 800246c:	2a1f      	cmp	r2, #31
 800246e:	dd1d      	ble.n	80024ac <__aeabi_d2f+0xe0>
 8002470:	2102      	movs	r1, #2
 8002472:	4249      	negs	r1, r1
 8002474:	1b8e      	subs	r6, r1, r6
 8002476:	0001      	movs	r1, r0
 8002478:	40f1      	lsrs	r1, r6
 800247a:	000e      	movs	r6, r1
 800247c:	2a20      	cmp	r2, #32
 800247e:	d004      	beq.n	800248a <__aeabi_d2f+0xbe>
 8002480:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <__aeabi_d2f+0x108>)
 8002482:	4694      	mov	ip, r2
 8002484:	4463      	add	r3, ip
 8002486:	4098      	lsls	r0, r3
 8002488:	4305      	orrs	r5, r0
 800248a:	0029      	movs	r1, r5
 800248c:	1e4d      	subs	r5, r1, #1
 800248e:	41a9      	sbcs	r1, r5
 8002490:	4331      	orrs	r1, r6
 8002492:	2600      	movs	r6, #0
 8002494:	074b      	lsls	r3, r1, #29
 8002496:	d1ce      	bne.n	8002436 <__aeabi_d2f+0x6a>
 8002498:	2080      	movs	r0, #128	; 0x80
 800249a:	000b      	movs	r3, r1
 800249c:	04c0      	lsls	r0, r0, #19
 800249e:	2201      	movs	r2, #1
 80024a0:	4003      	ands	r3, r0
 80024a2:	4201      	tst	r1, r0
 80024a4:	d1d3      	bne.n	800244e <__aeabi_d2f+0x82>
 80024a6:	e7af      	b.n	8002408 <__aeabi_d2f+0x3c>
 80024a8:	2300      	movs	r3, #0
 80024aa:	e7ac      	b.n	8002406 <__aeabi_d2f+0x3a>
 80024ac:	490a      	ldr	r1, [pc, #40]	; (80024d8 <__aeabi_d2f+0x10c>)
 80024ae:	468c      	mov	ip, r1
 80024b0:	0029      	movs	r1, r5
 80024b2:	4463      	add	r3, ip
 80024b4:	40d1      	lsrs	r1, r2
 80024b6:	409d      	lsls	r5, r3
 80024b8:	000a      	movs	r2, r1
 80024ba:	0029      	movs	r1, r5
 80024bc:	4098      	lsls	r0, r3
 80024be:	1e4d      	subs	r5, r1, #1
 80024c0:	41a9      	sbcs	r1, r5
 80024c2:	4301      	orrs	r1, r0
 80024c4:	4311      	orrs	r1, r2
 80024c6:	e7e4      	b.n	8002492 <__aeabi_d2f+0xc6>
 80024c8:	0033      	movs	r3, r6
 80024ca:	e79d      	b.n	8002408 <__aeabi_d2f+0x3c>
 80024cc:	000007fe 	.word	0x000007fe
 80024d0:	fffffc80 	.word	0xfffffc80
 80024d4:	fffffca2 	.word	0xfffffca2
 80024d8:	fffffc82 	.word	0xfffffc82

080024dc <__clzsi2>:
 80024dc:	211c      	movs	r1, #28
 80024de:	2301      	movs	r3, #1
 80024e0:	041b      	lsls	r3, r3, #16
 80024e2:	4298      	cmp	r0, r3
 80024e4:	d301      	bcc.n	80024ea <__clzsi2+0xe>
 80024e6:	0c00      	lsrs	r0, r0, #16
 80024e8:	3910      	subs	r1, #16
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	4298      	cmp	r0, r3
 80024ee:	d301      	bcc.n	80024f4 <__clzsi2+0x18>
 80024f0:	0a00      	lsrs	r0, r0, #8
 80024f2:	3908      	subs	r1, #8
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	4298      	cmp	r0, r3
 80024f8:	d301      	bcc.n	80024fe <__clzsi2+0x22>
 80024fa:	0900      	lsrs	r0, r0, #4
 80024fc:	3904      	subs	r1, #4
 80024fe:	a202      	add	r2, pc, #8	; (adr r2, 8002508 <__clzsi2+0x2c>)
 8002500:	5c10      	ldrb	r0, [r2, r0]
 8002502:	1840      	adds	r0, r0, r1
 8002504:	4770      	bx	lr
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	02020304 	.word	0x02020304
 800250c:	01010101 	.word	0x01010101
	...

08002518 <__clzdi2>:
 8002518:	b510      	push	{r4, lr}
 800251a:	2900      	cmp	r1, #0
 800251c:	d103      	bne.n	8002526 <__clzdi2+0xe>
 800251e:	f7ff ffdd 	bl	80024dc <__clzsi2>
 8002522:	3020      	adds	r0, #32
 8002524:	e002      	b.n	800252c <__clzdi2+0x14>
 8002526:	1c08      	adds	r0, r1, #0
 8002528:	f7ff ffd8 	bl	80024dc <__clzsi2>
 800252c:	bd10      	pop	{r4, pc}
 800252e:	46c0      	nop			; (mov r8, r8)

08002530 <ble_init>:

/*********************************FUNCTIONS*****************************************/


void ble_init(UART_HandleTypeDef* uart, uint8_t rx_header_size, uint32_t timeout_ms)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	200b      	movs	r0, #11
 800253c:	183b      	adds	r3, r7, r0
 800253e:	1c0a      	adds	r2, r1, #0
 8002540:	701a      	strb	r2, [r3, #0]
	ble.uart = uart;
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <ble_init+0xf8>)
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	601a      	str	r2, [r3, #0]
	ble.rx_head_size = rx_header_size;
 8002548:	4b37      	ldr	r3, [pc, #220]	; (8002628 <ble_init+0xf8>)
 800254a:	183a      	adds	r2, r7, r0
 800254c:	7812      	ldrb	r2, [r2, #0]
 800254e:	711a      	strb	r2, [r3, #4]
	ble.timeout_ms = timeout_ms;
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <ble_init+0xf8>)
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	609a      	str	r2, [r3, #8]
	ble.init_flag = 1;
 8002556:	4b34      	ldr	r3, [pc, #208]	; (8002628 <ble_init+0xf8>)
 8002558:	2201      	movs	r2, #1
 800255a:	731a      	strb	r2, [r3, #12]

	ble_rx_all.one_led_on.cmd_id = LED_CMD_ID;
 800255c:	4b33      	ldr	r3, [pc, #204]	; (800262c <ble_init+0xfc>)
 800255e:	22af      	movs	r2, #175	; 0xaf
 8002560:	701a      	strb	r2, [r3, #0]
	ble_rx_all.one_led_on.msg_id = ONE_LED_MSG_ID;
 8002562:	4b32      	ldr	r3, [pc, #200]	; (800262c <ble_init+0xfc>)
 8002564:	4a32      	ldr	r2, [pc, #200]	; (8002630 <ble_init+0x100>)
 8002566:	805a      	strh	r2, [r3, #2]
	ble_rx_all.one_led_on.func_p = one_led_on_fp;
 8002568:	4b30      	ldr	r3, [pc, #192]	; (800262c <ble_init+0xfc>)
 800256a:	4a32      	ldr	r2, [pc, #200]	; (8002634 <ble_init+0x104>)
 800256c:	605a      	str	r2, [r3, #4]

	ble_rx_all.vcell.cmd_id = BATT_CMD_ID;
 800256e:	4b2f      	ldr	r3, [pc, #188]	; (800262c <ble_init+0xfc>)
 8002570:	22bc      	movs	r2, #188	; 0xbc
 8002572:	721a      	strb	r2, [r3, #8]
	ble_rx_all.vcell.msg_id = BATT_MSG_ID;
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <ble_init+0xfc>)
 8002576:	4a30      	ldr	r2, [pc, #192]	; (8002638 <ble_init+0x108>)
 8002578:	815a      	strh	r2, [r3, #10]
	ble_rx_all.vcell.func_p = vcell_fp;
 800257a:	4b2c      	ldr	r3, [pc, #176]	; (800262c <ble_init+0xfc>)
 800257c:	4a2f      	ldr	r2, [pc, #188]	; (800263c <ble_init+0x10c>)
 800257e:	60da      	str	r2, [r3, #12]

	ble_rx_all.all_led_off.cmd_id = LED_CMD_ID;
 8002580:	4b2a      	ldr	r3, [pc, #168]	; (800262c <ble_init+0xfc>)
 8002582:	22af      	movs	r2, #175	; 0xaf
 8002584:	741a      	strb	r2, [r3, #16]
	ble_rx_all.all_led_off.msg_id = ALL_LED_OFF_MSG_ID;
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <ble_init+0xfc>)
 8002588:	4a2d      	ldr	r2, [pc, #180]	; (8002640 <ble_init+0x110>)
 800258a:	825a      	strh	r2, [r3, #18]
	ble_rx_all.all_led_off.func_p = all_led_off_fp;
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <ble_init+0xfc>)
 800258e:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <ble_init+0x114>)
 8002590:	615a      	str	r2, [r3, #20]

	ble_rx_all.two_led_on.cmd_id = LED_CMD_ID;
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <ble_init+0xfc>)
 8002594:	22af      	movs	r2, #175	; 0xaf
 8002596:	761a      	strb	r2, [r3, #24]
	ble_rx_all.two_led_on.msg_id = TWO_LED_MSG_ID;
 8002598:	4b24      	ldr	r3, [pc, #144]	; (800262c <ble_init+0xfc>)
 800259a:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <ble_init+0x118>)
 800259c:	835a      	strh	r2, [r3, #26]
	ble_rx_all.two_led_on.func_p = two_led_on_fp;
 800259e:	4b23      	ldr	r3, [pc, #140]	; (800262c <ble_init+0xfc>)
 80025a0:	4a2a      	ldr	r2, [pc, #168]	; (800264c <ble_init+0x11c>)
 80025a2:	61da      	str	r2, [r3, #28]

	ble_rx_all.vcell_timer.cmd_id = BATT_CMD_ID;
 80025a4:	4b21      	ldr	r3, [pc, #132]	; (800262c <ble_init+0xfc>)
 80025a6:	2220      	movs	r2, #32
 80025a8:	21bc      	movs	r1, #188	; 0xbc
 80025aa:	5499      	strb	r1, [r3, r2]
	ble_rx_all.vcell_timer.msg_id = BATT_TIMER_MSG_ID;
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <ble_init+0xfc>)
 80025ae:	4a28      	ldr	r2, [pc, #160]	; (8002650 <ble_init+0x120>)
 80025b0:	845a      	strh	r2, [r3, #34]	; 0x22
	ble_rx_all.vcell_timer.func_p = vcell_timer_fp;
 80025b2:	4b1e      	ldr	r3, [pc, #120]	; (800262c <ble_init+0xfc>)
 80025b4:	4a27      	ldr	r2, [pc, #156]	; (8002654 <ble_init+0x124>)
 80025b6:	625a      	str	r2, [r3, #36]	; 0x24
	// ble_rx_all.led_array.cmd_id = LED_CMD_ID;
	// ble_rx_all.led_array.msg_id = TIMER_LED_MSG_ID;
	// ble_rx_all.led_array.func_p = led_array_fp;

	// if PWM not used comment following 6 lines
	ble_rx_all.led_array.cmd_id = LED_CMD_ID;
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <ble_init+0xfc>)
 80025ba:	2228      	movs	r2, #40	; 0x28
 80025bc:	21af      	movs	r1, #175	; 0xaf
 80025be:	5499      	strb	r1, [r3, r2]
	ble_rx_all.led_array.msg_id = TWO_PWM_LED_TIMER_MSG_ID;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <ble_init+0xfc>)
 80025c2:	4a25      	ldr	r2, [pc, #148]	; (8002658 <ble_init+0x128>)
 80025c4:	855a      	strh	r2, [r3, #42]	; 0x2a
	ble_rx_all.led_array.func_p = led_array_fp;
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <ble_init+0xfc>)
 80025c8:	4a24      	ldr	r2, [pc, #144]	; (800265c <ble_init+0x12c>)
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c


	ble_rx_all.one_pwm_led_on.cmd_id = LED_CMD_ID;
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <ble_init+0xfc>)
 80025ce:	2230      	movs	r2, #48	; 0x30
 80025d0:	21af      	movs	r1, #175	; 0xaf
 80025d2:	5499      	strb	r1, [r3, r2]
	ble_rx_all.one_pwm_led_on.msg_id = ONE_PWM_LED_MSG_ID;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <ble_init+0xfc>)
 80025d6:	4a22      	ldr	r2, [pc, #136]	; (8002660 <ble_init+0x130>)
 80025d8:	865a      	strh	r2, [r3, #50]	; 0x32
	ble_rx_all.one_pwm_led_on.func_p = one_pwm_led_on_fp;
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <ble_init+0xfc>)
 80025dc:	4a21      	ldr	r2, [pc, #132]	; (8002664 <ble_init+0x134>)
 80025de:	635a      	str	r2, [r3, #52]	; 0x34

	ble_rx_all.rtc_set_time.cmd_id = LED_CMD_ID;
 80025e0:	4b12      	ldr	r3, [pc, #72]	; (800262c <ble_init+0xfc>)
 80025e2:	2238      	movs	r2, #56	; 0x38
 80025e4:	21af      	movs	r1, #175	; 0xaf
 80025e6:	5499      	strb	r1, [r3, r2]
	ble_rx_all.rtc_set_time.msg_id = RTC_MSG_ID;
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <ble_init+0xfc>)
 80025ea:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <ble_init+0x138>)
 80025ec:	875a      	strh	r2, [r3, #58]	; 0x3a
	ble_rx_all.rtc_set_time.func_p = rtc_set_time_fp;
 80025ee:	4b0f      	ldr	r3, [pc, #60]	; (800262c <ble_init+0xfc>)
 80025f0:	4a1e      	ldr	r2, [pc, #120]	; (800266c <ble_init+0x13c>)
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c

	ble_rx_all.rtc_set_alarm_a_b.cmd_id = LED_CMD_ID;
 80025f4:	4b0d      	ldr	r3, [pc, #52]	; (800262c <ble_init+0xfc>)
 80025f6:	2240      	movs	r2, #64	; 0x40
 80025f8:	21af      	movs	r1, #175	; 0xaf
 80025fa:	5499      	strb	r1, [r3, r2]
	ble_rx_all.rtc_set_alarm_a_b.msg_id = RTC_ALARM_A_B_MSG_ID;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <ble_init+0xfc>)
 80025fe:	2242      	movs	r2, #66	; 0x42
 8002600:	491b      	ldr	r1, [pc, #108]	; (8002670 <ble_init+0x140>)
 8002602:	5299      	strh	r1, [r3, r2]
	ble_rx_all.rtc_set_alarm_a_b.func_p = rtc_set_alarm_a_b_fp;
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <ble_init+0xfc>)
 8002606:	4a1b      	ldr	r2, [pc, #108]	; (8002674 <ble_init+0x144>)
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

	ble_rx_all.rtc_set_led.cmd_id = LED_CMD_ID;
 800260a:	4b08      	ldr	r3, [pc, #32]	; (800262c <ble_init+0xfc>)
 800260c:	2248      	movs	r2, #72	; 0x48
 800260e:	21af      	movs	r1, #175	; 0xaf
 8002610:	5499      	strb	r1, [r3, r2]
	ble_rx_all.rtc_set_led.msg_id = RTC_LED_MSG_ID;
 8002612:	4b06      	ldr	r3, [pc, #24]	; (800262c <ble_init+0xfc>)
 8002614:	224a      	movs	r2, #74	; 0x4a
 8002616:	4918      	ldr	r1, [pc, #96]	; (8002678 <ble_init+0x148>)
 8002618:	5299      	strh	r1, [r3, r2]
	ble_rx_all.rtc_set_led.func_p = rtc_set_led_fp;
 800261a:	4b04      	ldr	r3, [pc, #16]	; (800262c <ble_init+0xfc>)
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <ble_init+0x14c>)
 800261e:	64da      	str	r2, [r3, #76]	; 0x4c

}
 8002620:	46c0      	nop			; (mov r8, r8)
 8002622:	46bd      	mov	sp, r7
 8002624:	b004      	add	sp, #16
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000274 	.word	0x20000274
 800262c:	200001fc 	.word	0x200001fc
 8002630:	00000701 	.word	0x00000701
 8002634:	0800279b 	.word	0x0800279b
 8002638:	00000801 	.word	0x00000801
 800263c:	080027bd 	.word	0x080027bd
 8002640:	00000704 	.word	0x00000704
 8002644:	08002831 	.word	0x08002831
 8002648:	00000702 	.word	0x00000702
 800264c:	08002845 	.word	0x08002845
 8002650:	00000802 	.word	0x00000802
 8002654:	0800287d 	.word	0x0800287d
 8002658:	00000603 	.word	0x00000603
 800265c:	080029bd 	.word	0x080029bd
 8002660:	00000601 	.word	0x00000601
 8002664:	08002a3d 	.word	0x08002a3d
 8002668:	00000a01 	.word	0x00000a01
 800266c:	08002a61 	.word	0x08002a61
 8002670:	00000a02 	.word	0x00000a02
 8002674:	08002afd 	.word	0x08002afd
 8002678:	00000a03 	.word	0x00000a03
 800267c:	08002c05 	.word	0x08002c05

08002680 <ble_handler>:


HAL_StatusTypeDef ble_handler()
{
 8002680:	b590      	push	{r4, r7, lr}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
	if (ble.init_flag != 1)
 8002686:	4b39      	ldr	r3, [pc, #228]	; (800276c <ble_handler+0xec>)
 8002688:	7b1b      	ldrb	r3, [r3, #12]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d001      	beq.n	8002692 <ble_handler+0x12>
	{
		return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e068      	b.n	8002764 <ble_handler+0xe4>
	}

	if ( is_phone_connected() == MOBILE_NOT_CONNECTED)
 8002692:	f000 f86f 	bl	8002774 <is_phone_connected>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d101      	bne.n	800269e <ble_handler+0x1e>
	{
		return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e062      	b.n	8002764 <ble_handler+0xe4>
	}

	uint8_t rx_header[BLE_MAX_EXPECTED_RX_HEADER_BYTES] = {0};
 800269e:	2408      	movs	r4, #8
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]

	if (HAL_UART_Receive(ble.uart, &rx_header[0], sizeof(rx_header), ble.timeout_ms) == HAL_OK)
 80026a6:	4b31      	ldr	r3, [pc, #196]	; (800276c <ble_handler+0xec>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	4b30      	ldr	r3, [pc, #192]	; (800276c <ble_handler+0xec>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	1939      	adds	r1, r7, r4
 80026b0:	2204      	movs	r2, #4
 80026b2:	f004 ff8d 	bl	80075d0 <HAL_UART_Receive>
 80026b6:	1e03      	subs	r3, r0, #0
 80026b8:	d153      	bne.n	8002762 <ble_handler+0xe2>
	{

		uint8_t cmd_id = rx_header[CMD_ID];
 80026ba:	2312      	movs	r3, #18
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	0021      	movs	r1, r4
 80026c0:	187a      	adds	r2, r7, r1
 80026c2:	7812      	ldrb	r2, [r2, #0]
 80026c4:	701a      	strb	r2, [r3, #0]
		uint16_t msg_id = (rx_header[MSG_ID_H] << 8) | rx_header[MSG_ID_L];
 80026c6:	187b      	adds	r3, r7, r1
 80026c8:	785b      	ldrb	r3, [r3, #1]
 80026ca:	021b      	lsls	r3, r3, #8
 80026cc:	b21a      	sxth	r2, r3
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	789b      	ldrb	r3, [r3, #2]
 80026d2:	b21b      	sxth	r3, r3
 80026d4:	4313      	orrs	r3, r2
 80026d6:	b21a      	sxth	r2, r3
 80026d8:	2310      	movs	r3, #16
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	801a      	strh	r2, [r3, #0]
		uint8_t len = rx_header[MSG_LEN] + 1;
 80026de:	187b      	adds	r3, r7, r1
 80026e0:	78da      	ldrb	r2, [r3, #3]
 80026e2:	210f      	movs	r1, #15
 80026e4:	187b      	adds	r3, r7, r1
 80026e6:	3201      	adds	r2, #1
 80026e8:	701a      	strb	r2, [r3, #0]

		uint8_t rx_payload[6] = {0};
 80026ea:	003b      	movs	r3, r7
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	2200      	movs	r2, #0
 80026f2:	809a      	strh	r2, [r3, #4]

		if (HAL_UART_Receive(ble.uart, &rx_payload[0], len, ble.timeout_ms) == HAL_OK)
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <ble_handler+0xec>)
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	4b1b      	ldr	r3, [pc, #108]	; (800276c <ble_handler+0xec>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	0039      	movs	r1, r7
 8002704:	f004 ff64 	bl	80075d0 <HAL_UART_Receive>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d128      	bne.n	800275e <ble_handler+0xde>
		{
			ble_rx_s* p = &ble_rx_all.one_led_on;
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <ble_handler+0xf0>)
 800270e:	617b      	str	r3, [r7, #20]

			for (uint8_t i = 0; i < (sizeof(ble_rx_all_s) / sizeof(ble_rx_s)); i++)
 8002710:	2313      	movs	r3, #19
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	2200      	movs	r2, #0
 8002716:	701a      	strb	r2, [r3, #0]
 8002718:	e01c      	b.n	8002754 <ble_handler+0xd4>
			{
				if((p->cmd_id == cmd_id) && (p->msg_id == msg_id))
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2212      	movs	r2, #18
 8002720:	18ba      	adds	r2, r7, r2
 8002722:	7812      	ldrb	r2, [r2, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d10c      	bne.n	8002742 <ble_handler+0xc2>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	885b      	ldrh	r3, [r3, #2]
 800272c:	2210      	movs	r2, #16
 800272e:	18ba      	adds	r2, r7, r2
 8002730:	8812      	ldrh	r2, [r2, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d105      	bne.n	8002742 <ble_handler+0xc2>
				{
					p->func_p(&rx_payload[0]);
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	003a      	movs	r2, r7
 800273c:	0010      	movs	r0, r2
 800273e:	4798      	blx	r3
					break;
 8002740:	e00d      	b.n	800275e <ble_handler+0xde>
				}

				p++;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3308      	adds	r3, #8
 8002746:	617b      	str	r3, [r7, #20]
			for (uint8_t i = 0; i < (sizeof(ble_rx_all_s) / sizeof(ble_rx_s)); i++)
 8002748:	2113      	movs	r1, #19
 800274a:	187b      	adds	r3, r7, r1
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	187b      	adds	r3, r7, r1
 8002750:	3201      	adds	r2, #1
 8002752:	701a      	strb	r2, [r3, #0]
 8002754:	2313      	movs	r3, #19
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b09      	cmp	r3, #9
 800275c:	d9dd      	bls.n	800271a <ble_handler+0x9a>
			}

		}

		return HAL_OK;
 800275e:	2300      	movs	r3, #0
 8002760:	e000      	b.n	8002764 <ble_handler+0xe4>

	}

	return HAL_ERROR;
 8002762:	2301      	movs	r3, #1

}
 8002764:	0018      	movs	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	b007      	add	sp, #28
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	20000274 	.word	0x20000274
 8002770:	200001fc 	.word	0x200001fc

08002774 <is_phone_connected>:


/*********************************FUNCTIONS*****************************************/

uint8_t is_phone_connected()
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == MOBILE_CONNECTED)
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	011a      	lsls	r2, r3, #4
 800277c:	23a0      	movs	r3, #160	; 0xa0
 800277e:	05db      	lsls	r3, r3, #23
 8002780:	0011      	movs	r1, r2
 8002782:	0018      	movs	r0, r3
 8002784:	f001 fee4 	bl	8004550 <HAL_GPIO_ReadPin>
 8002788:	0003      	movs	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <is_phone_connected+0x1e>
	{
		return MOBILE_CONNECTED;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <is_phone_connected+0x20>
	}
	else
		return MOBILE_NOT_CONNECTED;
 8002792:	2300      	movs	r3, #0
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <one_led_on_fp>:

void one_led_on_fp(uint8_t* payload)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	led_gpio_set(payload[0], payload[1]);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3301      	adds	r3, #1
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	0019      	movs	r1, r3
 80027ae:	0010      	movs	r0, r2
 80027b0:	f000 fa64 	bl	8002c7c <led_gpio_set>
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}

080027bc <vcell_fp>:


void vcell_fp(uint8_t* payload)
{
 80027bc:	b5b0      	push	{r4, r5, r7, lr}
 80027be:	b08e      	sub	sp, #56	; 0x38
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

	if (payload[0] == 0xAA)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2baa      	cmp	r3, #170	; 0xaa
 80027ca:	d128      	bne.n	800281e <vcell_fp+0x62>
	{
		float vcell_value = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	637b      	str	r3, [r7, #52]	; 0x34

		get_MAX17048_vcell_value(&vcell_value);
 80027d0:	2334      	movs	r3, #52	; 0x34
 80027d2:	18fb      	adds	r3, r7, r3
 80027d4:	0018      	movs	r0, r3
 80027d6:	f000 fbfd 	bl	8002fd4 <get_MAX17048_vcell_value>

		// define text we want to send to mobile phone
		char vcell_tekst[40] = {0};
 80027da:	250c      	movs	r5, #12
 80027dc:	197b      	adds	r3, r7, r5
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	3304      	adds	r3, #4
 80027e4:	2224      	movs	r2, #36	; 0x24
 80027e6:	2100      	movs	r1, #0
 80027e8:	0018      	movs	r0, r3
 80027ea:	f005 fc87 	bl	80080fc <memset>
		sprintf(&vcell_tekst[0], "Napon baterije je: %.2f V\r\n", vcell_value);
 80027ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f0:	1c18      	adds	r0, r3, #0
 80027f2:	f7ff fda3 	bl	800233c <__aeabi_f2d>
 80027f6:	0002      	movs	r2, r0
 80027f8:	000b      	movs	r3, r1
 80027fa:	490b      	ldr	r1, [pc, #44]	; (8002828 <vcell_fp+0x6c>)
 80027fc:	1978      	adds	r0, r7, r5
 80027fe:	f006 f8ff 	bl	8008a00 <siprintf>

		// Send to mobile phone
		HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <vcell_fp+0x70>)
 8002804:	681c      	ldr	r4, [r3, #0]
 8002806:	197b      	adds	r3, r7, r5
 8002808:	0018      	movs	r0, r3
 800280a:	f7fd fc7d 	bl	8000108 <strlen>
 800280e:	0003      	movs	r3, r0
 8002810:	b29a      	uxth	r2, r3
 8002812:	4b06      	ldr	r3, [pc, #24]	; (800282c <vcell_fp+0x70>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	1979      	adds	r1, r7, r5
 8002818:	0020      	movs	r0, r4
 800281a:	f004 fe31 	bl	8007480 <HAL_UART_Transmit>

	}

}
 800281e:	46c0      	nop			; (mov r8, r8)
 8002820:	46bd      	mov	sp, r7
 8002822:	b00e      	add	sp, #56	; 0x38
 8002824:	bdb0      	pop	{r4, r5, r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	0800afc0 	.word	0x0800afc0
 800282c:	20000274 	.word	0x20000274

08002830 <all_led_off_fp>:


void all_led_off_fp(uint8_t* payload)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	// if PWM not used uncomment line below
	// led_gpio_all_off();

	// if PWM not used comment line below
	led_pwm_all_off();
 8002838:	f000 fb58 	bl	8002eec <led_pwm_all_off>
}
 800283c:	46c0      	nop			; (mov r8, r8)
 800283e:	46bd      	mov	sp, r7
 8002840:	b002      	add	sp, #8
 8002842:	bd80      	pop	{r7, pc}

08002844 <two_led_on_fp>:


void two_led_on_fp(uint8_t* payload)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	led_gpio_set(payload[0], payload[1]);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3301      	adds	r3, #1
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	0019      	movs	r1, r3
 8002858:	0010      	movs	r0, r2
 800285a:	f000 fa0f 	bl	8002c7c <led_gpio_set>
	led_gpio_set(payload[2], payload[3]);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3302      	adds	r3, #2
 8002862:	781a      	ldrb	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3303      	adds	r3, #3
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	0019      	movs	r1, r3
 800286c:	0010      	movs	r0, r2
 800286e:	f000 fa05 	bl	8002c7c <led_gpio_set>
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	b002      	add	sp, #8
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <vcell_timer_fp>:


void vcell_timer_fp(uint8_t* payload)
{
 800287c:	b5b0      	push	{r4, r5, r7, lr}
 800287e:	b08c      	sub	sp, #48	; 0x30
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	char vcell_tekst[40] = {0};
 8002884:	2408      	movs	r4, #8
 8002886:	193b      	adds	r3, r7, r4
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	3304      	adds	r3, #4
 800288e:	2224      	movs	r2, #36	; 0x24
 8002890:	2100      	movs	r1, #0
 8002892:	0018      	movs	r0, r3
 8002894:	f005 fc32 	bl	80080fc <memset>

	if (payload[0] == 0xAA)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2baa      	cmp	r3, #170	; 0xaa
 800289e:	d145      	bne.n	800292c <vcell_timer_fp+0xb0>
	{

		if (is_timer_on(&htim6) == timer_stopped)
 80028a0:	4b41      	ldr	r3, [pc, #260]	; (80029a8 <vcell_timer_fp+0x12c>)
 80028a2:	0018      	movs	r0, r3
 80028a4:	f000 fc94 	bl	80031d0 <is_timer_on>
 80028a8:	1e03      	subs	r3, r0, #0
 80028aa:	d11d      	bne.n	80028e8 <vcell_timer_fp+0x6c>
		{
			timer_on(&htim6, payload[1]);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3301      	adds	r3, #1
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	4b3d      	ldr	r3, [pc, #244]	; (80029a8 <vcell_timer_fp+0x12c>)
 80028b4:	0011      	movs	r1, r2
 80028b6:	0018      	movs	r0, r3
 80028b8:	f000 fc46 	bl	8003148 <timer_on>

			sprintf(&vcell_tekst[0], "--Periodicno slanje batt--\r\n");
 80028bc:	4a3b      	ldr	r2, [pc, #236]	; (80029ac <vcell_timer_fp+0x130>)
 80028be:	0025      	movs	r5, r4
 80028c0:	197b      	adds	r3, r7, r5
 80028c2:	0011      	movs	r1, r2
 80028c4:	0018      	movs	r0, r3
 80028c6:	f006 f89b 	bl	8008a00 <siprintf>

			// Send to mobile phone
			HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 80028ca:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <vcell_timer_fp+0x134>)
 80028cc:	681c      	ldr	r4, [r3, #0]
 80028ce:	197b      	adds	r3, r7, r5
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7fd fc19 	bl	8000108 <strlen>
 80028d6:	0003      	movs	r3, r0
 80028d8:	b29a      	uxth	r2, r3
 80028da:	4b35      	ldr	r3, [pc, #212]	; (80029b0 <vcell_timer_fp+0x134>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	1979      	adds	r1, r7, r5
 80028e0:	0020      	movs	r0, r4
 80028e2:	f004 fdcd 	bl	8007480 <HAL_UART_Transmit>

			// Send to mobile phone
			HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
		}
	}
}
 80028e6:	e05b      	b.n	80029a0 <vcell_timer_fp+0x124>
			timer_off(&htim6);
 80028e8:	4b2f      	ldr	r3, [pc, #188]	; (80029a8 <vcell_timer_fp+0x12c>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f000 fc64 	bl	80031b8 <timer_off>
			timer_on(&htim6, payload[1]);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3301      	adds	r3, #1
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <vcell_timer_fp+0x12c>)
 80028f8:	0011      	movs	r1, r2
 80028fa:	0018      	movs	r0, r3
 80028fc:	f000 fc24 	bl	8003148 <timer_on>
			sprintf(&vcell_tekst[0], "--Periodicno slanje batt--\r\n");
 8002900:	4a2a      	ldr	r2, [pc, #168]	; (80029ac <vcell_timer_fp+0x130>)
 8002902:	2508      	movs	r5, #8
 8002904:	197b      	adds	r3, r7, r5
 8002906:	0011      	movs	r1, r2
 8002908:	0018      	movs	r0, r3
 800290a:	f006 f879 	bl	8008a00 <siprintf>
			HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <vcell_timer_fp+0x134>)
 8002910:	681c      	ldr	r4, [r3, #0]
 8002912:	197b      	adds	r3, r7, r5
 8002914:	0018      	movs	r0, r3
 8002916:	f7fd fbf7 	bl	8000108 <strlen>
 800291a:	0003      	movs	r3, r0
 800291c:	b29a      	uxth	r2, r3
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <vcell_timer_fp+0x134>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	1979      	adds	r1, r7, r5
 8002924:	0020      	movs	r0, r4
 8002926:	f004 fdab 	bl	8007480 <HAL_UART_Transmit>
}
 800292a:	e039      	b.n	80029a0 <vcell_timer_fp+0x124>
	else if(payload[0] == 0xFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2bff      	cmp	r3, #255	; 0xff
 8002932:	d135      	bne.n	80029a0 <vcell_timer_fp+0x124>
		if (is_timer_on(&htim6) == timer_started)
 8002934:	4b1c      	ldr	r3, [pc, #112]	; (80029a8 <vcell_timer_fp+0x12c>)
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fc4a 	bl	80031d0 <is_timer_on>
 800293c:	0003      	movs	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d119      	bne.n	8002976 <vcell_timer_fp+0xfa>
			timer_off(&htim6);
 8002942:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <vcell_timer_fp+0x12c>)
 8002944:	0018      	movs	r0, r3
 8002946:	f000 fc37 	bl	80031b8 <timer_off>
			sprintf(&vcell_tekst[0], "--Prekid periodickog slanja--\r\n");
 800294a:	4a1a      	ldr	r2, [pc, #104]	; (80029b4 <vcell_timer_fp+0x138>)
 800294c:	2508      	movs	r5, #8
 800294e:	197b      	adds	r3, r7, r5
 8002950:	0011      	movs	r1, r2
 8002952:	0018      	movs	r0, r3
 8002954:	f006 f854 	bl	8008a00 <siprintf>
			HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <vcell_timer_fp+0x134>)
 800295a:	681c      	ldr	r4, [r3, #0]
 800295c:	197b      	adds	r3, r7, r5
 800295e:	0018      	movs	r0, r3
 8002960:	f7fd fbd2 	bl	8000108 <strlen>
 8002964:	0003      	movs	r3, r0
 8002966:	b29a      	uxth	r2, r3
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <vcell_timer_fp+0x134>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	1979      	adds	r1, r7, r5
 800296e:	0020      	movs	r0, r4
 8002970:	f004 fd86 	bl	8007480 <HAL_UART_Transmit>
}
 8002974:	e014      	b.n	80029a0 <vcell_timer_fp+0x124>
			sprintf(&vcell_tekst[0], "--Periodicno slanje vec prekinuto--\r\n");
 8002976:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <vcell_timer_fp+0x13c>)
 8002978:	2508      	movs	r5, #8
 800297a:	197b      	adds	r3, r7, r5
 800297c:	0011      	movs	r1, r2
 800297e:	0018      	movs	r0, r3
 8002980:	f006 f83e 	bl	8008a00 <siprintf>
			HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <vcell_timer_fp+0x134>)
 8002986:	681c      	ldr	r4, [r3, #0]
 8002988:	197b      	adds	r3, r7, r5
 800298a:	0018      	movs	r0, r3
 800298c:	f7fd fbbc 	bl	8000108 <strlen>
 8002990:	0003      	movs	r3, r0
 8002992:	b29a      	uxth	r2, r3
 8002994:	4b06      	ldr	r3, [pc, #24]	; (80029b0 <vcell_timer_fp+0x134>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	1979      	adds	r1, r7, r5
 800299a:	0020      	movs	r0, r4
 800299c:	f004 fd70 	bl	8007480 <HAL_UART_Transmit>
}
 80029a0:	46c0      	nop			; (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b00c      	add	sp, #48	; 0x30
 80029a6:	bdb0      	pop	{r4, r5, r7, pc}
 80029a8:	20000340 	.word	0x20000340
 80029ac:	0800afdc 	.word	0x0800afdc
 80029b0:	20000274 	.word	0x20000274
 80029b4:	0800affc 	.word	0x0800affc
 80029b8:	0800b01c 	.word	0x0800b01c

080029bc <led_array_fp>:


void led_array_fp(uint8_t* payload)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < sizeof(led_array); i++)
 80029c4:	230f      	movs	r3, #15
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
 80029cc:	e00e      	b.n	80029ec <led_array_fp+0x30>
	{
		led_array[i] = payload[i];
 80029ce:	200f      	movs	r0, #15
 80029d0:	183b      	adds	r3, r7, r0
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	18d2      	adds	r2, r2, r3
 80029d8:	183b      	adds	r3, r7, r0
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	7811      	ldrb	r1, [r2, #0]
 80029de:	4a15      	ldr	r2, [pc, #84]	; (8002a34 <led_array_fp+0x78>)
 80029e0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < sizeof(led_array); i++)
 80029e2:	183b      	adds	r3, r7, r0
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	183b      	adds	r3, r7, r0
 80029e8:	3201      	adds	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	230f      	movs	r3, #15
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d9eb      	bls.n	80029ce <led_array_fp+0x12>
	}

	if (is_timer_on(&htim7) == timer_stopped)
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <led_array_fp+0x7c>)
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 fbe9 	bl	80031d0 <is_timer_on>
 80029fe:	1e03      	subs	r3, r0, #0
 8002a00:	d108      	bne.n	8002a14 <led_array_fp+0x58>
	{
		timer_on(&htim7, payload[4]);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <led_array_fp+0x7c>)
 8002a0a:	0011      	movs	r1, r2
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 fb9b 	bl	8003148 <timer_on>

		timer_on(&htim7, payload[4]);

	}

}
 8002a12:	e00b      	b.n	8002a2c <led_array_fp+0x70>
		timer_off(&htim7);
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <led_array_fp+0x7c>)
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 fbce 	bl	80031b8 <timer_off>
		timer_on(&htim7, payload[4]);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <led_array_fp+0x7c>)
 8002a24:	0011      	movs	r1, r2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fb8e 	bl	8003148 <timer_on>
}
 8002a2c:	46c0      	nop			; (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b004      	add	sp, #16
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	2000024c 	.word	0x2000024c
 8002a38:	20000380 	.word	0x20000380

08002a3c <one_pwm_led_on_fp>:

void one_pwm_led_on_fp(uint8_t* payload)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
	led_pwm_set(payload[0], payload[1]);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	781a      	ldrb	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f000 f99d 	bl	8002d90 <led_pwm_set>
}
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	b002      	add	sp, #8
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <rtc_set_time_fp>:


void rtc_set_time_fp(uint8_t* payload)
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b092      	sub	sp, #72	; 0x48
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef my_time = {0};
 8002a68:	2434      	movs	r4, #52	; 0x34
 8002a6a:	193b      	adds	r3, r7, r4
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	2314      	movs	r3, #20
 8002a70:	001a      	movs	r2, r3
 8002a72:	2100      	movs	r1, #0
 8002a74:	f005 fb42 	bl	80080fc <memset>

	my_time.Hours = payload[0];
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	0021      	movs	r1, r4
 8002a7e:	187b      	adds	r3, r7, r1
 8002a80:	701a      	strb	r2, [r3, #0]
	my_time.Minutes = payload[1];
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	785a      	ldrb	r2, [r3, #1]
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	705a      	strb	r2, [r3, #1]
	my_time.Seconds = 0;
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	709a      	strb	r2, [r3, #2]

	if (HAL_RTC_SetTime(&hrtc, &my_time, RTC_FORMAT_BIN) == HAL_OK)
 8002a90:	1879      	adds	r1, r7, r1
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <rtc_set_time_fp+0x90>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	0018      	movs	r0, r3
 8002a98:	f003 fb80 	bl	800619c <HAL_RTC_SetTime>
 8002a9c:	1e03      	subs	r3, r0, #0
 8002a9e:	d122      	bne.n	8002ae6 <rtc_set_time_fp+0x86>
	{
		// define text we want to send to mobile phone
		char vcell_tekst[40] = {0};
 8002aa0:	240c      	movs	r4, #12
 8002aa2:	193b      	adds	r3, r7, r4
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	3304      	adds	r3, #4
 8002aaa:	2224      	movs	r2, #36	; 0x24
 8002aac:	2100      	movs	r1, #0
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f005 fb24 	bl	80080fc <memset>
		sprintf(&vcell_tekst[0], "RTC vrijeme: %d:%d\r\n", payload[0], payload[1]);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	001a      	movs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3301      	adds	r3, #1
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	490c      	ldr	r1, [pc, #48]	; (8002af4 <rtc_set_time_fp+0x94>)
 8002ac2:	0025      	movs	r5, r4
 8002ac4:	1978      	adds	r0, r7, r5
 8002ac6:	f005 ff9b 	bl	8008a00 <siprintf>

		// Send to mobile phone
		HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <rtc_set_time_fp+0x98>)
 8002acc:	681c      	ldr	r4, [r3, #0]
 8002ace:	197b      	adds	r3, r7, r5
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f7fd fb19 	bl	8000108 <strlen>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <rtc_set_time_fp+0x98>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	1979      	adds	r1, r7, r5
 8002ae0:	0020      	movs	r0, r4
 8002ae2:	f004 fccd 	bl	8007480 <HAL_UART_Transmit>

	}


}
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b012      	add	sp, #72	; 0x48
 8002aec:	bdb0      	pop	{r4, r5, r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	200002dc 	.word	0x200002dc
 8002af4:	0800b044 	.word	0x0800b044
 8002af8:	20000274 	.word	0x20000274

08002afc <rtc_set_alarm_a_b_fp>:

void rtc_set_alarm_a_b_fp(uint8_t* payload)
{
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afe:	b0a3      	sub	sp, #140	; 0x8c
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	6078      	str	r0, [r7, #4]
	RTC_AlarmTypeDef my_alarm_A = {0};
 8002b04:	2458      	movs	r4, #88	; 0x58
 8002b06:	193b      	adds	r3, r7, r4
 8002b08:	0018      	movs	r0, r3
 8002b0a:	2328      	movs	r3, #40	; 0x28
 8002b0c:	001a      	movs	r2, r3
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f005 faf4 	bl	80080fc <memset>
	RTC_AlarmTypeDef my_alarm_B = {0};
 8002b14:	2530      	movs	r5, #48	; 0x30
 8002b16:	197b      	adds	r3, r7, r5
 8002b18:	0018      	movs	r0, r3
 8002b1a:	2328      	movs	r3, #40	; 0x28
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f005 faec 	bl	80080fc <memset>

	my_alarm_A.AlarmTime.Hours = payload[DATA_1];
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	193b      	adds	r3, r7, r4
 8002b2a:	701a      	strb	r2, [r3, #0]
	my_alarm_A.AlarmTime.Minutes = payload[DATA_2];
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	785a      	ldrb	r2, [r3, #1]
 8002b30:	0021      	movs	r1, r4
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	705a      	strb	r2, [r3, #1]
	my_alarm_A.AlarmTime.Seconds = 0;
 8002b36:	187b      	adds	r3, r7, r1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	709a      	strb	r2, [r3, #2]

	my_alarm_A.Alarm = RTC_ALARM_A;
 8002b3c:	187b      	adds	r3, r7, r1
 8002b3e:	2280      	movs	r2, #128	; 0x80
 8002b40:	0052      	lsls	r2, r2, #1
 8002b42:	625a      	str	r2, [r3, #36]	; 0x24

	my_alarm_A.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	0612      	lsls	r2, r2, #24
 8002b4a:	615a      	str	r2, [r3, #20]

	my_alarm_B.AlarmTime.Hours = payload[DATA_3];
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	789a      	ldrb	r2, [r3, #2]
 8002b50:	197b      	adds	r3, r7, r5
 8002b52:	701a      	strb	r2, [r3, #0]
	my_alarm_B.AlarmTime.Minutes = payload[DATA_4];
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	78da      	ldrb	r2, [r3, #3]
 8002b58:	002c      	movs	r4, r5
 8002b5a:	193b      	adds	r3, r7, r4
 8002b5c:	705a      	strb	r2, [r3, #1]
	my_alarm_B.AlarmTime.Seconds = 0;
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	2200      	movs	r2, #0
 8002b62:	709a      	strb	r2, [r3, #2]

	my_alarm_B.Alarm = RTC_ALARM_B;
 8002b64:	193b      	adds	r3, r7, r4
 8002b66:	2280      	movs	r2, #128	; 0x80
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

	my_alarm_B.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8002b6c:	193b      	adds	r3, r7, r4
 8002b6e:	2280      	movs	r2, #128	; 0x80
 8002b70:	0612      	lsls	r2, r2, #24
 8002b72:	615a      	str	r2, [r3, #20]

	if (HAL_RTC_SetAlarm_IT(&hrtc, &my_alarm_A, RTC_FORMAT_BIN) == HAL_OK && HAL_RTC_SetAlarm_IT(&hrtc, &my_alarm_B, RTC_FORMAT_BIN) == HAL_OK)
 8002b74:	1879      	adds	r1, r7, r1
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <rtc_set_alarm_a_b_fp+0xfc>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	0018      	movs	r0, r3
 8002b7c:	f003 fc80 	bl	8006480 <HAL_RTC_SetAlarm_IT>
 8002b80:	1e03      	subs	r3, r0, #0
 8002b82:	d135      	bne.n	8002bf0 <rtc_set_alarm_a_b_fp+0xf4>
 8002b84:	1939      	adds	r1, r7, r4
 8002b86:	4b1c      	ldr	r3, [pc, #112]	; (8002bf8 <rtc_set_alarm_a_b_fp+0xfc>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f003 fc78 	bl	8006480 <HAL_RTC_SetAlarm_IT>
 8002b90:	1e03      	subs	r3, r0, #0
 8002b92:	d12d      	bne.n	8002bf0 <rtc_set_alarm_a_b_fp+0xf4>
	{
		// define text we want to send to mobile phone
		char vcell_tekst[40] = {0};
 8002b94:	2608      	movs	r6, #8
 8002b96:	19bb      	adds	r3, r7, r6
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2224      	movs	r2, #36	; 0x24
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f005 faaa 	bl	80080fc <memset>
		sprintf(&vcell_tekst[0], "alarmA: %d:%d, alarmB: %d:%d\r\n", payload[DATA_1], payload[DATA_2], payload[DATA_3], payload[DATA_4]);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	001c      	movs	r4, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	001d      	movs	r5, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	001a      	movs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3303      	adds	r3, #3
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	490d      	ldr	r1, [pc, #52]	; (8002bfc <rtc_set_alarm_a_b_fp+0x100>)
 8002bc6:	19b8      	adds	r0, r7, r6
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	9200      	str	r2, [sp, #0]
 8002bcc:	002b      	movs	r3, r5
 8002bce:	0022      	movs	r2, r4
 8002bd0:	f005 ff16 	bl	8008a00 <siprintf>

		// Send to mobile phone
		HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <rtc_set_alarm_a_b_fp+0x104>)
 8002bd6:	681c      	ldr	r4, [r3, #0]
 8002bd8:	19bb      	adds	r3, r7, r6
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f7fd fa94 	bl	8000108 <strlen>
 8002be0:	0003      	movs	r3, r0
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <rtc_set_alarm_a_b_fp+0x104>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	19b9      	adds	r1, r7, r6
 8002bea:	0020      	movs	r0, r4
 8002bec:	f004 fc48 	bl	8007480 <HAL_UART_Transmit>
	}

}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b021      	add	sp, #132	; 0x84
 8002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf8:	200002dc 	.word	0x200002dc
 8002bfc:	0800b05c 	.word	0x0800b05c
 8002c00:	20000274 	.word	0x20000274

08002c04 <rtc_set_led_fp>:

void rtc_set_led_fp(uint8_t* payload)
{
 8002c04:	b5b0      	push	{r4, r5, r7, lr}
 8002c06:	b08c      	sub	sp, #48	; 0x30
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
	led_alarm[DATA_1] = payload[DATA_1];
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	781a      	ldrb	r2, [r3, #0]
 8002c10:	4b17      	ldr	r3, [pc, #92]	; (8002c70 <rtc_set_led_fp+0x6c>)
 8002c12:	701a      	strb	r2, [r3, #0]
	led_alarm[DATA_2] = payload[DATA_2];
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	785a      	ldrb	r2, [r3, #1]
 8002c18:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <rtc_set_led_fp+0x6c>)
 8002c1a:	705a      	strb	r2, [r3, #1]
	led_alarm[DATA_3] = payload[DATA_3];
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	789a      	ldrb	r2, [r3, #2]
 8002c20:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <rtc_set_led_fp+0x6c>)
 8002c22:	709a      	strb	r2, [r3, #2]
	led_alarm[DATA_4] = payload[DATA_4];
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	78da      	ldrb	r2, [r3, #3]
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <rtc_set_led_fp+0x6c>)
 8002c2a:	70da      	strb	r2, [r3, #3]

	// define text we want to send to mobile phone
	char vcell_tekst[40] = {0};
 8002c2c:	2508      	movs	r5, #8
 8002c2e:	197b      	adds	r3, r7, r5
 8002c30:	2200      	movs	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2224      	movs	r2, #36	; 0x24
 8002c38:	2100      	movs	r1, #0
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	f005 fa5e 	bl	80080fc <memset>
	sprintf(&vcell_tekst[0], "--LED-ice za RTC postavljene--\r\n");
 8002c40:	4a0c      	ldr	r2, [pc, #48]	; (8002c74 <rtc_set_led_fp+0x70>)
 8002c42:	197b      	adds	r3, r7, r5
 8002c44:	0011      	movs	r1, r2
 8002c46:	0018      	movs	r0, r3
 8002c48:	f005 feda 	bl	8008a00 <siprintf>

	// Send to mobile phone
	HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <rtc_set_led_fp+0x74>)
 8002c4e:	681c      	ldr	r4, [r3, #0]
 8002c50:	197b      	adds	r3, r7, r5
 8002c52:	0018      	movs	r0, r3
 8002c54:	f7fd fa58 	bl	8000108 <strlen>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	4b06      	ldr	r3, [pc, #24]	; (8002c78 <rtc_set_led_fp+0x74>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	1979      	adds	r1, r7, r5
 8002c62:	0020      	movs	r0, r4
 8002c64:	f004 fc0c 	bl	8007480 <HAL_UART_Transmit>
}
 8002c68:	46c0      	nop			; (mov r8, r8)
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	b00c      	add	sp, #48	; 0x30
 8002c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c70:	20000254 	.word	0x20000254
 8002c74:	0800b07c 	.word	0x0800b07c
 8002c78:	20000274 	.word	0x20000274

08002c7c <led_gpio_set>:
/****************************FORWARD DECLARATIONS***********************************/


/*********************************FUNCTIONS*****************************************/
void led_gpio_set(led_t led, led_state_t status)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	0002      	movs	r2, r0
 8002c84:	1dfb      	adds	r3, r7, #7
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	1dbb      	adds	r3, r7, #6
 8002c8a:	1c0a      	adds	r2, r1, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
	if(led == RED)
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d113      	bne.n	8002cbe <led_gpio_set+0x42>
	{
		if(status == LED_ON)
 8002c96:	1dbb      	adds	r3, r7, #6
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <led_gpio_set+0x32>
		{
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, LED_ON);
 8002c9e:	23a0      	movs	r3, #160	; 0xa0
 8002ca0:	05db      	lsls	r3, r3, #23
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	2140      	movs	r1, #64	; 0x40
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f001 fc6f 	bl	800458a <HAL_GPIO_WritePin>
		else
		{
			HAL_GPIO_WritePin(LED_WHITE_PORT, LED_WHITE_PIN, LED_OFF);
		}
	}
}
 8002cac:	e046      	b.n	8002d3c <led_gpio_set+0xc0>
			HAL_GPIO_WritePin(LED_RED_PORT, LED_RED_PIN, LED_OFF);
 8002cae:	23a0      	movs	r3, #160	; 0xa0
 8002cb0:	05db      	lsls	r3, r3, #23
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2140      	movs	r1, #64	; 0x40
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f001 fc67 	bl	800458a <HAL_GPIO_WritePin>
}
 8002cbc:	e03e      	b.n	8002d3c <led_gpio_set+0xc0>
	else if(led == GREEN)
 8002cbe:	1dfb      	adds	r3, r7, #7
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d113      	bne.n	8002cee <led_gpio_set+0x72>
		if(status == LED_ON)
 8002cc6:	1dbb      	adds	r3, r7, #6
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d107      	bne.n	8002cde <led_gpio_set+0x62>
			HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, LED_ON);
 8002cce:	23a0      	movs	r3, #160	; 0xa0
 8002cd0:	05db      	lsls	r3, r3, #23
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	2180      	movs	r1, #128	; 0x80
 8002cd6:	0018      	movs	r0, r3
 8002cd8:	f001 fc57 	bl	800458a <HAL_GPIO_WritePin>
}
 8002cdc:	e02e      	b.n	8002d3c <led_gpio_set+0xc0>
			HAL_GPIO_WritePin(LED_GREEN_PORT, LED_GREEN_PIN, LED_OFF);
 8002cde:	23a0      	movs	r3, #160	; 0xa0
 8002ce0:	05db      	lsls	r3, r3, #23
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	2180      	movs	r1, #128	; 0x80
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f001 fc4f 	bl	800458a <HAL_GPIO_WritePin>
}
 8002cec:	e026      	b.n	8002d3c <led_gpio_set+0xc0>
	else if(led == BLUE)
 8002cee:	1dfb      	adds	r3, r7, #7
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d111      	bne.n	8002d1a <led_gpio_set+0x9e>
		if(status == LED_ON)
 8002cf6:	1dbb      	adds	r3, r7, #6
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d106      	bne.n	8002d0c <led_gpio_set+0x90>
			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, LED_ON);
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <led_gpio_set+0xc8>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	2101      	movs	r1, #1
 8002d04:	0018      	movs	r0, r3
 8002d06:	f001 fc40 	bl	800458a <HAL_GPIO_WritePin>
}
 8002d0a:	e017      	b.n	8002d3c <led_gpio_set+0xc0>
			HAL_GPIO_WritePin(LED_BLUE_PORT, LED_BLUE_PIN, LED_OFF);
 8002d0c:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <led_gpio_set+0xc8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2101      	movs	r1, #1
 8002d12:	0018      	movs	r0, r3
 8002d14:	f001 fc39 	bl	800458a <HAL_GPIO_WritePin>
}
 8002d18:	e010      	b.n	8002d3c <led_gpio_set+0xc0>
		if(status == LED_ON)
 8002d1a:	1dbb      	adds	r3, r7, #6
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d106      	bne.n	8002d30 <led_gpio_set+0xb4>
			HAL_GPIO_WritePin(LED_WHITE_PORT, LED_WHITE_PIN, LED_ON);
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <led_gpio_set+0xc8>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	2102      	movs	r1, #2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f001 fc2e 	bl	800458a <HAL_GPIO_WritePin>
}
 8002d2e:	e005      	b.n	8002d3c <led_gpio_set+0xc0>
			HAL_GPIO_WritePin(LED_WHITE_PORT, LED_WHITE_PIN, LED_OFF);
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <led_gpio_set+0xc8>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	2102      	movs	r1, #2
 8002d36:	0018      	movs	r0, r3
 8002d38:	f001 fc27 	bl	800458a <HAL_GPIO_WritePin>
}
 8002d3c:	46c0      	nop			; (mov r8, r8)
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	50000400 	.word	0x50000400

08002d48 <led_pwm_init>:


/*********************************FUNCTIONS*****************************************/

void led_pwm_init(TIM_HandleTypeDef* tim, uint16_t max_counter_value)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	000a      	movs	r2, r1
 8002d52:	1cbb      	adds	r3, r7, #2
 8002d54:	801a      	strh	r2, [r3, #0]
	led_pwm.tim3 = tim;
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <led_pwm_init+0x44>)
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	601a      	str	r2, [r3, #0]
	led_pwm.count = max_counter_value;
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <led_pwm_init+0x44>)
 8002d5e:	1cba      	adds	r2, r7, #2
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	809a      	strh	r2, [r3, #4]
	led_pwm.init_flag = 1;
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <led_pwm_init+0x44>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	719a      	strb	r2, [r3, #6]
	led_pwm.red_led = PWM_LED_OFF;
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <led_pwm_init+0x44>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	71da      	strb	r2, [r3, #7]
	led_pwm.green_led = PWM_LED_OFF;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <led_pwm_init+0x44>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	721a      	strb	r2, [r3, #8]
	led_pwm.blue_led = PWM_LED_OFF;
 8002d76:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <led_pwm_init+0x44>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	725a      	strb	r2, [r3, #9]
	led_pwm.white_led = PWM_LED_OFF;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <led_pwm_init+0x44>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	729a      	strb	r2, [r3, #10]
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b002      	add	sp, #8
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	20000284 	.word	0x20000284

08002d90 <led_pwm_set>:

void led_pwm_set(led_pwm_t led, uint8_t percentage_on)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	0002      	movs	r2, r0
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	701a      	strb	r2, [r3, #0]
 8002d9c:	1dbb      	adds	r3, r7, #6
 8002d9e:	1c0a      	adds	r2, r1, #0
 8002da0:	701a      	strb	r2, [r3, #0]
	if (led_pwm.init_flag == 0)
 8002da2:	4b51      	ldr	r3, [pc, #324]	; (8002ee8 <led_pwm_set+0x158>)
 8002da4:	799b      	ldrb	r3, [r3, #6]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d100      	bne.n	8002dac <led_pwm_set+0x1c>
 8002daa:	e098      	b.n	8002ede <led_pwm_set+0x14e>
	{
		return ;
	}

	uint16_t compare = percentage_on * led_pwm.count / 100;
 8002dac:	1dbb      	adds	r3, r7, #6
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4a4d      	ldr	r2, [pc, #308]	; (8002ee8 <led_pwm_set+0x158>)
 8002db2:	8892      	ldrh	r2, [r2, #4]
 8002db4:	4353      	muls	r3, r2
 8002db6:	2164      	movs	r1, #100	; 0x64
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7fd fa4b 	bl	8000254 <__divsi3>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	210e      	movs	r1, #14
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	801a      	strh	r2, [r3, #0]



	if (led == RED_LED)
 8002dc8:	1dfb      	adds	r3, r7, #7
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d11d      	bne.n	8002e0c <led_pwm_set+0x7c>
	{
		__HAL_TIM_SET_COMPARE(led_pwm.tim3, LED_RED_CHANNEL, compare);
 8002dd0:	4b45      	ldr	r3, [pc, #276]	; (8002ee8 <led_pwm_set+0x158>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	187a      	adds	r2, r7, r1
 8002dd8:	8812      	ldrh	r2, [r2, #0]
 8002dda:	635a      	str	r2, [r3, #52]	; 0x34

		if (compare == 0)
 8002ddc:	187b      	adds	r3, r7, r1
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d109      	bne.n	8002df8 <led_pwm_set+0x68>
		{
			HAL_TIM_PWM_Stop(led_pwm.tim3, LED_RED_CHANNEL);
 8002de4:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <led_pwm_set+0x158>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	0018      	movs	r0, r3
 8002dec:	f003 fee6 	bl	8006bbc <HAL_TIM_PWM_Stop>
			led_pwm.red_led = PWM_LED_OFF;
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <led_pwm_set+0x158>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	71da      	strb	r2, [r3, #7]
 8002df6:	e073      	b.n	8002ee0 <led_pwm_set+0x150>
		}
		else
		{
			HAL_TIM_PWM_Start(led_pwm.tim3, LED_RED_CHANNEL);
 8002df8:	4b3b      	ldr	r3, [pc, #236]	; (8002ee8 <led_pwm_set+0x158>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2100      	movs	r1, #0
 8002dfe:	0018      	movs	r0, r3
 8002e00:	f003 fe4a 	bl	8006a98 <HAL_TIM_PWM_Start>
			led_pwm.red_led = PWM_LED_ON;
 8002e04:	4b38      	ldr	r3, [pc, #224]	; (8002ee8 <led_pwm_set+0x158>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	71da      	strb	r2, [r3, #7]
 8002e0a:	e069      	b.n	8002ee0 <led_pwm_set+0x150>
		}
	}
	else if (led == GREEN_LED)
 8002e0c:	1dfb      	adds	r3, r7, #7
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d11e      	bne.n	8002e52 <led_pwm_set+0xc2>
	{
		__HAL_TIM_SET_COMPARE(led_pwm.tim3, LED_GREEN_CHANNEL, compare);
 8002e14:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <led_pwm_set+0x158>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	210e      	movs	r1, #14
 8002e1c:	187a      	adds	r2, r7, r1
 8002e1e:	8812      	ldrh	r2, [r2, #0]
 8002e20:	639a      	str	r2, [r3, #56]	; 0x38

		if (compare == 0)
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	881b      	ldrh	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <led_pwm_set+0xae>
		{
			HAL_TIM_PWM_Stop(led_pwm.tim3, LED_GREEN_CHANNEL);
 8002e2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <led_pwm_set+0x158>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2104      	movs	r1, #4
 8002e30:	0018      	movs	r0, r3
 8002e32:	f003 fec3 	bl	8006bbc <HAL_TIM_PWM_Stop>
			led_pwm.red_led = PWM_LED_OFF;
 8002e36:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <led_pwm_set+0x158>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	71da      	strb	r2, [r3, #7]
 8002e3c:	e050      	b.n	8002ee0 <led_pwm_set+0x150>
		}
		else
		{
			HAL_TIM_PWM_Start(led_pwm.tim3, LED_GREEN_CHANNEL);
 8002e3e:	4b2a      	ldr	r3, [pc, #168]	; (8002ee8 <led_pwm_set+0x158>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2104      	movs	r1, #4
 8002e44:	0018      	movs	r0, r3
 8002e46:	f003 fe27 	bl	8006a98 <HAL_TIM_PWM_Start>
			led_pwm.red_led = PWM_LED_ON;
 8002e4a:	4b27      	ldr	r3, [pc, #156]	; (8002ee8 <led_pwm_set+0x158>)
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	71da      	strb	r2, [r3, #7]
 8002e50:	e046      	b.n	8002ee0 <led_pwm_set+0x150>
		}
	}
	else if (led == BLUE_LED)
 8002e52:	1dfb      	adds	r3, r7, #7
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b03      	cmp	r3, #3
 8002e58:	d11e      	bne.n	8002e98 <led_pwm_set+0x108>
	{
		__HAL_TIM_SET_COMPARE(led_pwm.tim3, LED_BLUE_CHANNEL, compare);
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <led_pwm_set+0x158>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	210e      	movs	r1, #14
 8002e62:	187a      	adds	r2, r7, r1
 8002e64:	8812      	ldrh	r2, [r2, #0]
 8002e66:	63da      	str	r2, [r3, #60]	; 0x3c

		if (compare == 0)
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d109      	bne.n	8002e84 <led_pwm_set+0xf4>
		{
			HAL_TIM_PWM_Stop(led_pwm.tim3, LED_BLUE_CHANNEL);
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <led_pwm_set+0x158>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2108      	movs	r1, #8
 8002e76:	0018      	movs	r0, r3
 8002e78:	f003 fea0 	bl	8006bbc <HAL_TIM_PWM_Stop>
			led_pwm.red_led = PWM_LED_OFF;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <led_pwm_set+0x158>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	71da      	strb	r2, [r3, #7]
 8002e82:	e02d      	b.n	8002ee0 <led_pwm_set+0x150>
		}
		else
		{
			HAL_TIM_PWM_Start(led_pwm.tim3, LED_BLUE_CHANNEL);
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <led_pwm_set+0x158>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2108      	movs	r1, #8
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f003 fe04 	bl	8006a98 <HAL_TIM_PWM_Start>
			led_pwm.red_led = PWM_LED_ON;
 8002e90:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <led_pwm_set+0x158>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	71da      	strb	r2, [r3, #7]
 8002e96:	e023      	b.n	8002ee0 <led_pwm_set+0x150>
		}
	}
	else if (led == WHITE_LED)
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d11f      	bne.n	8002ee0 <led_pwm_set+0x150>
	{
		__HAL_TIM_SET_COMPARE(led_pwm.tim3, LED_WHITE_CHANNEL, compare);
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <led_pwm_set+0x158>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	210e      	movs	r1, #14
 8002ea8:	187a      	adds	r2, r7, r1
 8002eaa:	8812      	ldrh	r2, [r2, #0]
 8002eac:	641a      	str	r2, [r3, #64]	; 0x40

		if (compare == 0)
 8002eae:	187b      	adds	r3, r7, r1
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d109      	bne.n	8002eca <led_pwm_set+0x13a>
		{
			HAL_TIM_PWM_Stop(led_pwm.tim3, LED_WHITE_CHANNEL);
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <led_pwm_set+0x158>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	210c      	movs	r1, #12
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f003 fe7d 	bl	8006bbc <HAL_TIM_PWM_Stop>
			led_pwm.red_led = PWM_LED_OFF;
 8002ec2:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <led_pwm_set+0x158>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	71da      	strb	r2, [r3, #7]
 8002ec8:	e00a      	b.n	8002ee0 <led_pwm_set+0x150>
		}
		else
		{
			HAL_TIM_PWM_Start(led_pwm.tim3, LED_WHITE_CHANNEL);
 8002eca:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <led_pwm_set+0x158>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	210c      	movs	r1, #12
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f003 fde1 	bl	8006a98 <HAL_TIM_PWM_Start>
			led_pwm.red_led = PWM_LED_ON;
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <led_pwm_set+0x158>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	71da      	strb	r2, [r3, #7]
 8002edc:	e000      	b.n	8002ee0 <led_pwm_set+0x150>
		return ;
 8002ede:	46c0      	nop			; (mov r8, r8)
	}




}
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	20000284 	.word	0x20000284

08002eec <led_pwm_all_off>:

void led_pwm_all_off(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	//turn off led array
	timer_off(&htim7);
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <led_pwm_all_off+0x5c>)
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 f960 	bl	80031b8 <timer_off>

	HAL_TIM_PWM_Stop(led_pwm.tim3, LED_RED_CHANNEL);
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <led_pwm_all_off+0x60>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2100      	movs	r1, #0
 8002efe:	0018      	movs	r0, r3
 8002f00:	f003 fe5c 	bl	8006bbc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(led_pwm.tim3, LED_GREEN_CHANNEL);
 8002f04:	4b11      	ldr	r3, [pc, #68]	; (8002f4c <led_pwm_all_off+0x60>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2104      	movs	r1, #4
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f003 fe56 	bl	8006bbc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(led_pwm.tim3, LED_BLUE_CHANNEL);
 8002f10:	4b0e      	ldr	r3, [pc, #56]	; (8002f4c <led_pwm_all_off+0x60>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2108      	movs	r1, #8
 8002f16:	0018      	movs	r0, r3
 8002f18:	f003 fe50 	bl	8006bbc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(led_pwm.tim3, LED_WHITE_CHANNEL);
 8002f1c:	4b0b      	ldr	r3, [pc, #44]	; (8002f4c <led_pwm_all_off+0x60>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	210c      	movs	r1, #12
 8002f22:	0018      	movs	r0, r3
 8002f24:	f003 fe4a 	bl	8006bbc <HAL_TIM_PWM_Stop>

	led_pwm.red_led = PWM_LED_OFF;
 8002f28:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <led_pwm_all_off+0x60>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	71da      	strb	r2, [r3, #7]
	led_pwm.green_led = PWM_LED_OFF;
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <led_pwm_all_off+0x60>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	721a      	strb	r2, [r3, #8]
	led_pwm.blue_led = PWM_LED_OFF;
 8002f34:	4b05      	ldr	r3, [pc, #20]	; (8002f4c <led_pwm_all_off+0x60>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	725a      	strb	r2, [r3, #9]
	led_pwm.white_led = PWM_LED_OFF;
 8002f3a:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <led_pwm_all_off+0x60>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	729a      	strb	r2, [r3, #10]
}
 8002f40:	46c0      	nop			; (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	20000380 	.word	0x20000380
 8002f4c:	20000284 	.word	0x20000284

08002f50 <get_led_red>:


led_output_t get_led_red(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
	return led_pwm.red_led;
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <get_led_red+0x10>)
 8002f56:	79db      	ldrb	r3, [r3, #7]
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	20000284 	.word	0x20000284

08002f64 <get_led_green>:


led_output_t get_led_green(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
	return led_pwm.green_led;
 8002f68:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <get_led_green+0x10>)
 8002f6a:	7a1b      	ldrb	r3, [r3, #8]
}
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	20000284 	.word	0x20000284

08002f78 <get_led_blue>:


led_output_t get_led_blue(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
	return led_pwm.blue_led;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <get_led_blue+0x10>)
 8002f7e:	7a5b      	ldrb	r3, [r3, #9]
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	20000284 	.word	0x20000284

08002f8c <get_led_white>:


led_output_t get_led_white(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	return led_pwm.white_led;
 8002f90:	4b02      	ldr	r3, [pc, #8]	; (8002f9c <get_led_white+0x10>)
 8002f92:	7a9b      	ldrb	r3, [r3, #10]
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			; (mov r8, r8)
 8002f9c:	20000284 	.word	0x20000284

08002fa0 <init_MAX17048>:


/*********************************FUNCTIONS*****************************************/

void init_MAX17048(I2C_HandleTypeDef* i2c, uint8_t addr, uint32_t timeout_ms)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	200b      	movs	r0, #11
 8002fac:	183b      	adds	r3, r7, r0
 8002fae:	1c0a      	adds	r2, r1, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
	max17048.i2c_comm = i2c;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <init_MAX17048+0x30>)
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	601a      	str	r2, [r3, #0]
	max17048.i2c_addr = addr;
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <init_MAX17048+0x30>)
 8002fba:	183a      	adds	r2, r7, r0
 8002fbc:	7812      	ldrb	r2, [r2, #0]
 8002fbe:	711a      	strb	r2, [r3, #4]
	max17048.timeout_ms = timeout_ms;
 8002fc0:	4b03      	ldr	r3, [pc, #12]	; (8002fd0 <init_MAX17048+0x30>)
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	609a      	str	r2, [r3, #8]
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b004      	add	sp, #16
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	20000258 	.word	0x20000258

08002fd4 <get_MAX17048_vcell_value>:

void get_MAX17048_vcell_value(float* vcell_value)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	6078      	str	r0, [r7, #4]

	uint8_t received_data[2] = {0, 0};
 8002fdc:	240c      	movs	r4, #12
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	801a      	strh	r2, [r3, #0]

	if (HAL_I2C_Master_Transmit(max17048.i2c_comm, max17048.i2c_addr << 1, &vcell_msb, 1, max17048.timeout_ms) == HAL_OK)
 8002fe4:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8002fe6:	6818      	ldr	r0, [r3, #0]
 8002fe8:	4b2f      	ldr	r3, [pc, #188]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8002fea:	791b      	ldrb	r3, [r3, #4]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	18db      	adds	r3, r3, r3
 8002ff0:	b299      	uxth	r1, r3
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	4a2d      	ldr	r2, [pc, #180]	; (80030ac <get_MAX17048_vcell_value+0xd8>)
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	f001 fb9e 	bl	800473c <HAL_I2C_Master_Transmit>
 8003000:	1e03      	subs	r3, r0, #0
 8003002:	d10e      	bne.n	8003022 <get_MAX17048_vcell_value+0x4e>
	{
		HAL_I2C_Master_Receive(max17048.i2c_comm, max17048.i2c_addr << 1, &received_data[1], 1, max17048.timeout_ms);
 8003004:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	4b27      	ldr	r3, [pc, #156]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 800300a:	791b      	ldrb	r3, [r3, #4]
 800300c:	b29b      	uxth	r3, r3
 800300e:	18db      	adds	r3, r3, r3
 8003010:	b299      	uxth	r1, r3
 8003012:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	193a      	adds	r2, r7, r4
 8003018:	3201      	adds	r2, #1
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	2301      	movs	r3, #1
 800301e:	f001 fc95 	bl	800494c <HAL_I2C_Master_Receive>
	}

	if (HAL_I2C_Master_Transmit(max17048.i2c_comm, max17048.i2c_addr << 1, &vcell_lsb, 1, max17048.timeout_ms) == HAL_OK)
 8003022:	4b21      	ldr	r3, [pc, #132]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8003024:	6818      	ldr	r0, [r3, #0]
 8003026:	4b20      	ldr	r3, [pc, #128]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8003028:	791b      	ldrb	r3, [r3, #4]
 800302a:	b29b      	uxth	r3, r3
 800302c:	18db      	adds	r3, r3, r3
 800302e:	b299      	uxth	r1, r3
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <get_MAX17048_vcell_value+0xdc>)
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	2301      	movs	r3, #1
 800303a:	f001 fb7f 	bl	800473c <HAL_I2C_Master_Transmit>
 800303e:	1e03      	subs	r3, r0, #0
 8003040:	d10e      	bne.n	8003060 <get_MAX17048_vcell_value+0x8c>
	{
		HAL_I2C_Master_Receive(max17048.i2c_comm, max17048.i2c_addr << 1, &received_data[0], 1, max17048.timeout_ms);
 8003042:	4b19      	ldr	r3, [pc, #100]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8003044:	6818      	ldr	r0, [r3, #0]
 8003046:	4b18      	ldr	r3, [pc, #96]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8003048:	791b      	ldrb	r3, [r3, #4]
 800304a:	b29b      	uxth	r3, r3
 800304c:	18db      	adds	r3, r3, r3
 800304e:	b299      	uxth	r1, r3
 8003050:	4b15      	ldr	r3, [pc, #84]	; (80030a8 <get_MAX17048_vcell_value+0xd4>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	220c      	movs	r2, #12
 8003056:	18ba      	adds	r2, r7, r2
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2301      	movs	r3, #1
 800305c:	f001 fc76 	bl	800494c <HAL_I2C_Master_Receive>
	}

	*vcell_value = ((received_data[1] << 8) | (received_data[0])) * 78.125 * pow(10, -6);
 8003060:	220c      	movs	r2, #12
 8003062:	18bb      	adds	r3, r7, r2
 8003064:	785b      	ldrb	r3, [r3, #1]
 8003066:	021b      	lsls	r3, r3, #8
 8003068:	18ba      	adds	r2, r7, r2
 800306a:	7812      	ldrb	r2, [r2, #0]
 800306c:	4313      	orrs	r3, r2
 800306e:	0018      	movs	r0, r3
 8003070:	f7ff f90e 	bl	8002290 <__aeabi_i2d>
 8003074:	2200      	movs	r2, #0
 8003076:	4b0f      	ldr	r3, [pc, #60]	; (80030b4 <get_MAX17048_vcell_value+0xe0>)
 8003078:	f7fe fab8 	bl	80015ec <__aeabi_dmul>
 800307c:	0002      	movs	r2, r0
 800307e:	000b      	movs	r3, r1
 8003080:	0010      	movs	r0, r2
 8003082:	0019      	movs	r1, r3
 8003084:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <get_MAX17048_vcell_value+0xe4>)
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <get_MAX17048_vcell_value+0xe8>)
 8003088:	f7fe fab0 	bl	80015ec <__aeabi_dmul>
 800308c:	0002      	movs	r2, r0
 800308e:	000b      	movs	r3, r1
 8003090:	0010      	movs	r0, r2
 8003092:	0019      	movs	r1, r3
 8003094:	f7ff f99a 	bl	80023cc <__aeabi_d2f>
 8003098:	1c02      	adds	r2, r0, #0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	601a      	str	r2, [r3, #0]


}
 800309e:	46c0      	nop			; (mov r8, r8)
 80030a0:	46bd      	mov	sp, r7
 80030a2:	b005      	add	sp, #20
 80030a4:	bd90      	pop	{r4, r7, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)
 80030a8:	20000258 	.word	0x20000258
 80030ac:	20000000 	.word	0x20000000
 80030b0:	20000001 	.word	0x20000001
 80030b4:	40538800 	.word	0x40538800
 80030b8:	a0b5ed8d 	.word	0xa0b5ed8d
 80030bc:	3eb0c6f7 	.word	0x3eb0c6f7

080030c0 <pwr_modes_stop_preparation>:
}


//** STOP MODE **//
void pwr_modes_stop_preparation(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c4:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <pwr_modes_stop_preparation+0x30>)
 80030c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030c8:	4b09      	ldr	r3, [pc, #36]	; (80030f0 <pwr_modes_stop_preparation+0x30>)
 80030ca:	2180      	movs	r1, #128	; 0x80
 80030cc:	0549      	lsls	r1, r1, #21
 80030ce:	430a      	orrs	r2, r1
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable Ultra low power mode */
  HAL_PWREx_EnableUltraLowPower();
 80030d2:	f002 f84b 	bl	800516c <HAL_PWREx_EnableUltraLowPower>

  /* Enable the fast wake up from Ultra low power mode */
  HAL_PWREx_EnableFastWakeUp();
 80030d6:	f002 f83b 	bl	8005150 <HAL_PWREx_EnableFastWakeUp>

  /* Select HSI as system clock source after Wake Up from Stop mode */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_HSI);
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <pwr_modes_stop_preparation+0x30>)
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	4b04      	ldr	r3, [pc, #16]	; (80030f0 <pwr_modes_stop_preparation+0x30>)
 80030e0:	2180      	movs	r1, #128	; 0x80
 80030e2:	0209      	lsls	r1, r1, #8
 80030e4:	430a      	orrs	r2, r1
 80030e6:	60da      	str	r2, [r3, #12]
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	46c0      	nop			; (mov r8, r8)
 80030f0:	40021000 	.word	0x40021000

080030f4 <pwr_modes_enter_stop>:

void pwr_modes_enter_stop(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <pwr_modes_enter_stop+0x48>)
 80030fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <pwr_modes_enter_stop+0x48>)
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0549      	lsls	r1, r1, #21
 8003102:	430a      	orrs	r2, r1
 8003104:	639a      	str	r2, [r3, #56]	; 0x38

  /* Suspend SysTick */
  HAL_SuspendTick();
 8003106:	f000 ffab 	bl	8004060 <HAL_SuspendTick>
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800310a:	2101      	movs	r1, #1
 800310c:	2001      	movs	r0, #1
 800310e:	f001 ffc3 	bl	8005098 <HAL_PWR_EnterSTOPMode>
  /* Resume SysTick */
  HAL_ResumeTick();
 8003112:	f000 ffb3 	bl	800407c <HAL_ResumeTick>

  /* Clear Wake Up Flag */
  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8003116:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <pwr_modes_enter_stop+0x4c>)
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <pwr_modes_enter_stop+0x4c>)
 800311c:	2104      	movs	r1, #4
 800311e:	430a      	orrs	r2, r1
 8003120:	601a      	str	r2, [r3, #0]

  /* Configures system clock after wake-up from STOP */
  SystemClock_Config();
 8003122:	f000 f9d3 	bl	80034cc <SystemClock_Config>

  // MORA postojati odredena pauza kod budenja iz stop mode-a da se periferija tipa UART uspije postaviti prije nego se koristi
  HAL_Delay(20);
 8003126:	2014      	movs	r0, #20
 8003128:	f000 ff76 	bl	8004018 <HAL_Delay>

  /* "Hack" - problem sa overrunning-om */
  HAL_UART_Init(&huart1);
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <pwr_modes_enter_stop+0x50>)
 800312e:	0018      	movs	r0, r3
 8003130:	f004 f952 	bl	80073d8 <HAL_UART_Init>
}
 8003134:	46c0      	nop			; (mov r8, r8)
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	40021000 	.word	0x40021000
 8003140:	40007000 	.word	0x40007000
 8003144:	200003c0 	.word	0x200003c0

08003148 <timer_on>:
/****************************FORWARD DECLARATIONS***********************************/


/*********************************FUNCTIONS*****************************************/
void timer_on(TIM_HandleTypeDef* tim, uint8_t interval_s)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	000a      	movs	r2, r1
 8003152:	1cfb      	adds	r3, r7, #3
 8003154:	701a      	strb	r2, [r3, #0]
	uint32_t counter_value = 0;
 8003156:	2300      	movs	r3, #0
 8003158:	60fb      	str	r3, [r7, #12]
	uint32_t counter_max_value = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]

	counter_max_value = interval_s / TIM_FREQ;
 800315e:	1cfb      	adds	r3, r7, #3
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	0018      	movs	r0, r3
 8003164:	f7ff f894 	bl	8002290 <__aeabi_i2d>
 8003168:	4a11      	ldr	r2, [pc, #68]	; (80031b0 <timer_on+0x68>)
 800316a:	4b12      	ldr	r3, [pc, #72]	; (80031b4 <timer_on+0x6c>)
 800316c:	f7fd fe38 	bl	8000de0 <__aeabi_ddiv>
 8003170:	0002      	movs	r2, r0
 8003172:	000b      	movs	r3, r1
 8003174:	0010      	movs	r0, r2
 8003176:	0019      	movs	r1, r3
 8003178:	f7fd f9de 	bl	8000538 <__aeabi_d2uiz>
 800317c:	0003      	movs	r3, r0
 800317e:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2202      	movs	r2, #2
 8003186:	4252      	negs	r2, r2
 8003188:	611a      	str	r2, [r3, #16]
	__HAL_TIM_SET_COUNTER(tim, counter_value);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	625a      	str	r2, [r3, #36]	; 0x24
	// set counter_max_value as value until the counter counts
	__HAL_TIM_SET_AUTORELOAD(tim, counter_max_value);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	62da      	str	r2, [r3, #44]	; 0x2c
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	60da      	str	r2, [r3, #12]

	// start timer
	HAL_TIM_Base_Start_IT(tim);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f003 fbc0 	bl	8006928 <HAL_TIM_Base_Start_IT>
}
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b004      	add	sp, #16
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80031b4:	3f50624d 	.word	0x3f50624d

080031b8 <timer_off>:


void timer_off(TIM_HandleTypeDef* tim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop_IT(tim);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f003 fc02 	bl	80069cc <HAL_TIM_Base_Stop_IT>
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <is_timer_on>:


timer_status_t is_timer_on(TIM_HandleTypeDef* tim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
	if ((tim->Instance->CR1) && 0x01 == 1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <is_timer_on+0x16>
		return timer_started;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e000      	b.n	80031e8 <is_timer_on+0x18>
	else
		return timer_stopped;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	0018      	movs	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	b002      	add	sp, #8
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b08b      	sub	sp, #44	; 0x2c
 80031f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f6:	2414      	movs	r4, #20
 80031f8:	193b      	adds	r3, r7, r4
 80031fa:	0018      	movs	r0, r3
 80031fc:	2314      	movs	r3, #20
 80031fe:	001a      	movs	r2, r3
 8003200:	2100      	movs	r1, #0
 8003202:	f004 ff7b 	bl	80080fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003206:	4b2f      	ldr	r3, [pc, #188]	; (80032c4 <MX_GPIO_Init+0xd4>)
 8003208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800320a:	4b2e      	ldr	r3, [pc, #184]	; (80032c4 <MX_GPIO_Init+0xd4>)
 800320c:	2104      	movs	r1, #4
 800320e:	430a      	orrs	r2, r1
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
 8003212:	4b2c      	ldr	r3, [pc, #176]	; (80032c4 <MX_GPIO_Init+0xd4>)
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	2204      	movs	r2, #4
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800321e:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <MX_GPIO_Init+0xd4>)
 8003220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003222:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <MX_GPIO_Init+0xd4>)
 8003224:	2180      	movs	r1, #128	; 0x80
 8003226:	430a      	orrs	r2, r1
 8003228:	62da      	str	r2, [r3, #44]	; 0x2c
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <MX_GPIO_Init+0xd4>)
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	2280      	movs	r2, #128	; 0x80
 8003230:	4013      	ands	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <MX_GPIO_Init+0xd4>)
 8003238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800323a:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <MX_GPIO_Init+0xd4>)
 800323c:	2101      	movs	r1, #1
 800323e:	430a      	orrs	r2, r1
 8003240:	62da      	str	r2, [r3, #44]	; 0x2c
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <MX_GPIO_Init+0xd4>)
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	2201      	movs	r2, #1
 8003248:	4013      	ands	r3, r2
 800324a:	60bb      	str	r3, [r7, #8]
 800324c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800324e:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <MX_GPIO_Init+0xd4>)
 8003250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003252:	4b1c      	ldr	r3, [pc, #112]	; (80032c4 <MX_GPIO_Init+0xd4>)
 8003254:	2102      	movs	r1, #2
 8003256:	430a      	orrs	r2, r1
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
 800325a:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <MX_GPIO_Init+0xd4>)
 800325c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325e:	2202      	movs	r2, #2
 8003260:	4013      	ands	r3, r2
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003266:	193b      	adds	r3, r7, r4
 8003268:	2280      	movs	r2, #128	; 0x80
 800326a:	0192      	lsls	r2, r2, #6
 800326c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800326e:	193b      	adds	r3, r7, r4
 8003270:	2200      	movs	r2, #0
 8003272:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003274:	193b      	adds	r3, r7, r4
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327a:	193b      	adds	r3, r7, r4
 800327c:	4a12      	ldr	r2, [pc, #72]	; (80032c8 <MX_GPIO_Init+0xd8>)
 800327e:	0019      	movs	r1, r3
 8003280:	0010      	movs	r0, r2
 8003282:	f000 ffe7 	bl	8004254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003286:	0021      	movs	r1, r4
 8003288:	187b      	adds	r3, r7, r1
 800328a:	2280      	movs	r2, #128	; 0x80
 800328c:	0112      	lsls	r2, r2, #4
 800328e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003290:	187b      	adds	r3, r7, r1
 8003292:	2288      	movs	r2, #136	; 0x88
 8003294:	0352      	lsls	r2, r2, #13
 8003296:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	187b      	adds	r3, r7, r1
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800329e:	187a      	adds	r2, r7, r1
 80032a0:	23a0      	movs	r3, #160	; 0xa0
 80032a2:	05db      	lsls	r3, r3, #23
 80032a4:	0011      	movs	r1, r2
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 ffd4 	bl	8004254 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80032ac:	2200      	movs	r2, #0
 80032ae:	2103      	movs	r1, #3
 80032b0:	2007      	movs	r0, #7
 80032b2:	f000 ff9d 	bl	80041f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80032b6:	2007      	movs	r0, #7
 80032b8:	f000 ffaf 	bl	800421a <HAL_NVIC_EnableIRQ>

}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	46bd      	mov	sp, r7
 80032c0:	b00b      	add	sp, #44	; 0x2c
 80032c2:	bd90      	pop	{r4, r7, pc}
 80032c4:	40021000 	.word	0x40021000
 80032c8:	50000800 	.word	0x50000800

080032cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <MX_I2C1_Init+0x74>)
 80032d2:	4a1c      	ldr	r2, [pc, #112]	; (8003344 <MX_I2C1_Init+0x78>)
 80032d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <MX_I2C1_Init+0x74>)
 80032d8:	4a1b      	ldr	r2, [pc, #108]	; (8003348 <MX_I2C1_Init+0x7c>)
 80032da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <MX_I2C1_Init+0x74>)
 80032de:	2200      	movs	r2, #0
 80032e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <MX_I2C1_Init+0x74>)
 80032e4:	2201      	movs	r2, #1
 80032e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80032e8:	4b15      	ldr	r3, [pc, #84]	; (8003340 <MX_I2C1_Init+0x74>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <MX_I2C1_Init+0x74>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80032f4:	4b12      	ldr	r3, [pc, #72]	; (8003340 <MX_I2C1_Init+0x74>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <MX_I2C1_Init+0x74>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003300:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <MX_I2C1_Init+0x74>)
 8003302:	2200      	movs	r2, #0
 8003304:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003306:	4b0e      	ldr	r3, [pc, #56]	; (8003340 <MX_I2C1_Init+0x74>)
 8003308:	0018      	movs	r0, r3
 800330a:	f001 f981 	bl	8004610 <HAL_I2C_Init>
 800330e:	1e03      	subs	r3, r0, #0
 8003310:	d001      	beq.n	8003316 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003312:	f000 f955 	bl	80035c0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003316:	4b0a      	ldr	r3, [pc, #40]	; (8003340 <MX_I2C1_Init+0x74>)
 8003318:	2100      	movs	r1, #0
 800331a:	0018      	movs	r0, r3
 800331c:	f001 fe16 	bl	8004f4c <HAL_I2CEx_ConfigAnalogFilter>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d001      	beq.n	8003328 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003324:	f000 f94c 	bl	80035c0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <MX_I2C1_Init+0x74>)
 800332a:	2100      	movs	r1, #0
 800332c:	0018      	movs	r0, r3
 800332e:	f001 fe59 	bl	8004fe4 <HAL_I2CEx_ConfigDigitalFilter>
 8003332:	1e03      	subs	r3, r0, #0
 8003334:	d001      	beq.n	800333a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003336:	f000 f943 	bl	80035c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000290 	.word	0x20000290
 8003344:	40005400 	.word	0x40005400
 8003348:	2000090e 	.word	0x2000090e

0800334c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	240c      	movs	r4, #12
 8003356:	193b      	adds	r3, r7, r4
 8003358:	0018      	movs	r0, r3
 800335a:	2314      	movs	r3, #20
 800335c:	001a      	movs	r2, r3
 800335e:	2100      	movs	r1, #0
 8003360:	f004 fecc 	bl	80080fc <memset>
  if(i2cHandle->Instance==I2C1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a17      	ldr	r2, [pc, #92]	; (80033c8 <HAL_I2C_MspInit+0x7c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d128      	bne.n	80033c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_I2C_MspInit+0x80>)
 8003370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003372:	4b16      	ldr	r3, [pc, #88]	; (80033cc <HAL_I2C_MspInit+0x80>)
 8003374:	2102      	movs	r1, #2
 8003376:	430a      	orrs	r2, r1
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c
 800337a:	4b14      	ldr	r3, [pc, #80]	; (80033cc <HAL_I2C_MspInit+0x80>)
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	2202      	movs	r2, #2
 8003380:	4013      	ands	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003386:	0021      	movs	r1, r4
 8003388:	187b      	adds	r3, r7, r1
 800338a:	22c0      	movs	r2, #192	; 0xc0
 800338c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800338e:	187b      	adds	r3, r7, r1
 8003390:	2212      	movs	r2, #18
 8003392:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003394:	187b      	adds	r3, r7, r1
 8003396:	2201      	movs	r2, #1
 8003398:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339a:	187b      	adds	r3, r7, r1
 800339c:	2203      	movs	r2, #3
 800339e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80033a0:	187b      	adds	r3, r7, r1
 80033a2:	2201      	movs	r2, #1
 80033a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a6:	187b      	adds	r3, r7, r1
 80033a8:	4a09      	ldr	r2, [pc, #36]	; (80033d0 <HAL_I2C_MspInit+0x84>)
 80033aa:	0019      	movs	r1, r3
 80033ac:	0010      	movs	r0, r2
 80033ae:	f000 ff51 	bl	8004254 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033b2:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_I2C_MspInit+0x80>)
 80033b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b6:	4b05      	ldr	r3, [pc, #20]	; (80033cc <HAL_I2C_MspInit+0x80>)
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	0389      	lsls	r1, r1, #14
 80033bc:	430a      	orrs	r2, r1
 80033be:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80033c0:	46c0      	nop			; (mov r8, r8)
 80033c2:	46bd      	mov	sp, r7
 80033c4:	b009      	add	sp, #36	; 0x24
 80033c6:	bd90      	pop	{r4, r7, pc}
 80033c8:	40005400 	.word	0x40005400
 80033cc:	40021000 	.word	0x40021000
 80033d0:	50000400 	.word	0x50000400

080033d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80033d4:	b590      	push	{r4, r7, lr}
 80033d6:	b08d      	sub	sp, #52	; 0x34
 80033d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80033da:	f000 fdad 	bl	8003f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80033de:	f000 f875 	bl	80034cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80033e2:	f7ff ff05 	bl	80031f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80033e6:	f7ff ff71 	bl	80032cc <MX_I2C1_Init>
  MX_TIM6_Init();
 80033ea:	f000 fbdd 	bl	8003ba8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80033ee:	f000 fc17 	bl	8003c20 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80033f2:	f000 fcff 	bl	8003df4 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80033f6:	f000 fb51 	bl	8003a9c <MX_TIM3_Init>
  MX_RTC_Init();
 80033fa:	f000 f8e7 	bl	80035cc <MX_RTC_Init>

  // below line commented because same PINs are used for PWM
  // led_gpio_set(GREEN, LED_ON);

  // BSP layer MAX17048 sensor init
  init_MAX17048(&hi2c1, MAX17048_I2C_ADDR, 20);
 80033fe:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <main+0xe0>)
 8003400:	2214      	movs	r2, #20
 8003402:	2136      	movs	r1, #54	; 0x36
 8003404:	0018      	movs	r0, r3
 8003406:	f7ff fdcb 	bl	8002fa0 <init_MAX17048>

  // BSP layer BLE init
  ble_init(&huart1, BLE_MAX_EXPECTED_RX_HEADER_BYTES, TIMEOUT_MS);
 800340a:	4b2b      	ldr	r3, [pc, #172]	; (80034b8 <main+0xe4>)
 800340c:	2264      	movs	r2, #100	; 0x64
 800340e:	2104      	movs	r1, #4
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff f88d 	bl	8002530 <ble_init>

  // BSP layer LED PWM init
  led_pwm_init(&htim3, 250);
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <main+0xe8>)
 8003418:	21fa      	movs	r1, #250	; 0xfa
 800341a:	0018      	movs	r0, r3
 800341c:	f7ff fc94 	bl	8002d48 <led_pwm_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  ble_handler();
 8003420:	f7ff f92e 	bl	8002680 <ble_handler>


	  if (g_batt_status == 1)
 8003424:	4b26      	ldr	r3, [pc, #152]	; (80034c0 <main+0xec>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d12a      	bne.n	8003482 <main+0xae>
	  {
		  g_batt_status = 0;
 800342c:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <main+0xec>)
 800342e:	2200      	movs	r2, #0
 8003430:	701a      	strb	r2, [r3, #0]

		  // send bat state to mobile phone

		  float vcell_value = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c

		  get_MAX17048_vcell_value(&vcell_value);
 8003436:	232c      	movs	r3, #44	; 0x2c
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	0018      	movs	r0, r3
 800343c:	f7ff fdca 	bl	8002fd4 <get_MAX17048_vcell_value>

		  // define text we want to send to mobile phone
		  char vcell_tekst[40] = {0};
 8003440:	1d3b      	adds	r3, r7, #4
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]
 8003446:	3304      	adds	r3, #4
 8003448:	2224      	movs	r2, #36	; 0x24
 800344a:	2100      	movs	r1, #0
 800344c:	0018      	movs	r0, r3
 800344e:	f004 fe55 	bl	80080fc <memset>
		  sprintf(&vcell_tekst[0], "Napon baterije je: %.2f V\r\n", vcell_value);
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	1c18      	adds	r0, r3, #0
 8003456:	f7fe ff71 	bl	800233c <__aeabi_f2d>
 800345a:	0002      	movs	r2, r0
 800345c:	000b      	movs	r3, r1
 800345e:	4919      	ldr	r1, [pc, #100]	; (80034c4 <main+0xf0>)
 8003460:	1d38      	adds	r0, r7, #4
 8003462:	f005 facd 	bl	8008a00 <siprintf>

		  // Send to mobile phone
		  HAL_UART_Transmit(ble.uart, (uint8_t*) vcell_tekst, strlen(vcell_tekst), ble.timeout_ms);
 8003466:	4b18      	ldr	r3, [pc, #96]	; (80034c8 <main+0xf4>)
 8003468:	681c      	ldr	r4, [r3, #0]
 800346a:	1d3b      	adds	r3, r7, #4
 800346c:	0018      	movs	r0, r3
 800346e:	f7fc fe4b 	bl	8000108 <strlen>
 8003472:	0003      	movs	r3, r0
 8003474:	b29a      	uxth	r2, r3
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <main+0xf4>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	1d39      	adds	r1, r7, #4
 800347c:	0020      	movs	r0, r4
 800347e:	f003 ffff 	bl	8007480 <HAL_UART_Transmit>

	  }

	  // Ulazak u STOP mode
	  if (is_phone_connected() == MOBILE_NOT_CONNECTED &&
 8003482:	f7ff f977 	bl	8002774 <is_phone_connected>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d1ca      	bne.n	8003420 <main+0x4c>
			  (get_led_red() == PWM_LED_OFF) &&
 800348a:	f7ff fd61 	bl	8002f50 <get_led_red>
 800348e:	1e03      	subs	r3, r0, #0
	  if (is_phone_connected() == MOBILE_NOT_CONNECTED &&
 8003490:	d1c6      	bne.n	8003420 <main+0x4c>
			  (get_led_green() == PWM_LED_OFF) &&
 8003492:	f7ff fd67 	bl	8002f64 <get_led_green>
 8003496:	1e03      	subs	r3, r0, #0
			  (get_led_red() == PWM_LED_OFF) &&
 8003498:	d1c2      	bne.n	8003420 <main+0x4c>
			  (get_led_blue() == PWM_LED_OFF) &&
 800349a:	f7ff fd6d 	bl	8002f78 <get_led_blue>
 800349e:	1e03      	subs	r3, r0, #0
			  (get_led_green() == PWM_LED_OFF) &&
 80034a0:	d1be      	bne.n	8003420 <main+0x4c>
			  (get_led_white() == PWM_LED_OFF))
 80034a2:	f7ff fd73 	bl	8002f8c <get_led_white>
 80034a6:	1e03      	subs	r3, r0, #0
			  (get_led_blue() == PWM_LED_OFF) &&
 80034a8:	d1ba      	bne.n	8003420 <main+0x4c>
	  {

		  pwr_modes_stop_preparation();
 80034aa:	f7ff fe09 	bl	80030c0 <pwr_modes_stop_preparation>
		  pwr_modes_enter_stop();
 80034ae:	f7ff fe21 	bl	80030f4 <pwr_modes_enter_stop>
	  ble_handler();
 80034b2:	e7b5      	b.n	8003420 <main+0x4c>
 80034b4:	20000290 	.word	0x20000290
 80034b8:	200003c0 	.word	0x200003c0
 80034bc:	20000300 	.word	0x20000300
 80034c0:	20000264 	.word	0x20000264
 80034c4:	0800b0a0 	.word	0x0800b0a0
 80034c8:	20000274 	.word	0x20000274

080034cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b09f      	sub	sp, #124	; 0x7c
 80034d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034d2:	2440      	movs	r4, #64	; 0x40
 80034d4:	193b      	adds	r3, r7, r4
 80034d6:	0018      	movs	r0, r3
 80034d8:	2338      	movs	r3, #56	; 0x38
 80034da:	001a      	movs	r2, r3
 80034dc:	2100      	movs	r1, #0
 80034de:	f004 fe0d 	bl	80080fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034e2:	232c      	movs	r3, #44	; 0x2c
 80034e4:	18fb      	adds	r3, r7, r3
 80034e6:	0018      	movs	r0, r3
 80034e8:	2314      	movs	r3, #20
 80034ea:	001a      	movs	r2, r3
 80034ec:	2100      	movs	r1, #0
 80034ee:	f004 fe05 	bl	80080fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	0018      	movs	r0, r3
 80034f6:	2328      	movs	r3, #40	; 0x28
 80034f8:	001a      	movs	r2, r3
 80034fa:	2100      	movs	r1, #0
 80034fc:	f004 fdfe 	bl	80080fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003500:	4b2c      	ldr	r3, [pc, #176]	; (80035b4 <SystemClock_Config+0xe8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2c      	ldr	r2, [pc, #176]	; (80035b8 <SystemClock_Config+0xec>)
 8003506:	401a      	ands	r2, r3
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <SystemClock_Config+0xe8>)
 800350a:	2180      	movs	r1, #128	; 0x80
 800350c:	0109      	lsls	r1, r1, #4
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003512:	f001 fdb3 	bl	800507c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003516:	4b29      	ldr	r3, [pc, #164]	; (80035bc <SystemClock_Config+0xf0>)
 8003518:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800351a:	4b28      	ldr	r3, [pc, #160]	; (80035bc <SystemClock_Config+0xf0>)
 800351c:	4926      	ldr	r1, [pc, #152]	; (80035b8 <SystemClock_Config+0xec>)
 800351e:	400a      	ands	r2, r1
 8003520:	651a      	str	r2, [r3, #80]	; 0x50
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003522:	193b      	adds	r3, r7, r4
 8003524:	2205      	movs	r2, #5
 8003526:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003528:	193b      	adds	r3, r7, r4
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	0252      	lsls	r2, r2, #9
 800352e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003530:	193b      	adds	r3, r7, r4
 8003532:	2280      	movs	r2, #128	; 0x80
 8003534:	0052      	lsls	r2, r2, #1
 8003536:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003538:	193b      	adds	r3, r7, r4
 800353a:	2200      	movs	r2, #0
 800353c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800353e:	193b      	adds	r3, r7, r4
 8003540:	0018      	movs	r0, r3
 8003542:	f001 fe21 	bl	8005188 <HAL_RCC_OscConfig>
 8003546:	1e03      	subs	r3, r0, #0
 8003548:	d001      	beq.n	800354e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800354a:	f000 f839 	bl	80035c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	187b      	adds	r3, r7, r1
 8003552:	220f      	movs	r2, #15
 8003554:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003556:	187b      	adds	r3, r7, r1
 8003558:	2202      	movs	r2, #2
 800355a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800355c:	187b      	adds	r3, r7, r1
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003562:	187b      	adds	r3, r7, r1
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003568:	187b      	adds	r3, r7, r1
 800356a:	2200      	movs	r2, #0
 800356c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800356e:	187b      	adds	r3, r7, r1
 8003570:	2100      	movs	r1, #0
 8003572:	0018      	movs	r0, r3
 8003574:	f002 f9dc 	bl	8005930 <HAL_RCC_ClockConfig>
 8003578:	1e03      	subs	r3, r0, #0
 800357a:	d001      	beq.n	8003580 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800357c:	f000 f820 	bl	80035c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8003580:	1d3b      	adds	r3, r7, #4
 8003582:	2229      	movs	r2, #41	; 0x29
 8003584:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	2200      	movs	r2, #0
 800358a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	2200      	movs	r2, #0
 8003590:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003592:	1d3b      	adds	r3, r7, #4
 8003594:	2280      	movs	r2, #128	; 0x80
 8003596:	0252      	lsls	r2, r2, #9
 8003598:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800359a:	1d3b      	adds	r3, r7, #4
 800359c:	0018      	movs	r0, r3
 800359e:	f002 fbeb 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d001      	beq.n	80035aa <SystemClock_Config+0xde>
  {
    Error_Handler();
 80035a6:	f000 f80b 	bl	80035c0 <Error_Handler>
  }
}
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b01f      	add	sp, #124	; 0x7c
 80035b0:	bd90      	pop	{r4, r7, pc}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	40007000 	.word	0x40007000
 80035b8:	ffffe7ff 	.word	0xffffe7ff
 80035bc:	40021000 	.word	0x40021000

080035c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035c4:	b672      	cpsid	i
}
 80035c6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035c8:	e7fe      	b.n	80035c8 <Error_Handler+0x8>
	...

080035cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b090      	sub	sp, #64	; 0x40
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80035d2:	232c      	movs	r3, #44	; 0x2c
 80035d4:	18fb      	adds	r3, r7, r3
 80035d6:	0018      	movs	r0, r3
 80035d8:	2314      	movs	r3, #20
 80035da:	001a      	movs	r2, r3
 80035dc:	2100      	movs	r1, #0
 80035de:	f004 fd8d 	bl	80080fc <memset>
  RTC_DateTypeDef sDate = {0};
 80035e2:	2328      	movs	r3, #40	; 0x28
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80035ea:	003b      	movs	r3, r7
 80035ec:	0018      	movs	r0, r3
 80035ee:	2328      	movs	r3, #40	; 0x28
 80035f0:	001a      	movs	r2, r3
 80035f2:	2100      	movs	r1, #0
 80035f4:	f004 fd82 	bl	80080fc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80035f8:	4b48      	ldr	r3, [pc, #288]	; (800371c <MX_RTC_Init+0x150>)
 80035fa:	4a49      	ldr	r2, [pc, #292]	; (8003720 <MX_RTC_Init+0x154>)
 80035fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80035fe:	4b47      	ldr	r3, [pc, #284]	; (800371c <MX_RTC_Init+0x150>)
 8003600:	2200      	movs	r2, #0
 8003602:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003604:	4b45      	ldr	r3, [pc, #276]	; (800371c <MX_RTC_Init+0x150>)
 8003606:	227f      	movs	r2, #127	; 0x7f
 8003608:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800360a:	4b44      	ldr	r3, [pc, #272]	; (800371c <MX_RTC_Init+0x150>)
 800360c:	22ff      	movs	r2, #255	; 0xff
 800360e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003610:	4b42      	ldr	r3, [pc, #264]	; (800371c <MX_RTC_Init+0x150>)
 8003612:	2200      	movs	r2, #0
 8003614:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003616:	4b41      	ldr	r3, [pc, #260]	; (800371c <MX_RTC_Init+0x150>)
 8003618:	2200      	movs	r2, #0
 800361a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800361c:	4b3f      	ldr	r3, [pc, #252]	; (800371c <MX_RTC_Init+0x150>)
 800361e:	2200      	movs	r2, #0
 8003620:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003622:	4b3e      	ldr	r3, [pc, #248]	; (800371c <MX_RTC_Init+0x150>)
 8003624:	2200      	movs	r2, #0
 8003626:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003628:	4b3c      	ldr	r3, [pc, #240]	; (800371c <MX_RTC_Init+0x150>)
 800362a:	0018      	movs	r0, r3
 800362c:	f002 fd18 	bl	8006060 <HAL_RTC_Init>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8003634:	f7ff ffc4 	bl	80035c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003638:	212c      	movs	r1, #44	; 0x2c
 800363a:	187b      	adds	r3, r7, r1
 800363c:	2200      	movs	r2, #0
 800363e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8003640:	187b      	adds	r3, r7, r1
 8003642:	2200      	movs	r2, #0
 8003644:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8003646:	187b      	adds	r3, r7, r1
 8003648:	2200      	movs	r2, #0
 800364a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800364c:	187b      	adds	r3, r7, r1
 800364e:	2200      	movs	r2, #0
 8003650:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2200      	movs	r2, #0
 8003656:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003658:	1879      	adds	r1, r7, r1
 800365a:	4b30      	ldr	r3, [pc, #192]	; (800371c <MX_RTC_Init+0x150>)
 800365c:	2200      	movs	r2, #0
 800365e:	0018      	movs	r0, r3
 8003660:	f002 fd9c 	bl	800619c <HAL_RTC_SetTime>
 8003664:	1e03      	subs	r3, r0, #0
 8003666:	d001      	beq.n	800366c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8003668:	f7ff ffaa 	bl	80035c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800366c:	2128      	movs	r1, #40	; 0x28
 800366e:	187b      	adds	r3, r7, r1
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003674:	187b      	adds	r3, r7, r1
 8003676:	2201      	movs	r2, #1
 8003678:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800367a:	187b      	adds	r3, r7, r1
 800367c:	2201      	movs	r2, #1
 800367e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8003680:	187b      	adds	r3, r7, r1
 8003682:	2200      	movs	r2, #0
 8003684:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8003686:	1879      	adds	r1, r7, r1
 8003688:	4b24      	ldr	r3, [pc, #144]	; (800371c <MX_RTC_Init+0x150>)
 800368a:	2200      	movs	r2, #0
 800368c:	0018      	movs	r0, r3
 800368e:	f002 fe49 	bl	8006324 <HAL_RTC_SetDate>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8003696:	f7ff ff93 	bl	80035c0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 800369a:	003b      	movs	r3, r7
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80036a0:	003b      	movs	r3, r7
 80036a2:	2200      	movs	r2, #0
 80036a4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80036a6:	003b      	movs	r3, r7
 80036a8:	2200      	movs	r2, #0
 80036aa:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80036ac:	003b      	movs	r3, r7
 80036ae:	2200      	movs	r2, #0
 80036b0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036b2:	003b      	movs	r3, r7
 80036b4:	2200      	movs	r2, #0
 80036b6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036b8:	003b      	movs	r3, r7
 80036ba:	2200      	movs	r2, #0
 80036bc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80036be:	003b      	movs	r3, r7
 80036c0:	2280      	movs	r2, #128	; 0x80
 80036c2:	0612      	lsls	r2, r2, #24
 80036c4:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80036c6:	003b      	movs	r3, r7
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80036cc:	003b      	movs	r3, r7
 80036ce:	2200      	movs	r2, #0
 80036d0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80036d2:	003b      	movs	r3, r7
 80036d4:	2220      	movs	r2, #32
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80036da:	003b      	movs	r3, r7
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	0052      	lsls	r2, r2, #1
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80036e2:	0039      	movs	r1, r7
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <MX_RTC_Init+0x150>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	0018      	movs	r0, r3
 80036ea:	f002 fec9 	bl	8006480 <HAL_RTC_SetAlarm_IT>
 80036ee:	1e03      	subs	r3, r0, #0
 80036f0:	d001      	beq.n	80036f6 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 80036f2:	f7ff ff65 	bl	80035c0 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80036f6:	003b      	movs	r3, r7
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	0092      	lsls	r2, r2, #2
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80036fe:	0039      	movs	r1, r7
 8003700:	4b06      	ldr	r3, [pc, #24]	; (800371c <MX_RTC_Init+0x150>)
 8003702:	2200      	movs	r2, #0
 8003704:	0018      	movs	r0, r3
 8003706:	f002 febb 	bl	8006480 <HAL_RTC_SetAlarm_IT>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d001      	beq.n	8003712 <MX_RTC_Init+0x146>
  {
    Error_Handler();
 800370e:	f7ff ff57 	bl	80035c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b010      	add	sp, #64	; 0x40
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	200002dc 	.word	0x200002dc
 8003720:	40002800 	.word	0x40002800

08003724 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a0a      	ldr	r2, [pc, #40]	; (800375c <HAL_RTC_MspInit+0x38>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d10e      	bne.n	8003754 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RTC_MspInit+0x3c>)
 8003738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_RTC_MspInit+0x3c>)
 800373c:	2180      	movs	r1, #128	; 0x80
 800373e:	02c9      	lsls	r1, r1, #11
 8003740:	430a      	orrs	r2, r1
 8003742:	651a      	str	r2, [r3, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 3, 0);
 8003744:	2200      	movs	r2, #0
 8003746:	2103      	movs	r1, #3
 8003748:	2002      	movs	r0, #2
 800374a:	f000 fd51 	bl	80041f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800374e:	2002      	movs	r0, #2
 8003750:	f000 fd63 	bl	800421a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	b002      	add	sp, #8
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40002800 	.word	0x40002800
 8003760:	40021000 	.word	0x40021000

08003764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <HAL_MspInit+0x24>)
 800376a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800376c:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_MspInit+0x24>)
 800376e:	2101      	movs	r1, #1
 8003770:	430a      	orrs	r2, r1
 8003772:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003774:	4b04      	ldr	r3, [pc, #16]	; (8003788 <HAL_MspInit+0x24>)
 8003776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003778:	4b03      	ldr	r3, [pc, #12]	; (8003788 <HAL_MspInit+0x24>)
 800377a:	2180      	movs	r1, #128	; 0x80
 800377c:	0549      	lsls	r1, r1, #21
 800377e:	430a      	orrs	r2, r1
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000

0800378c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003790:	e7fe      	b.n	8003790 <NMI_Handler+0x4>

08003792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003792:	b580      	push	{r7, lr}
 8003794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003796:	e7fe      	b.n	8003796 <HardFault_Handler+0x4>

08003798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}

080037a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037a2:	b580      	push	{r7, lr}
 80037a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a6:	46c0      	nop			; (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037b0:	f000 fc16 	bl	8003fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b4:	46c0      	nop			; (mov r8, r8)
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80037c0:	4b03      	ldr	r3, [pc, #12]	; (80037d0 <RTC_IRQHandler+0x14>)
 80037c2:	0018      	movs	r0, r3
 80037c4:	f002 ffa8 	bl	8006718 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80037c8:	46c0      	nop			; (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	200002dc 	.word	0x200002dc

080037d4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	0018      	movs	r0, r3
 80037de:	f000 fef1 	bl	80045c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80037e2:	46c0      	nop			; (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037ec:	4b03      	ldr	r3, [pc, #12]	; (80037fc <TIM6_DAC_IRQHandler+0x14>)
 80037ee:	0018      	movs	r0, r3
 80037f0:	f003 fa22 	bl	8006c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037f4:	46c0      	nop			; (mov r8, r8)
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	20000340 	.word	0x20000340

08003800 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003804:	4b03      	ldr	r3, [pc, #12]	; (8003814 <TIM7_IRQHandler+0x14>)
 8003806:	0018      	movs	r0, r3
 8003808:	f003 fa16 	bl	8006c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800380c:	46c0      	nop			; (mov r8, r8)
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	20000380 	.word	0x20000380

08003818 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
	static uint8_t counter = 0;

	if (htim->Instance == TIM6)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a27      	ldr	r2, [pc, #156]	; (80038c4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d103      	bne.n	8003832 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		g_batt_status = 1;
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8003830:	e044      	b.n	80038bc <HAL_TIM_PeriodElapsedCallback+0xa4>
	else if (htim->Instance == TIM7)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a25      	ldr	r2, [pc, #148]	; (80038cc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d13f      	bne.n	80038bc <HAL_TIM_PeriodElapsedCallback+0xa4>
		HAL_TIM_PWM_Stop(led_pwm.tim3, LED_RED_CHANNEL);
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2100      	movs	r1, #0
 8003842:	0018      	movs	r0, r3
 8003844:	f003 f9ba 	bl	8006bbc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(led_pwm.tim3, LED_GREEN_CHANNEL);
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2104      	movs	r1, #4
 800384e:	0018      	movs	r0, r3
 8003850:	f003 f9b4 	bl	8006bbc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(led_pwm.tim3, LED_BLUE_CHANNEL);
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2108      	movs	r1, #8
 800385a:	0018      	movs	r0, r3
 800385c:	f003 f9ae 	bl	8006bbc <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(led_pwm.tim3, LED_WHITE_CHANNEL);
 8003860:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	210c      	movs	r1, #12
 8003866:	0018      	movs	r0, r3
 8003868:	f003 f9a8 	bl	8006bbc <HAL_TIM_PWM_Stop>
		led_pwm.red_led = PWM_LED_OFF;
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800386e:	2200      	movs	r2, #0
 8003870:	71da      	strb	r2, [r3, #7]
		led_pwm.green_led = PWM_LED_OFF;
 8003872:	4b17      	ldr	r3, [pc, #92]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003874:	2200      	movs	r2, #0
 8003876:	721a      	strb	r2, [r3, #8]
		led_pwm.blue_led = PWM_LED_OFF;
 8003878:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800387a:	2200      	movs	r2, #0
 800387c:	725a      	strb	r2, [r3, #9]
		led_pwm.white_led = PWM_LED_OFF;
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003880:	2200      	movs	r2, #0
 8003882:	729a      	strb	r2, [r3, #10]
		led_pwm_set(led_array[counter], led_array[counter + 1]);
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	001a      	movs	r2, r3
 800388a:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800388c:	5c9b      	ldrb	r3, [r3, r2]
 800388e:	b2d8      	uxtb	r0, r3
 8003890:	4b10      	ldr	r3, [pc, #64]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003898:	5cd3      	ldrb	r3, [r2, r3]
 800389a:	b2db      	uxtb	r3, r3
 800389c:	0019      	movs	r1, r3
 800389e:	f7ff fa77 	bl	8002d90 <led_pwm_set>
		counter = counter + 2;
 80038a2:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	3302      	adds	r3, #2
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80038ac:	701a      	strb	r2, [r3, #0]
		if (counter > 3)
 80038ae:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d902      	bls.n	80038bc <HAL_TIM_PeriodElapsedCallback+0xa4>
			counter = 0;
 80038b6:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b002      	add	sp, #8
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40001000 	.word	0x40001000
 80038c8:	20000264 	.word	0x20000264
 80038cc:	40001400 	.word	0x40001400
 80038d0:	20000284 	.word	0x20000284
 80038d4:	20000265 	.word	0x20000265
 80038d8:	2000024c 	.word	0x2000024c

080038dc <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	one_pwm_led_on_fp(&led_alarm[0]);
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_RTC_AlarmAEventCallback+0x18>)
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7ff f8a8 	bl	8002a3c <one_pwm_led_on_fp>
}
 80038ec:	46c0      	nop			; (mov r8, r8)
 80038ee:	46bd      	mov	sp, r7
 80038f0:	b002      	add	sp, #8
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000254 	.word	0x20000254

080038f8 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	all_led_off_fp(&led_alarm[0]);
 8003900:	4b03      	ldr	r3, [pc, #12]	; (8003910 <HAL_RTCEx_AlarmBEventCallback+0x18>)
 8003902:	0018      	movs	r0, r3
 8003904:	f7fe ff94 	bl	8002830 <all_led_off_fp>
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000254 	.word	0x20000254

08003914 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
	return 1;
 8003918:	2301      	movs	r3, #1
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <_kill>:

int _kill(int pid, int sig)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800392a:	f004 fbbd 	bl	80080a8 <__errno>
 800392e:	0003      	movs	r3, r0
 8003930:	2216      	movs	r2, #22
 8003932:	601a      	str	r2, [r3, #0]
	return -1;
 8003934:	2301      	movs	r3, #1
 8003936:	425b      	negs	r3, r3
}
 8003938:	0018      	movs	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}

08003940 <_exit>:

void _exit (int status)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003948:	2301      	movs	r3, #1
 800394a:	425a      	negs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0011      	movs	r1, r2
 8003950:	0018      	movs	r0, r3
 8003952:	f7ff ffe5 	bl	8003920 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003956:	e7fe      	b.n	8003956 <_exit+0x16>

08003958 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e00a      	b.n	8003980 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800396a:	e000      	b.n	800396e <_read+0x16>
 800396c:	bf00      	nop
 800396e:	0001      	movs	r1, r0
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	1c5a      	adds	r2, r3, #1
 8003974:	60ba      	str	r2, [r7, #8]
 8003976:	b2ca      	uxtb	r2, r1
 8003978:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	3301      	adds	r3, #1
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	429a      	cmp	r2, r3
 8003986:	dbf0      	blt.n	800396a <_read+0x12>
	}

return len;
 8003988:	687b      	ldr	r3, [r7, #4]
}
 800398a:	0018      	movs	r0, r3
 800398c:	46bd      	mov	sp, r7
 800398e:	b006      	add	sp, #24
 8003990:	bd80      	pop	{r7, pc}

08003992 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af00      	add	r7, sp, #0
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	e009      	b.n	80039b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	60ba      	str	r2, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	0018      	movs	r0, r3
 80039ae:	e000      	b.n	80039b2 <_write+0x20>
 80039b0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	dbf1      	blt.n	80039a4 <_write+0x12>
	}
	return len;
 80039c0:	687b      	ldr	r3, [r7, #4]
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b006      	add	sp, #24
 80039c8:	bd80      	pop	{r7, pc}

080039ca <_close>:

int _close(int file)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	return -1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	425b      	negs	r3, r3
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b002      	add	sp, #8
 80039dc:	bd80      	pop	{r7, pc}

080039de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b082      	sub	sp, #8
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	0192      	lsls	r2, r2, #6
 80039ee:	605a      	str	r2, [r3, #4]
	return 0;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b002      	add	sp, #8
 80039f8:	bd80      	pop	{r7, pc}

080039fa <_isatty>:

int _isatty(int file)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b082      	sub	sp, #8
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
	return 1;
 8003a02:	2301      	movs	r3, #1
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b002      	add	sp, #8
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
	return 0;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b004      	add	sp, #16
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <_sbrk+0x5c>)
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <_sbrk+0x60>)
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a38:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <_sbrk+0x64>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d102      	bne.n	8003a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <_sbrk+0x64>)
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <_sbrk+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <_sbrk+0x64>)
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	18d3      	adds	r3, r2, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d207      	bcs.n	8003a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a54:	f004 fb28 	bl	80080a8 <__errno>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	220c      	movs	r2, #12
 8003a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	425b      	negs	r3, r3
 8003a62:	e009      	b.n	8003a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <_sbrk+0x64>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <_sbrk+0x64>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	18d2      	adds	r2, r2, r3
 8003a72:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <_sbrk+0x64>)
 8003a74:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003a76:	68fb      	ldr	r3, [r7, #12]
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b006      	add	sp, #24
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	20005000 	.word	0x20005000
 8003a84:	00000400 	.word	0x00000400
 8003a88:	20000268 	.word	0x20000268
 8003a8c:	20000458 	.word	0x20000458

08003a90 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <MX_TIM3_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	2308      	movs	r3, #8
 8003aaa:	001a      	movs	r2, r3
 8003aac:	2100      	movs	r1, #0
 8003aae:	f004 fb25 	bl	80080fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ab2:	003b      	movs	r3, r7
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	2310      	movs	r3, #16
 8003ab8:	001a      	movs	r2, r3
 8003aba:	2100      	movs	r1, #0
 8003abc:	f004 fb1e 	bl	80080fc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003ac0:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003ac2:	4a38      	ldr	r2, [pc, #224]	; (8003ba4 <MX_TIM3_Init+0x108>)
 8003ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8003ac6:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003ac8:	224f      	movs	r2, #79	; 0x4f
 8003aca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003acc:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250;
 8003ad2:	4b33      	ldr	r3, [pc, #204]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003ad4:	22fa      	movs	r2, #250	; 0xfa
 8003ad6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad8:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ade:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003ae6:	0018      	movs	r0, r3
 8003ae8:	f002 ff96 	bl	8006a18 <HAL_TIM_PWM_Init>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d001      	beq.n	8003af4 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003af0:	f7ff fd66 	bl	80035c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af4:	2110      	movs	r1, #16
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afc:	187b      	adds	r3, r7, r1
 8003afe:	2200      	movs	r2, #0
 8003b00:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b02:	187a      	adds	r2, r7, r1
 8003b04:	4b26      	ldr	r3, [pc, #152]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003b06:	0011      	movs	r1, r2
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f003 fbe9 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b0e:	1e03      	subs	r3, r0, #0
 8003b10:	d001      	beq.n	8003b16 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8003b12:	f7ff fd55 	bl	80035c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b16:	003b      	movs	r3, r7
 8003b18:	2260      	movs	r2, #96	; 0x60
 8003b1a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003b1c:	003b      	movs	r3, r7
 8003b1e:	2200      	movs	r2, #0
 8003b20:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b22:	003b      	movs	r3, r7
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b28:	003b      	movs	r3, r7
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b2e:	0039      	movs	r1, r7
 8003b30:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	0018      	movs	r0, r3
 8003b36:	f003 f967 	bl	8006e08 <HAL_TIM_PWM_ConfigChannel>
 8003b3a:	1e03      	subs	r3, r0, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8003b3e:	f7ff fd3f 	bl	80035c0 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 8003b42:	4b17      	ldr	r3, [pc, #92]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003b44:	2104      	movs	r1, #4
 8003b46:	0018      	movs	r0, r3
 8003b48:	f003 fc28 	bl	800739c <HAL_TIMEx_RemapConfig>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d001      	beq.n	8003b54 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003b50:	f7ff fd36 	bl	80035c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b54:	0039      	movs	r1, r7
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003b58:	2204      	movs	r2, #4
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f003 f954 	bl	8006e08 <HAL_TIM_PWM_ConfigChannel>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d001      	beq.n	8003b68 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8003b64:	f7ff fd2c 	bl	80035c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b68:	0039      	movs	r1, r7
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003b6c:	2208      	movs	r2, #8
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f003 f94a 	bl	8006e08 <HAL_TIM_PWM_ConfigChannel>
 8003b74:	1e03      	subs	r3, r0, #0
 8003b76:	d001      	beq.n	8003b7c <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8003b78:	f7ff fd22 	bl	80035c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b7c:	0039      	movs	r1, r7
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003b80:	220c      	movs	r2, #12
 8003b82:	0018      	movs	r0, r3
 8003b84:	f003 f940 	bl	8006e08 <HAL_TIM_PWM_ConfigChannel>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <MX_TIM3_Init+0xf4>
  {
    Error_Handler();
 8003b8c:	f7ff fd18 	bl	80035c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b90:	4b03      	ldr	r3, [pc, #12]	; (8003ba0 <MX_TIM3_Init+0x104>)
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 f8ce 	bl	8003d34 <HAL_TIM_MspPostInit>

}
 8003b98:	46c0      	nop			; (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b006      	add	sp, #24
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000300 	.word	0x20000300
 8003ba4:	40000400 	.word	0x40000400

08003ba8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bae:	003b      	movs	r3, r7
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f004 faa0 	bl	80080fc <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003bbc:	4b15      	ldr	r3, [pc, #84]	; (8003c14 <MX_TIM6_Init+0x6c>)
 8003bbe:	4a16      	ldr	r2, [pc, #88]	; (8003c18 <MX_TIM6_Init+0x70>)
 8003bc0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <MX_TIM6_Init+0x6c>)
 8003bc4:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <MX_TIM6_Init+0x74>)
 8003bc6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <MX_TIM6_Init+0x6c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0;
 8003bce:	4b11      	ldr	r3, [pc, #68]	; (8003c14 <MX_TIM6_Init+0x6c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bd4:	4b0f      	ldr	r3, [pc, #60]	; (8003c14 <MX_TIM6_Init+0x6c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003bda:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <MX_TIM6_Init+0x6c>)
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f002 fe62 	bl	80068a6 <HAL_TIM_Base_Init>
 8003be2:	1e03      	subs	r3, r0, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8003be6:	f7ff fceb 	bl	80035c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bea:	003b      	movs	r3, r7
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bf0:	003b      	movs	r3, r7
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003bf6:	003a      	movs	r2, r7
 8003bf8:	4b06      	ldr	r3, [pc, #24]	; (8003c14 <MX_TIM6_Init+0x6c>)
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f003 fb6f 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c02:	1e03      	subs	r3, r0, #0
 8003c04:	d001      	beq.n	8003c0a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8003c06:	f7ff fcdb 	bl	80035c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c0a:	46c0      	nop			; (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b002      	add	sp, #8
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	20000340 	.word	0x20000340
 8003c18:	40001000 	.word	0x40001000
 8003c1c:	00001f3f 	.word	0x00001f3f

08003c20 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c26:	003b      	movs	r3, r7
 8003c28:	0018      	movs	r0, r3
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	001a      	movs	r2, r3
 8003c2e:	2100      	movs	r1, #0
 8003c30:	f004 fa64 	bl	80080fc <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c34:	4b15      	ldr	r3, [pc, #84]	; (8003c8c <MX_TIM7_Init+0x6c>)
 8003c36:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <MX_TIM7_Init+0x70>)
 8003c38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 7999;
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <MX_TIM7_Init+0x6c>)
 8003c3c:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <MX_TIM7_Init+0x74>)
 8003c3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c40:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <MX_TIM7_Init+0x6c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 0;
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <MX_TIM7_Init+0x6c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	; (8003c8c <MX_TIM7_Init+0x6c>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c52:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <MX_TIM7_Init+0x6c>)
 8003c54:	0018      	movs	r0, r3
 8003c56:	f002 fe26 	bl	80068a6 <HAL_TIM_Base_Init>
 8003c5a:	1e03      	subs	r3, r0, #0
 8003c5c:	d001      	beq.n	8003c62 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003c5e:	f7ff fcaf 	bl	80035c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c62:	003b      	movs	r3, r7
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c68:	003b      	movs	r3, r7
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003c6e:	003a      	movs	r2, r7
 8003c70:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <MX_TIM7_Init+0x6c>)
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f003 fb33 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c7a:	1e03      	subs	r3, r0, #0
 8003c7c:	d001      	beq.n	8003c82 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8003c7e:	f7ff fc9f 	bl	80035c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b002      	add	sp, #8
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	20000380 	.word	0x20000380
 8003c90:	40001400 	.word	0x40001400
 8003c94:	00001f3f 	.word	0x00001f3f

08003c98 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a06      	ldr	r2, [pc, #24]	; (8003cc0 <HAL_TIM_PWM_MspInit+0x28>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d105      	bne.n	8003cb6 <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003caa:	4b06      	ldr	r3, [pc, #24]	; (8003cc4 <HAL_TIM_PWM_MspInit+0x2c>)
 8003cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_TIM_PWM_MspInit+0x2c>)
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40021000 	.word	0x40021000

08003cc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <HAL_TIM_Base_MspInit+0x60>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d10e      	bne.n	8003cf8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <HAL_TIM_Base_MspInit+0x64>)
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_TIM_Base_MspInit+0x64>)
 8003ce0:	2110      	movs	r1, #16
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	2103      	movs	r1, #3
 8003cea:	2011      	movs	r0, #17
 8003cec:	f000 fa80 	bl	80041f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003cf0:	2011      	movs	r0, #17
 8003cf2:	f000 fa92 	bl	800421a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003cf6:	e012      	b.n	8003d1e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM7)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <HAL_TIM_Base_MspInit+0x68>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d10d      	bne.n	8003d1e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_TIM_Base_MspInit+0x64>)
 8003d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d06:	4b09      	ldr	r3, [pc, #36]	; (8003d2c <HAL_TIM_Base_MspInit+0x64>)
 8003d08:	2120      	movs	r1, #32
 8003d0a:	430a      	orrs	r2, r1
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2103      	movs	r1, #3
 8003d12:	2012      	movs	r0, #18
 8003d14:	f000 fa6c 	bl	80041f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d18:	2012      	movs	r0, #18
 8003d1a:	f000 fa7e 	bl	800421a <HAL_NVIC_EnableIRQ>
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	40001000 	.word	0x40001000
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40001400 	.word	0x40001400

08003d34 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d34:	b590      	push	{r4, r7, lr}
 8003d36:	b08b      	sub	sp, #44	; 0x2c
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d3c:	2414      	movs	r4, #20
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	0018      	movs	r0, r3
 8003d42:	2314      	movs	r3, #20
 8003d44:	001a      	movs	r2, r3
 8003d46:	2100      	movs	r1, #0
 8003d48:	f004 f9d8 	bl	80080fc <memset>
  if(timHandle->Instance==TIM3)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a25      	ldr	r2, [pc, #148]	; (8003de8 <HAL_TIM_MspPostInit+0xb4>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d143      	bne.n	8003dde <HAL_TIM_MspPostInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d56:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_TIM_MspPostInit+0xb8>)
 8003d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5a:	4b24      	ldr	r3, [pc, #144]	; (8003dec <HAL_TIM_MspPostInit+0xb8>)
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_TIM_MspPostInit+0xb8>)
 8003d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d66:	2201      	movs	r2, #1
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d6e:	4b1f      	ldr	r3, [pc, #124]	; (8003dec <HAL_TIM_MspPostInit+0xb8>)
 8003d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d72:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <HAL_TIM_MspPostInit+0xb8>)
 8003d74:	2102      	movs	r1, #2
 8003d76:	430a      	orrs	r2, r1
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d7a:	4b1c      	ldr	r3, [pc, #112]	; (8003dec <HAL_TIM_MspPostInit+0xb8>)
 8003d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d86:	193b      	adds	r3, r7, r4
 8003d88:	22c0      	movs	r2, #192	; 0xc0
 8003d8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d8c:	193b      	adds	r3, r7, r4
 8003d8e:	2202      	movs	r2, #2
 8003d90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	193b      	adds	r3, r7, r4
 8003d94:	2200      	movs	r2, #0
 8003d96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d98:	193b      	adds	r3, r7, r4
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003d9e:	193b      	adds	r3, r7, r4
 8003da0:	2202      	movs	r2, #2
 8003da2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003da4:	193a      	adds	r2, r7, r4
 8003da6:	23a0      	movs	r3, #160	; 0xa0
 8003da8:	05db      	lsls	r3, r3, #23
 8003daa:	0011      	movs	r1, r2
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 fa51 	bl	8004254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003db2:	0021      	movs	r1, r4
 8003db4:	187b      	adds	r3, r7, r1
 8003db6:	2203      	movs	r2, #3
 8003db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	187b      	adds	r3, r7, r1
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	187b      	adds	r3, r7, r1
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc6:	187b      	adds	r3, r7, r1
 8003dc8:	2200      	movs	r2, #0
 8003dca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003dcc:	187b      	adds	r3, r7, r1
 8003dce:	2202      	movs	r2, #2
 8003dd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dd2:	187b      	adds	r3, r7, r1
 8003dd4:	4a06      	ldr	r2, [pc, #24]	; (8003df0 <HAL_TIM_MspPostInit+0xbc>)
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	0010      	movs	r0, r2
 8003dda:	f000 fa3b 	bl	8004254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b00b      	add	sp, #44	; 0x2c
 8003de4:	bd90      	pop	{r4, r7, pc}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40021000 	.word	0x40021000
 8003df0:	50000400 	.word	0x50000400

08003df4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003df8:	4b16      	ldr	r3, [pc, #88]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003dfa:	4a17      	ldr	r2, [pc, #92]	; (8003e58 <MX_USART1_UART_Init+0x64>)
 8003dfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003dfe:	4b15      	ldr	r3, [pc, #84]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e00:	2296      	movs	r2, #150	; 0x96
 8003e02:	0192      	lsls	r2, r2, #6
 8003e04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e06:	4b13      	ldr	r3, [pc, #76]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003e0c:	4b11      	ldr	r3, [pc, #68]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003e12:	4b10      	ldr	r3, [pc, #64]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003e18:	4b0e      	ldr	r3, [pc, #56]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e1a:	220c      	movs	r2, #12
 8003e1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e1e:	4b0d      	ldr	r3, [pc, #52]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003e24:	4b0b      	ldr	r3, [pc, #44]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003e2a:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003e30:	4b08      	ldr	r3, [pc, #32]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e32:	2208      	movs	r2, #8
 8003e34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003e36:	4b07      	ldr	r3, [pc, #28]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0212      	lsls	r2, r2, #8
 8003e3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003e3e:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <MX_USART1_UART_Init+0x60>)
 8003e40:	0018      	movs	r0, r3
 8003e42:	f003 fac9 	bl	80073d8 <HAL_UART_Init>
 8003e46:	1e03      	subs	r3, r0, #0
 8003e48:	d001      	beq.n	8003e4e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8003e4a:	f7ff fbb9 	bl	80035c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	200003c0 	.word	0x200003c0
 8003e58:	40013800 	.word	0x40013800

08003e5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e64:	240c      	movs	r4, #12
 8003e66:	193b      	adds	r3, r7, r4
 8003e68:	0018      	movs	r0, r3
 8003e6a:	2314      	movs	r3, #20
 8003e6c:	001a      	movs	r2, r3
 8003e6e:	2100      	movs	r1, #0
 8003e70:	f004 f944 	bl	80080fc <memset>
  if(uartHandle->Instance==USART1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a18      	ldr	r2, [pc, #96]	; (8003edc <HAL_UART_MspInit+0x80>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d12a      	bne.n	8003ed4 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e7e:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <HAL_UART_MspInit+0x84>)
 8003e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e82:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <HAL_UART_MspInit+0x84>)
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	01c9      	lsls	r1, r1, #7
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8c:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_UART_MspInit+0x84>)
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <HAL_UART_MspInit+0x84>)
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e98:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_UART_MspInit+0x84>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003ea4:	193b      	adds	r3, r7, r4
 8003ea6:	22c0      	movs	r2, #192	; 0xc0
 8003ea8:	00d2      	lsls	r2, r2, #3
 8003eaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eac:	0021      	movs	r1, r4
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2203      	movs	r2, #3
 8003ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ec6:	187a      	adds	r2, r7, r1
 8003ec8:	23a0      	movs	r3, #160	; 0xa0
 8003eca:	05db      	lsls	r3, r3, #23
 8003ecc:	0011      	movs	r1, r2
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 f9c0 	bl	8004254 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b009      	add	sp, #36	; 0x24
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	40013800 	.word	0x40013800
 8003ee0:	40021000 	.word	0x40021000

08003ee4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003ee4:	480d      	ldr	r0, [pc, #52]	; (8003f1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003ee6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ee8:	480d      	ldr	r0, [pc, #52]	; (8003f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8003eea:	490e      	ldr	r1, [pc, #56]	; (8003f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003eec:	4a0e      	ldr	r2, [pc, #56]	; (8003f28 <LoopForever+0xe>)
  movs r3, #0
 8003eee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ef0:	e002      	b.n	8003ef8 <LoopCopyDataInit>

08003ef2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ef2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ef4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ef6:	3304      	adds	r3, #4

08003ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ef8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003efa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003efc:	d3f9      	bcc.n	8003ef2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003efe:	4a0b      	ldr	r2, [pc, #44]	; (8003f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f00:	4c0b      	ldr	r4, [pc, #44]	; (8003f30 <LoopForever+0x16>)
  movs r3, #0
 8003f02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f04:	e001      	b.n	8003f0a <LoopFillZerobss>

08003f06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f08:	3204      	adds	r2, #4

08003f0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f0c:	d3fb      	bcc.n	8003f06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003f0e:	f7ff fdbf 	bl	8003a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f12:	f004 f8cf 	bl	80080b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f16:	f7ff fa5d 	bl	80033d4 <main>

08003f1a <LoopForever>:

LoopForever:
    b LoopForever
 8003f1a:	e7fe      	b.n	8003f1a <LoopForever>
   ldr   r0, =_estack
 8003f1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f24:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8003f28:	0800b59c 	.word	0x0800b59c
  ldr r2, =_sbss
 8003f2c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8003f30:	20000458 	.word	0x20000458

08003f34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f34:	e7fe      	b.n	8003f34 <ADC1_COMP_IRQHandler>
	...

08003f38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f3e:	1dfb      	adds	r3, r7, #7
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_Init+0x3c>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <HAL_Init+0x3c>)
 8003f4a:	2140      	movs	r1, #64	; 0x40
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f50:	2000      	movs	r0, #0
 8003f52:	f000 f811 	bl	8003f78 <HAL_InitTick>
 8003f56:	1e03      	subs	r3, r0, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003f5a:	1dfb      	adds	r3, r7, #7
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e001      	b.n	8003f66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f62:	f7ff fbff 	bl	8003764 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f66:	1dfb      	adds	r3, r7, #7
 8003f68:	781b      	ldrb	r3, [r3, #0]
}
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	b002      	add	sp, #8
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	46c0      	nop			; (mov r8, r8)
 8003f74:	40022000 	.word	0x40022000

08003f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f78:	b590      	push	{r4, r7, lr}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <HAL_InitTick+0x5c>)
 8003f82:	681c      	ldr	r4, [r3, #0]
 8003f84:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <HAL_InitTick+0x60>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	0019      	movs	r1, r3
 8003f8a:	23fa      	movs	r3, #250	; 0xfa
 8003f8c:	0098      	lsls	r0, r3, #2
 8003f8e:	f7fc f8d7 	bl	8000140 <__udivsi3>
 8003f92:	0003      	movs	r3, r0
 8003f94:	0019      	movs	r1, r3
 8003f96:	0020      	movs	r0, r4
 8003f98:	f7fc f8d2 	bl	8000140 <__udivsi3>
 8003f9c:	0003      	movs	r3, r0
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 f94b 	bl	800423a <HAL_SYSTICK_Config>
 8003fa4:	1e03      	subs	r3, r0, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e00f      	b.n	8003fcc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d80b      	bhi.n	8003fca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	425b      	negs	r3, r3
 8003fb8:	2200      	movs	r2, #0
 8003fba:	0018      	movs	r0, r3
 8003fbc:	f000 f918 	bl	80041f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fc0:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_InitTick+0x64>)
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	e000      	b.n	8003fcc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
}
 8003fcc:	0018      	movs	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	b003      	add	sp, #12
 8003fd2:	bd90      	pop	{r4, r7, pc}
 8003fd4:	20000004 	.word	0x20000004
 8003fd8:	2000000c 	.word	0x2000000c
 8003fdc:	20000008 	.word	0x20000008

08003fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fe4:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_IncTick+0x1c>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	001a      	movs	r2, r3
 8003fea:	4b05      	ldr	r3, [pc, #20]	; (8004000 <HAL_IncTick+0x20>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	18d2      	adds	r2, r2, r3
 8003ff0:	4b03      	ldr	r3, [pc, #12]	; (8004000 <HAL_IncTick+0x20>)
 8003ff2:	601a      	str	r2, [r3, #0]
}
 8003ff4:	46c0      	nop			; (mov r8, r8)
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	20000444 	.word	0x20000444

08004004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  return uwTick;
 8004008:	4b02      	ldr	r3, [pc, #8]	; (8004014 <HAL_GetTick+0x10>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	20000444 	.word	0x20000444

08004018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004020:	f7ff fff0 	bl	8004004 <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3301      	adds	r3, #1
 8004030:	d005      	beq.n	800403e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004032:	4b0a      	ldr	r3, [pc, #40]	; (800405c <HAL_Delay+0x44>)
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	001a      	movs	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	189b      	adds	r3, r3, r2
 800403c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	f7ff ffe0 	bl	8004004 <HAL_GetTick>
 8004044:	0002      	movs	r2, r0
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	429a      	cmp	r2, r3
 800404e:	d8f7      	bhi.n	8004040 <HAL_Delay+0x28>
  {
  }
}
 8004050:	46c0      	nop			; (mov r8, r8)
 8004052:	46c0      	nop			; (mov r8, r8)
 8004054:	46bd      	mov	sp, r7
 8004056:	b004      	add	sp, #16
 8004058:	bd80      	pop	{r7, pc}
 800405a:	46c0      	nop			; (mov r8, r8)
 800405c:	2000000c 	.word	0x2000000c

08004060 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004064:	4b04      	ldr	r3, [pc, #16]	; (8004078 <HAL_SuspendTick+0x18>)
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4b03      	ldr	r3, [pc, #12]	; (8004078 <HAL_SuspendTick+0x18>)
 800406a:	2102      	movs	r1, #2
 800406c:	438a      	bics	r2, r1
 800406e:	601a      	str	r2, [r3, #0]
}
 8004070:	46c0      	nop			; (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	46c0      	nop			; (mov r8, r8)
 8004078:	e000e010 	.word	0xe000e010

0800407c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <HAL_ResumeTick+0x18>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	4b03      	ldr	r3, [pc, #12]	; (8004094 <HAL_ResumeTick+0x18>)
 8004086:	2102      	movs	r1, #2
 8004088:	430a      	orrs	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
}
 800408c:	46c0      	nop			; (mov r8, r8)
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	e000e010 	.word	0xe000e010

08004098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	0002      	movs	r2, r0
 80040a0:	1dfb      	adds	r3, r7, #7
 80040a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b7f      	cmp	r3, #127	; 0x7f
 80040aa:	d809      	bhi.n	80040c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040ac:	1dfb      	adds	r3, r7, #7
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	001a      	movs	r2, r3
 80040b2:	231f      	movs	r3, #31
 80040b4:	401a      	ands	r2, r3
 80040b6:	4b04      	ldr	r3, [pc, #16]	; (80040c8 <__NVIC_EnableIRQ+0x30>)
 80040b8:	2101      	movs	r1, #1
 80040ba:	4091      	lsls	r1, r2
 80040bc:	000a      	movs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]
  }
}
 80040c0:	46c0      	nop			; (mov r8, r8)
 80040c2:	46bd      	mov	sp, r7
 80040c4:	b002      	add	sp, #8
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	e000e100 	.word	0xe000e100

080040cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040cc:	b590      	push	{r4, r7, lr}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	0002      	movs	r2, r0
 80040d4:	6039      	str	r1, [r7, #0]
 80040d6:	1dfb      	adds	r3, r7, #7
 80040d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040da:	1dfb      	adds	r3, r7, #7
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b7f      	cmp	r3, #127	; 0x7f
 80040e0:	d828      	bhi.n	8004134 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80040e2:	4a2f      	ldr	r2, [pc, #188]	; (80041a0 <__NVIC_SetPriority+0xd4>)
 80040e4:	1dfb      	adds	r3, r7, #7
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	b25b      	sxtb	r3, r3
 80040ea:	089b      	lsrs	r3, r3, #2
 80040ec:	33c0      	adds	r3, #192	; 0xc0
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	589b      	ldr	r3, [r3, r2]
 80040f2:	1dfa      	adds	r2, r7, #7
 80040f4:	7812      	ldrb	r2, [r2, #0]
 80040f6:	0011      	movs	r1, r2
 80040f8:	2203      	movs	r2, #3
 80040fa:	400a      	ands	r2, r1
 80040fc:	00d2      	lsls	r2, r2, #3
 80040fe:	21ff      	movs	r1, #255	; 0xff
 8004100:	4091      	lsls	r1, r2
 8004102:	000a      	movs	r2, r1
 8004104:	43d2      	mvns	r2, r2
 8004106:	401a      	ands	r2, r3
 8004108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	22ff      	movs	r2, #255	; 0xff
 8004110:	401a      	ands	r2, r3
 8004112:	1dfb      	adds	r3, r7, #7
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	0018      	movs	r0, r3
 8004118:	2303      	movs	r3, #3
 800411a:	4003      	ands	r3, r0
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004120:	481f      	ldr	r0, [pc, #124]	; (80041a0 <__NVIC_SetPriority+0xd4>)
 8004122:	1dfb      	adds	r3, r7, #7
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	b25b      	sxtb	r3, r3
 8004128:	089b      	lsrs	r3, r3, #2
 800412a:	430a      	orrs	r2, r1
 800412c:	33c0      	adds	r3, #192	; 0xc0
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004132:	e031      	b.n	8004198 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <__NVIC_SetPriority+0xd8>)
 8004136:	1dfb      	adds	r3, r7, #7
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	0019      	movs	r1, r3
 800413c:	230f      	movs	r3, #15
 800413e:	400b      	ands	r3, r1
 8004140:	3b08      	subs	r3, #8
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	3306      	adds	r3, #6
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	18d3      	adds	r3, r2, r3
 800414a:	3304      	adds	r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	1dfa      	adds	r2, r7, #7
 8004150:	7812      	ldrb	r2, [r2, #0]
 8004152:	0011      	movs	r1, r2
 8004154:	2203      	movs	r2, #3
 8004156:	400a      	ands	r2, r1
 8004158:	00d2      	lsls	r2, r2, #3
 800415a:	21ff      	movs	r1, #255	; 0xff
 800415c:	4091      	lsls	r1, r2
 800415e:	000a      	movs	r2, r1
 8004160:	43d2      	mvns	r2, r2
 8004162:	401a      	ands	r2, r3
 8004164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	22ff      	movs	r2, #255	; 0xff
 800416c:	401a      	ands	r2, r3
 800416e:	1dfb      	adds	r3, r7, #7
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	0018      	movs	r0, r3
 8004174:	2303      	movs	r3, #3
 8004176:	4003      	ands	r3, r0
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800417c:	4809      	ldr	r0, [pc, #36]	; (80041a4 <__NVIC_SetPriority+0xd8>)
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	001c      	movs	r4, r3
 8004184:	230f      	movs	r3, #15
 8004186:	4023      	ands	r3, r4
 8004188:	3b08      	subs	r3, #8
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	430a      	orrs	r2, r1
 800418e:	3306      	adds	r3, #6
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	18c3      	adds	r3, r0, r3
 8004194:	3304      	adds	r3, #4
 8004196:	601a      	str	r2, [r3, #0]
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	46bd      	mov	sp, r7
 800419c:	b003      	add	sp, #12
 800419e:	bd90      	pop	{r4, r7, pc}
 80041a0:	e000e100 	.word	0xe000e100
 80041a4:	e000ed00 	.word	0xe000ed00

080041a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	1e5a      	subs	r2, r3, #1
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	045b      	lsls	r3, r3, #17
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d301      	bcc.n	80041c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041bc:	2301      	movs	r3, #1
 80041be:	e010      	b.n	80041e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041c0:	4b0a      	ldr	r3, [pc, #40]	; (80041ec <SysTick_Config+0x44>)
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	3a01      	subs	r2, #1
 80041c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041c8:	2301      	movs	r3, #1
 80041ca:	425b      	negs	r3, r3
 80041cc:	2103      	movs	r1, #3
 80041ce:	0018      	movs	r0, r3
 80041d0:	f7ff ff7c 	bl	80040cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <SysTick_Config+0x44>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041da:	4b04      	ldr	r3, [pc, #16]	; (80041ec <SysTick_Config+0x44>)
 80041dc:	2207      	movs	r2, #7
 80041de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	0018      	movs	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b002      	add	sp, #8
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	e000e010 	.word	0xe000e010

080041f0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	210f      	movs	r1, #15
 80041fc:	187b      	adds	r3, r7, r1
 80041fe:	1c02      	adds	r2, r0, #0
 8004200:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	187b      	adds	r3, r7, r1
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	b25b      	sxtb	r3, r3
 800420a:	0011      	movs	r1, r2
 800420c:	0018      	movs	r0, r3
 800420e:	f7ff ff5d 	bl	80040cc <__NVIC_SetPriority>
}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	46bd      	mov	sp, r7
 8004216:	b004      	add	sp, #16
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b082      	sub	sp, #8
 800421e:	af00      	add	r7, sp, #0
 8004220:	0002      	movs	r2, r0
 8004222:	1dfb      	adds	r3, r7, #7
 8004224:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004226:	1dfb      	adds	r3, r7, #7
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b25b      	sxtb	r3, r3
 800422c:	0018      	movs	r0, r3
 800422e:	f7ff ff33 	bl	8004098 <__NVIC_EnableIRQ>
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	46bd      	mov	sp, r7
 8004236:	b002      	add	sp, #8
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	0018      	movs	r0, r3
 8004246:	f7ff ffaf 	bl	80041a8 <SysTick_Config>
 800424a:	0003      	movs	r3, r0
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b002      	add	sp, #8
 8004252:	bd80      	pop	{r7, pc}

08004254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800426a:	e155      	b.n	8004518 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2101      	movs	r1, #1
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4091      	lsls	r1, r2
 8004276:	000a      	movs	r2, r1
 8004278:	4013      	ands	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d100      	bne.n	8004284 <HAL_GPIO_Init+0x30>
 8004282:	e146      	b.n	8004512 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	2203      	movs	r2, #3
 800428a:	4013      	ands	r3, r2
 800428c:	2b01      	cmp	r3, #1
 800428e:	d005      	beq.n	800429c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004298:	2b02      	cmp	r3, #2
 800429a:	d130      	bne.n	80042fe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	2203      	movs	r2, #3
 80042a8:	409a      	lsls	r2, r3
 80042aa:	0013      	movs	r3, r2
 80042ac:	43da      	mvns	r2, r3
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4013      	ands	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	409a      	lsls	r2, r3
 80042be:	0013      	movs	r3, r2
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042d2:	2201      	movs	r2, #1
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	409a      	lsls	r2, r3
 80042d8:	0013      	movs	r3, r2
 80042da:	43da      	mvns	r2, r3
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4013      	ands	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	091b      	lsrs	r3, r3, #4
 80042e8:	2201      	movs	r2, #1
 80042ea:	401a      	ands	r2, r3
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	409a      	lsls	r2, r3
 80042f0:	0013      	movs	r3, r2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2203      	movs	r2, #3
 8004304:	4013      	ands	r3, r2
 8004306:	2b03      	cmp	r3, #3
 8004308:	d017      	beq.n	800433a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	2203      	movs	r2, #3
 8004316:	409a      	lsls	r2, r3
 8004318:	0013      	movs	r3, r2
 800431a:	43da      	mvns	r2, r3
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	4013      	ands	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	409a      	lsls	r2, r3
 800432c:	0013      	movs	r3, r2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2203      	movs	r2, #3
 8004340:	4013      	ands	r3, r2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d123      	bne.n	800438e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	08da      	lsrs	r2, r3, #3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	3208      	adds	r2, #8
 800434e:	0092      	lsls	r2, r2, #2
 8004350:	58d3      	ldr	r3, [r2, r3]
 8004352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2207      	movs	r2, #7
 8004358:	4013      	ands	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	220f      	movs	r2, #15
 800435e:	409a      	lsls	r2, r3
 8004360:	0013      	movs	r3, r2
 8004362:	43da      	mvns	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	691a      	ldr	r2, [r3, #16]
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2107      	movs	r1, #7
 8004372:	400b      	ands	r3, r1
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	409a      	lsls	r2, r3
 8004378:	0013      	movs	r3, r2
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	08da      	lsrs	r2, r3, #3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3208      	adds	r2, #8
 8004388:	0092      	lsls	r2, r2, #2
 800438a:	6939      	ldr	r1, [r7, #16]
 800438c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	2203      	movs	r2, #3
 800439a:	409a      	lsls	r2, r3
 800439c:	0013      	movs	r3, r2
 800439e:	43da      	mvns	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	4013      	ands	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2203      	movs	r2, #3
 80043ac:	401a      	ands	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	409a      	lsls	r2, r3
 80043b4:	0013      	movs	r3, r2
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	693a      	ldr	r2, [r7, #16]
 80043c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	23c0      	movs	r3, #192	; 0xc0
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	4013      	ands	r3, r2
 80043cc:	d100      	bne.n	80043d0 <HAL_GPIO_Init+0x17c>
 80043ce:	e0a0      	b.n	8004512 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043d0:	4b57      	ldr	r3, [pc, #348]	; (8004530 <HAL_GPIO_Init+0x2dc>)
 80043d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d4:	4b56      	ldr	r3, [pc, #344]	; (8004530 <HAL_GPIO_Init+0x2dc>)
 80043d6:	2101      	movs	r1, #1
 80043d8:	430a      	orrs	r2, r1
 80043da:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80043dc:	4a55      	ldr	r2, [pc, #340]	; (8004534 <HAL_GPIO_Init+0x2e0>)
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	089b      	lsrs	r3, r3, #2
 80043e2:	3302      	adds	r3, #2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	589b      	ldr	r3, [r3, r2]
 80043e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2203      	movs	r2, #3
 80043ee:	4013      	ands	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	220f      	movs	r2, #15
 80043f4:	409a      	lsls	r2, r3
 80043f6:	0013      	movs	r3, r2
 80043f8:	43da      	mvns	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	23a0      	movs	r3, #160	; 0xa0
 8004404:	05db      	lsls	r3, r3, #23
 8004406:	429a      	cmp	r2, r3
 8004408:	d01f      	beq.n	800444a <HAL_GPIO_Init+0x1f6>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a4a      	ldr	r2, [pc, #296]	; (8004538 <HAL_GPIO_Init+0x2e4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d019      	beq.n	8004446 <HAL_GPIO_Init+0x1f2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a49      	ldr	r2, [pc, #292]	; (800453c <HAL_GPIO_Init+0x2e8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <HAL_GPIO_Init+0x1ee>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a48      	ldr	r2, [pc, #288]	; (8004540 <HAL_GPIO_Init+0x2ec>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00d      	beq.n	800443e <HAL_GPIO_Init+0x1ea>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a47      	ldr	r2, [pc, #284]	; (8004544 <HAL_GPIO_Init+0x2f0>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d007      	beq.n	800443a <HAL_GPIO_Init+0x1e6>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a46      	ldr	r2, [pc, #280]	; (8004548 <HAL_GPIO_Init+0x2f4>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d101      	bne.n	8004436 <HAL_GPIO_Init+0x1e2>
 8004432:	2305      	movs	r3, #5
 8004434:	e00a      	b.n	800444c <HAL_GPIO_Init+0x1f8>
 8004436:	2306      	movs	r3, #6
 8004438:	e008      	b.n	800444c <HAL_GPIO_Init+0x1f8>
 800443a:	2304      	movs	r3, #4
 800443c:	e006      	b.n	800444c <HAL_GPIO_Init+0x1f8>
 800443e:	2303      	movs	r3, #3
 8004440:	e004      	b.n	800444c <HAL_GPIO_Init+0x1f8>
 8004442:	2302      	movs	r3, #2
 8004444:	e002      	b.n	800444c <HAL_GPIO_Init+0x1f8>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <HAL_GPIO_Init+0x1f8>
 800444a:	2300      	movs	r3, #0
 800444c:	697a      	ldr	r2, [r7, #20]
 800444e:	2103      	movs	r1, #3
 8004450:	400a      	ands	r2, r1
 8004452:	0092      	lsls	r2, r2, #2
 8004454:	4093      	lsls	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800445c:	4935      	ldr	r1, [pc, #212]	; (8004534 <HAL_GPIO_Init+0x2e0>)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	3302      	adds	r3, #2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800446a:	4b38      	ldr	r3, [pc, #224]	; (800454c <HAL_GPIO_Init+0x2f8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	43da      	mvns	r2, r3
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4013      	ands	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685a      	ldr	r2, [r3, #4]
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	025b      	lsls	r3, r3, #9
 8004482:	4013      	ands	r3, r2
 8004484:	d003      	beq.n	800448e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <HAL_GPIO_Init+0x2f8>)
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <HAL_GPIO_Init+0x2f8>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	43da      	mvns	r2, r3
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	4013      	ands	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	2380      	movs	r3, #128	; 0x80
 80044aa:	029b      	lsls	r3, r3, #10
 80044ac:	4013      	ands	r3, r2
 80044ae:	d003      	beq.n	80044b8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80044b8:	4b24      	ldr	r3, [pc, #144]	; (800454c <HAL_GPIO_Init+0x2f8>)
 80044ba:	693a      	ldr	r2, [r7, #16]
 80044bc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044be:	4b23      	ldr	r3, [pc, #140]	; (800454c <HAL_GPIO_Init+0x2f8>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	43da      	mvns	r2, r3
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4013      	ands	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	035b      	lsls	r3, r3, #13
 80044d6:	4013      	ands	r3, r2
 80044d8:	d003      	beq.n	80044e2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4313      	orrs	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <HAL_GPIO_Init+0x2f8>)
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <HAL_GPIO_Init+0x2f8>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	43da      	mvns	r2, r3
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4013      	ands	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685a      	ldr	r2, [r3, #4]
 80044fc:	2380      	movs	r3, #128	; 0x80
 80044fe:	039b      	lsls	r3, r3, #14
 8004500:	4013      	ands	r3, r2
 8004502:	d003      	beq.n	800450c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800450c:	4b0f      	ldr	r3, [pc, #60]	; (800454c <HAL_GPIO_Init+0x2f8>)
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	3301      	adds	r3, #1
 8004516:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	40da      	lsrs	r2, r3
 8004520:	1e13      	subs	r3, r2, #0
 8004522:	d000      	beq.n	8004526 <HAL_GPIO_Init+0x2d2>
 8004524:	e6a2      	b.n	800426c <HAL_GPIO_Init+0x18>
  }
}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	46c0      	nop			; (mov r8, r8)
 800452a:	46bd      	mov	sp, r7
 800452c:	b006      	add	sp, #24
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	40010000 	.word	0x40010000
 8004538:	50000400 	.word	0x50000400
 800453c:	50000800 	.word	0x50000800
 8004540:	50000c00 	.word	0x50000c00
 8004544:	50001000 	.word	0x50001000
 8004548:	50001c00 	.word	0x50001c00
 800454c:	40010400 	.word	0x40010400

08004550 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	000a      	movs	r2, r1
 800455a:	1cbb      	adds	r3, r7, #2
 800455c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	1cba      	adds	r2, r7, #2
 8004564:	8812      	ldrh	r2, [r2, #0]
 8004566:	4013      	ands	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800456a:	230f      	movs	r3, #15
 800456c:	18fb      	adds	r3, r7, r3
 800456e:	2201      	movs	r2, #1
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	e003      	b.n	800457c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004574:	230f      	movs	r3, #15
 8004576:	18fb      	adds	r3, r7, r3
 8004578:	2200      	movs	r2, #0
 800457a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800457c:	230f      	movs	r3, #15
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	781b      	ldrb	r3, [r3, #0]
}
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b004      	add	sp, #16
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800458a:	b580      	push	{r7, lr}
 800458c:	b082      	sub	sp, #8
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
 8004592:	0008      	movs	r0, r1
 8004594:	0011      	movs	r1, r2
 8004596:	1cbb      	adds	r3, r7, #2
 8004598:	1c02      	adds	r2, r0, #0
 800459a:	801a      	strh	r2, [r3, #0]
 800459c:	1c7b      	adds	r3, r7, #1
 800459e:	1c0a      	adds	r2, r1, #0
 80045a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045a2:	1c7b      	adds	r3, r7, #1
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d004      	beq.n	80045b4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045aa:	1cbb      	adds	r3, r7, #2
 80045ac:	881a      	ldrh	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80045b2:	e003      	b.n	80045bc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80045b4:	1cbb      	adds	r3, r7, #2
 80045b6:	881a      	ldrh	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b002      	add	sp, #8
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b082      	sub	sp, #8
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	0002      	movs	r2, r0
 80045cc:	1dbb      	adds	r3, r7, #6
 80045ce:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045d0:	4b09      	ldr	r3, [pc, #36]	; (80045f8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	1dba      	adds	r2, r7, #6
 80045d6:	8812      	ldrh	r2, [r2, #0]
 80045d8:	4013      	ands	r3, r2
 80045da:	d008      	beq.n	80045ee <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80045de:	1dba      	adds	r2, r7, #6
 80045e0:	8812      	ldrh	r2, [r2, #0]
 80045e2:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045e4:	1dbb      	adds	r3, r7, #6
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 f807 	bl	80045fc <HAL_GPIO_EXTI_Callback>
  }
}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b002      	add	sp, #8
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	40010400 	.word	0x40010400

080045fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	0002      	movs	r2, r0
 8004604:	1dbb      	adds	r3, r7, #6
 8004606:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004608:	46c0      	nop			; (mov r8, r8)
 800460a:	46bd      	mov	sp, r7
 800460c:	b002      	add	sp, #8
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e082      	b.n	8004728 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2241      	movs	r2, #65	; 0x41
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d107      	bne.n	800463e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2240      	movs	r2, #64	; 0x40
 8004632:	2100      	movs	r1, #0
 8004634:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	0018      	movs	r0, r3
 800463a:	f7fe fe87 	bl	800334c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2241      	movs	r2, #65	; 0x41
 8004642:	2124      	movs	r1, #36	; 0x24
 8004644:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2101      	movs	r1, #1
 8004652:	438a      	bics	r2, r1
 8004654:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4934      	ldr	r1, [pc, #208]	; (8004730 <HAL_I2C_Init+0x120>)
 8004660:	400a      	ands	r2, r1
 8004662:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4931      	ldr	r1, [pc, #196]	; (8004734 <HAL_I2C_Init+0x124>)
 8004670:	400a      	ands	r2, r1
 8004672:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d108      	bne.n	800468e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	0209      	lsls	r1, r1, #8
 8004688:	430a      	orrs	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	e007      	b.n	800469e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2184      	movs	r1, #132	; 0x84
 8004698:	0209      	lsls	r1, r1, #8
 800469a:	430a      	orrs	r2, r1
 800469c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d104      	bne.n	80046b0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2280      	movs	r2, #128	; 0x80
 80046ac:	0112      	lsls	r2, r2, #4
 80046ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	491f      	ldr	r1, [pc, #124]	; (8004738 <HAL_I2C_Init+0x128>)
 80046bc:	430a      	orrs	r2, r1
 80046be:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	491a      	ldr	r1, [pc, #104]	; (8004734 <HAL_I2C_Init+0x124>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	431a      	orrs	r2, r3
 80046da:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69d9      	ldr	r1, [r3, #28]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1a      	ldr	r2, [r3, #32]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2101      	movs	r1, #1
 8004706:	430a      	orrs	r2, r1
 8004708:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2241      	movs	r2, #65	; 0x41
 8004714:	2120      	movs	r1, #32
 8004716:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2242      	movs	r2, #66	; 0x42
 8004722:	2100      	movs	r1, #0
 8004724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}
 8004730:	f0ffffff 	.word	0xf0ffffff
 8004734:	ffff7fff 	.word	0xffff7fff
 8004738:	02008000 	.word	0x02008000

0800473c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800473c:	b590      	push	{r4, r7, lr}
 800473e:	b089      	sub	sp, #36	; 0x24
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	0008      	movs	r0, r1
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	0019      	movs	r1, r3
 800474a:	230a      	movs	r3, #10
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	1c02      	adds	r2, r0, #0
 8004750:	801a      	strh	r2, [r3, #0]
 8004752:	2308      	movs	r3, #8
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	1c0a      	adds	r2, r1, #0
 8004758:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2241      	movs	r2, #65	; 0x41
 800475e:	5c9b      	ldrb	r3, [r3, r2]
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b20      	cmp	r3, #32
 8004764:	d000      	beq.n	8004768 <HAL_I2C_Master_Transmit+0x2c>
 8004766:	e0e7      	b.n	8004938 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2240      	movs	r2, #64	; 0x40
 800476c:	5c9b      	ldrb	r3, [r3, r2]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_I2C_Master_Transmit+0x3a>
 8004772:	2302      	movs	r3, #2
 8004774:	e0e1      	b.n	800493a <HAL_I2C_Master_Transmit+0x1fe>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2240      	movs	r2, #64	; 0x40
 800477a:	2101      	movs	r1, #1
 800477c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800477e:	f7ff fc41 	bl	8004004 <HAL_GetTick>
 8004782:	0003      	movs	r3, r0
 8004784:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	0219      	lsls	r1, r3, #8
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	2319      	movs	r3, #25
 8004792:	2201      	movs	r2, #1
 8004794:	f000 fa04 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0cc      	b.n	800493a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2241      	movs	r2, #65	; 0x41
 80047a4:	2121      	movs	r1, #33	; 0x21
 80047a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2242      	movs	r2, #66	; 0x42
 80047ac:	2110      	movs	r1, #16
 80047ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2208      	movs	r2, #8
 80047c0:	18ba      	adds	r2, r7, r2
 80047c2:	8812      	ldrh	r2, [r2, #0]
 80047c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2200      	movs	r2, #0
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2bff      	cmp	r3, #255	; 0xff
 80047d4:	d911      	bls.n	80047fa <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	22ff      	movs	r2, #255	; 0xff
 80047da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	b2da      	uxtb	r2, r3
 80047e2:	2380      	movs	r3, #128	; 0x80
 80047e4:	045c      	lsls	r4, r3, #17
 80047e6:	230a      	movs	r3, #10
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	8819      	ldrh	r1, [r3, #0]
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	4b55      	ldr	r3, [pc, #340]	; (8004944 <HAL_I2C_Master_Transmit+0x208>)
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	0023      	movs	r3, r4
 80047f4:	f000 fb74 	bl	8004ee0 <I2C_TransferConfig>
 80047f8:	e075      	b.n	80048e6 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	b2da      	uxtb	r2, r3
 800480a:	2380      	movs	r3, #128	; 0x80
 800480c:	049c      	lsls	r4, r3, #18
 800480e:	230a      	movs	r3, #10
 8004810:	18fb      	adds	r3, r7, r3
 8004812:	8819      	ldrh	r1, [r3, #0]
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	4b4b      	ldr	r3, [pc, #300]	; (8004944 <HAL_I2C_Master_Transmit+0x208>)
 8004818:	9300      	str	r3, [sp, #0]
 800481a:	0023      	movs	r3, r4
 800481c:	f000 fb60 	bl	8004ee0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004820:	e061      	b.n	80048e6 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	0018      	movs	r0, r3
 800482a:	f000 f9f8 	bl	8004c1e <I2C_WaitOnTXISFlagUntilTimeout>
 800482e:	1e03      	subs	r3, r0, #0
 8004830:	d001      	beq.n	8004836 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e081      	b.n	800493a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	781a      	ldrb	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	3b01      	subs	r3, #1
 8004860:	b29a      	uxth	r2, r3
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d03a      	beq.n	80048e6 <HAL_I2C_Master_Transmit+0x1aa>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004874:	2b00      	cmp	r3, #0
 8004876:	d136      	bne.n	80048e6 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	0013      	movs	r3, r2
 8004882:	2200      	movs	r2, #0
 8004884:	2180      	movs	r1, #128	; 0x80
 8004886:	f000 f98b 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800488a:	1e03      	subs	r3, r0, #0
 800488c:	d001      	beq.n	8004892 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e053      	b.n	800493a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2bff      	cmp	r3, #255	; 0xff
 800489a:	d911      	bls.n	80048c0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	22ff      	movs	r2, #255	; 0xff
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	2380      	movs	r3, #128	; 0x80
 80048aa:	045c      	lsls	r4, r3, #17
 80048ac:	230a      	movs	r3, #10
 80048ae:	18fb      	adds	r3, r7, r3
 80048b0:	8819      	ldrh	r1, [r3, #0]
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	2300      	movs	r3, #0
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	0023      	movs	r3, r4
 80048ba:	f000 fb11 	bl	8004ee0 <I2C_TransferConfig>
 80048be:	e012      	b.n	80048e6 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	049c      	lsls	r4, r3, #18
 80048d4:	230a      	movs	r3, #10
 80048d6:	18fb      	adds	r3, r7, r3
 80048d8:	8819      	ldrh	r1, [r3, #0]
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	2300      	movs	r3, #0
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	0023      	movs	r3, r4
 80048e2:	f000 fafd 	bl	8004ee0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d198      	bne.n	8004822 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f000 f9d0 	bl	8004c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 80048fc:	1e03      	subs	r3, r0, #0
 80048fe:	d001      	beq.n	8004904 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e01a      	b.n	800493a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2220      	movs	r2, #32
 800490a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	490c      	ldr	r1, [pc, #48]	; (8004948 <HAL_I2C_Master_Transmit+0x20c>)
 8004918:	400a      	ands	r2, r1
 800491a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2241      	movs	r2, #65	; 0x41
 8004920:	2120      	movs	r1, #32
 8004922:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2242      	movs	r2, #66	; 0x42
 8004928:	2100      	movs	r1, #0
 800492a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	2100      	movs	r1, #0
 8004932:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004934:	2300      	movs	r3, #0
 8004936:	e000      	b.n	800493a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004938:	2302      	movs	r3, #2
  }
}
 800493a:	0018      	movs	r0, r3
 800493c:	46bd      	mov	sp, r7
 800493e:	b007      	add	sp, #28
 8004940:	bd90      	pop	{r4, r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	80002000 	.word	0x80002000
 8004948:	fe00e800 	.word	0xfe00e800

0800494c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b089      	sub	sp, #36	; 0x24
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	0008      	movs	r0, r1
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	0019      	movs	r1, r3
 800495a:	230a      	movs	r3, #10
 800495c:	18fb      	adds	r3, r7, r3
 800495e:	1c02      	adds	r2, r0, #0
 8004960:	801a      	strh	r2, [r3, #0]
 8004962:	2308      	movs	r3, #8
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	1c0a      	adds	r2, r1, #0
 8004968:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2241      	movs	r2, #65	; 0x41
 800496e:	5c9b      	ldrb	r3, [r3, r2]
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b20      	cmp	r3, #32
 8004974:	d000      	beq.n	8004978 <HAL_I2C_Master_Receive+0x2c>
 8004976:	e0e8      	b.n	8004b4a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	5c9b      	ldrb	r3, [r3, r2]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_I2C_Master_Receive+0x3a>
 8004982:	2302      	movs	r3, #2
 8004984:	e0e2      	b.n	8004b4c <HAL_I2C_Master_Receive+0x200>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2240      	movs	r2, #64	; 0x40
 800498a:	2101      	movs	r1, #1
 800498c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800498e:	f7ff fb39 	bl	8004004 <HAL_GetTick>
 8004992:	0003      	movs	r3, r0
 8004994:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004996:	2380      	movs	r3, #128	; 0x80
 8004998:	0219      	lsls	r1, r3, #8
 800499a:	68f8      	ldr	r0, [r7, #12]
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2319      	movs	r3, #25
 80049a2:	2201      	movs	r2, #1
 80049a4:	f000 f8fc 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 80049a8:	1e03      	subs	r3, r0, #0
 80049aa:	d001      	beq.n	80049b0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e0cd      	b.n	8004b4c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2241      	movs	r2, #65	; 0x41
 80049b4:	2122      	movs	r1, #34	; 0x22
 80049b6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2242      	movs	r2, #66	; 0x42
 80049bc:	2110      	movs	r1, #16
 80049be:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2208      	movs	r2, #8
 80049d0:	18ba      	adds	r2, r7, r2
 80049d2:	8812      	ldrh	r2, [r2, #0]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2bff      	cmp	r3, #255	; 0xff
 80049e4:	d911      	bls.n	8004a0a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	22ff      	movs	r2, #255	; 0xff
 80049ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	2380      	movs	r3, #128	; 0x80
 80049f4:	045c      	lsls	r4, r3, #17
 80049f6:	230a      	movs	r3, #10
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	8819      	ldrh	r1, [r3, #0]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	4b55      	ldr	r3, [pc, #340]	; (8004b54 <HAL_I2C_Master_Receive+0x208>)
 8004a00:	9300      	str	r3, [sp, #0]
 8004a02:	0023      	movs	r3, r4
 8004a04:	f000 fa6c 	bl	8004ee0 <I2C_TransferConfig>
 8004a08:	e076      	b.n	8004af8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	049c      	lsls	r4, r3, #18
 8004a1e:	230a      	movs	r3, #10
 8004a20:	18fb      	adds	r3, r7, r3
 8004a22:	8819      	ldrh	r1, [r3, #0]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	4b4b      	ldr	r3, [pc, #300]	; (8004b54 <HAL_I2C_Master_Receive+0x208>)
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	0023      	movs	r3, r4
 8004a2c:	f000 fa58 	bl	8004ee0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004a30:	e062      	b.n	8004af8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f000 f96b 	bl	8004d14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a3e:	1e03      	subs	r3, r0, #0
 8004a40:	d001      	beq.n	8004a46 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e082      	b.n	8004b4c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	b2d2      	uxtb	r2, r2
 8004a52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d03a      	beq.n	8004af8 <HAL_I2C_Master_Receive+0x1ac>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d136      	bne.n	8004af8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	9300      	str	r3, [sp, #0]
 8004a92:	0013      	movs	r3, r2
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	f000 f882 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004a9c:	1e03      	subs	r3, r0, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e053      	b.n	8004b4c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	2bff      	cmp	r3, #255	; 0xff
 8004aac:	d911      	bls.n	8004ad2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	22ff      	movs	r2, #255	; 0xff
 8004ab2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	045c      	lsls	r4, r3, #17
 8004abe:	230a      	movs	r3, #10
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	8819      	ldrh	r1, [r3, #0]
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9300      	str	r3, [sp, #0]
 8004aca:	0023      	movs	r3, r4
 8004acc:	f000 fa08 	bl	8004ee0 <I2C_TransferConfig>
 8004ad0:	e012      	b.n	8004af8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	049c      	lsls	r4, r3, #18
 8004ae6:	230a      	movs	r3, #10
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	8819      	ldrh	r1, [r3, #0]
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	2300      	movs	r3, #0
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	0023      	movs	r3, r4
 8004af4:	f000 f9f4 	bl	8004ee0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d197      	bne.n	8004a32 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f000 f8c7 	bl	8004c9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b0e:	1e03      	subs	r3, r0, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e01a      	b.n	8004b4c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	490b      	ldr	r1, [pc, #44]	; (8004b58 <HAL_I2C_Master_Receive+0x20c>)
 8004b2a:	400a      	ands	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2241      	movs	r2, #65	; 0x41
 8004b32:	2120      	movs	r1, #32
 8004b34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2242      	movs	r2, #66	; 0x42
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2240      	movs	r2, #64	; 0x40
 8004b42:	2100      	movs	r1, #0
 8004b44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b46:	2300      	movs	r3, #0
 8004b48:	e000      	b.n	8004b4c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8004b4a:	2302      	movs	r3, #2
  }
}
 8004b4c:	0018      	movs	r0, r3
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	b007      	add	sp, #28
 8004b52:	bd90      	pop	{r4, r7, pc}
 8004b54:	80002400 	.word	0x80002400
 8004b58:	fe00e800 	.word	0xfe00e800

08004b5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d103      	bne.n	8004b7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	2201      	movs	r2, #1
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d007      	beq.n	8004b98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2101      	movs	r1, #1
 8004b94:	430a      	orrs	r2, r1
 8004b96:	619a      	str	r2, [r3, #24]
  }
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	1dfb      	adds	r3, r7, #7
 8004bae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb0:	e021      	b.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	d01e      	beq.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb8:	f7ff fa24 	bl	8004004 <HAL_GetTick>
 8004bbc:	0002      	movs	r2, r0
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	683a      	ldr	r2, [r7, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d302      	bcc.n	8004bce <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d113      	bne.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2241      	movs	r2, #65	; 0x41
 8004bde:	2120      	movs	r1, #32
 8004be0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2242      	movs	r2, #66	; 0x42
 8004be6:	2100      	movs	r1, #0
 8004be8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2240      	movs	r2, #64	; 0x40
 8004bee:	2100      	movs	r1, #0
 8004bf0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e00f      	b.n	8004c16 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	425a      	negs	r2, r3
 8004c06:	4153      	adcs	r3, r2
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	001a      	movs	r2, r3
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d0ce      	beq.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	0018      	movs	r0, r3
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	b004      	add	sp, #16
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b084      	sub	sp, #16
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	60b9      	str	r1, [r7, #8]
 8004c28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c2a:	e02b      	b.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	0018      	movs	r0, r3
 8004c34:	f000 f8da 	bl	8004dec <I2C_IsAcknowledgeFailed>
 8004c38:	1e03      	subs	r3, r0, #0
 8004c3a:	d001      	beq.n	8004c40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e029      	b.n	8004c94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3301      	adds	r3, #1
 8004c44:	d01e      	beq.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c46:	f7ff f9dd 	bl	8004004 <HAL_GetTick>
 8004c4a:	0002      	movs	r2, r0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d113      	bne.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c60:	2220      	movs	r2, #32
 8004c62:	431a      	orrs	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2241      	movs	r2, #65	; 0x41
 8004c6c:	2120      	movs	r1, #32
 8004c6e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2242      	movs	r2, #66	; 0x42
 8004c74:	2100      	movs	r1, #0
 8004c76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2240      	movs	r2, #64	; 0x40
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e007      	b.n	8004c94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d1cc      	bne.n	8004c2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	0018      	movs	r0, r3
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b004      	add	sp, #16
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ca8:	e028      	b.n	8004cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f000 f89b 	bl	8004dec <I2C_IsAcknowledgeFailed>
 8004cb6:	1e03      	subs	r3, r0, #0
 8004cb8:	d001      	beq.n	8004cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e026      	b.n	8004d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7ff f9a1 	bl	8004004 <HAL_GetTick>
 8004cc2:	0002      	movs	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d113      	bne.n	8004cfc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd8:	2220      	movs	r2, #32
 8004cda:	431a      	orrs	r2, r3
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2241      	movs	r2, #65	; 0x41
 8004ce4:	2120      	movs	r1, #32
 8004ce6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2242      	movs	r2, #66	; 0x42
 8004cec:	2100      	movs	r1, #0
 8004cee:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2240      	movs	r2, #64	; 0x40
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e007      	b.n	8004d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2220      	movs	r2, #32
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d1cf      	bne.n	8004caa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b004      	add	sp, #16
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d20:	e055      	b.n	8004dce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f000 f85f 	bl	8004dec <I2C_IsAcknowledgeFailed>
 8004d2e:	1e03      	subs	r3, r0, #0
 8004d30:	d001      	beq.n	8004d36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e053      	b.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	4013      	ands	r3, r2
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d129      	bne.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2204      	movs	r2, #4
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	2b04      	cmp	r3, #4
 8004d50:	d105      	bne.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	e03f      	b.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2220      	movs	r2, #32
 8004d64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	491d      	ldr	r1, [pc, #116]	; (8004de8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004d72:	400a      	ands	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2241      	movs	r2, #65	; 0x41
 8004d80:	2120      	movs	r1, #32
 8004d82:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2242      	movs	r2, #66	; 0x42
 8004d88:	2100      	movs	r1, #0
 8004d8a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2240      	movs	r2, #64	; 0x40
 8004d90:	2100      	movs	r1, #0
 8004d92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e022      	b.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d98:	f7ff f934 	bl	8004004 <HAL_GetTick>
 8004d9c:	0002      	movs	r2, r0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db2:	2220      	movs	r2, #32
 8004db4:	431a      	orrs	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2241      	movs	r2, #65	; 0x41
 8004dbe:	2120      	movs	r1, #32
 8004dc0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2240      	movs	r2, #64	; 0x40
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e007      	b.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d1a2      	bne.n	8004d22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	0018      	movs	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	b004      	add	sp, #16
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	fe00e800 	.word	0xfe00e800

08004dec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	2210      	movs	r2, #16
 8004e00:	4013      	ands	r3, r2
 8004e02:	2b10      	cmp	r3, #16
 8004e04:	d164      	bne.n	8004ed0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	049b      	lsls	r3, r3, #18
 8004e10:	401a      	ands	r2, r3
 8004e12:	2380      	movs	r3, #128	; 0x80
 8004e14:	049b      	lsls	r3, r3, #18
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d02b      	beq.n	8004e72 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2180      	movs	r1, #128	; 0x80
 8004e26:	01c9      	lsls	r1, r1, #7
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e2c:	e021      	b.n	8004e72 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	3301      	adds	r3, #1
 8004e32:	d01e      	beq.n	8004e72 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e34:	f7ff f8e6 	bl	8004004 <HAL_GetTick>
 8004e38:	0002      	movs	r2, r0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d302      	bcc.n	8004e4a <I2C_IsAcknowledgeFailed+0x5e>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d113      	bne.n	8004e72 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	2220      	movs	r2, #32
 8004e50:	431a      	orrs	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2241      	movs	r2, #65	; 0x41
 8004e5a:	2120      	movs	r1, #32
 8004e5c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2242      	movs	r2, #66	; 0x42
 8004e62:	2100      	movs	r1, #0
 8004e64:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2240      	movs	r2, #64	; 0x40
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e02f      	b.n	8004ed2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2220      	movs	r2, #32
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d1d6      	bne.n	8004e2e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2210      	movs	r2, #16
 8004e86:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	0018      	movs	r0, r3
 8004e94:	f7ff fe62 	bl	8004b5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	490e      	ldr	r1, [pc, #56]	; (8004edc <I2C_IsAcknowledgeFailed+0xf0>)
 8004ea4:	400a      	ands	r2, r1
 8004ea6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eac:	2204      	movs	r2, #4
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2241      	movs	r2, #65	; 0x41
 8004eb8:	2120      	movs	r1, #32
 8004eba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2242      	movs	r2, #66	; 0x42
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2240      	movs	r2, #64	; 0x40
 8004ec8:	2100      	movs	r1, #0
 8004eca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e000      	b.n	8004ed2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b004      	add	sp, #16
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	fe00e800 	.word	0xfe00e800

08004ee0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ee0:	b590      	push	{r4, r7, lr}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	0008      	movs	r0, r1
 8004eea:	0011      	movs	r1, r2
 8004eec:	607b      	str	r3, [r7, #4]
 8004eee:	240a      	movs	r4, #10
 8004ef0:	193b      	adds	r3, r7, r4
 8004ef2:	1c02      	adds	r2, r0, #0
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	2009      	movs	r0, #9
 8004ef8:	183b      	adds	r3, r7, r0
 8004efa:	1c0a      	adds	r2, r1, #0
 8004efc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	6a3a      	ldr	r2, [r7, #32]
 8004f06:	0d51      	lsrs	r1, r2, #21
 8004f08:	2280      	movs	r2, #128	; 0x80
 8004f0a:	00d2      	lsls	r2, r2, #3
 8004f0c:	400a      	ands	r2, r1
 8004f0e:	490e      	ldr	r1, [pc, #56]	; (8004f48 <I2C_TransferConfig+0x68>)
 8004f10:	430a      	orrs	r2, r1
 8004f12:	43d2      	mvns	r2, r2
 8004f14:	401a      	ands	r2, r3
 8004f16:	0011      	movs	r1, r2
 8004f18:	193b      	adds	r3, r7, r4
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	059b      	lsls	r3, r3, #22
 8004f1e:	0d9a      	lsrs	r2, r3, #22
 8004f20:	183b      	adds	r3, r7, r0
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	0418      	lsls	r0, r3, #16
 8004f26:	23ff      	movs	r3, #255	; 0xff
 8004f28:	041b      	lsls	r3, r3, #16
 8004f2a:	4003      	ands	r3, r0
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	431a      	orrs	r2, r3
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	431a      	orrs	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004f3e:	46c0      	nop			; (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b005      	add	sp, #20
 8004f44:	bd90      	pop	{r4, r7, pc}
 8004f46:	46c0      	nop			; (mov r8, r8)
 8004f48:	03ff63ff 	.word	0x03ff63ff

08004f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2241      	movs	r2, #65	; 0x41
 8004f5a:	5c9b      	ldrb	r3, [r3, r2]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b20      	cmp	r3, #32
 8004f60:	d138      	bne.n	8004fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2240      	movs	r2, #64	; 0x40
 8004f66:	5c9b      	ldrb	r3, [r3, r2]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e032      	b.n	8004fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2240      	movs	r2, #64	; 0x40
 8004f74:	2101      	movs	r1, #1
 8004f76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2241      	movs	r2, #65	; 0x41
 8004f7c:	2124      	movs	r1, #36	; 0x24
 8004f7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	438a      	bics	r2, r1
 8004f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4911      	ldr	r1, [pc, #68]	; (8004fe0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f9c:	400a      	ands	r2, r1
 8004f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6819      	ldr	r1, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2101      	movs	r1, #1
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2241      	movs	r2, #65	; 0x41
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2240      	movs	r2, #64	; 0x40
 8004fcc:	2100      	movs	r1, #0
 8004fce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e000      	b.n	8004fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004fd4:	2302      	movs	r3, #2
  }
}
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	b002      	add	sp, #8
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	46c0      	nop			; (mov r8, r8)
 8004fe0:	ffffefff 	.word	0xffffefff

08004fe4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2241      	movs	r2, #65	; 0x41
 8004ff2:	5c9b      	ldrb	r3, [r3, r2]
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d139      	bne.n	800506e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2240      	movs	r2, #64	; 0x40
 8004ffe:	5c9b      	ldrb	r3, [r3, r2]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005004:	2302      	movs	r3, #2
 8005006:	e033      	b.n	8005070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	2101      	movs	r1, #1
 800500e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2241      	movs	r2, #65	; 0x41
 8005014:	2124      	movs	r1, #36	; 0x24
 8005016:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2101      	movs	r1, #1
 8005024:	438a      	bics	r2, r1
 8005026:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4a11      	ldr	r2, [pc, #68]	; (8005078 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005034:	4013      	ands	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2101      	movs	r1, #1
 8005056:	430a      	orrs	r2, r1
 8005058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2241      	movs	r2, #65	; 0x41
 800505e:	2120      	movs	r1, #32
 8005060:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2240      	movs	r2, #64	; 0x40
 8005066:	2100      	movs	r1, #0
 8005068:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e000      	b.n	8005070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
  }
}
 8005070:	0018      	movs	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	b004      	add	sp, #16
 8005076:	bd80      	pop	{r7, pc}
 8005078:	fffff0ff 	.word	0xfffff0ff

0800507c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8005080:	4b04      	ldr	r3, [pc, #16]	; (8005094 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b03      	ldr	r3, [pc, #12]	; (8005094 <HAL_PWR_EnableBkUpAccess+0x18>)
 8005086:	2180      	movs	r1, #128	; 0x80
 8005088:	0049      	lsls	r1, r1, #1
 800508a:	430a      	orrs	r2, r1
 800508c:	601a      	str	r2, [r3, #0]
}
 800508e:	46c0      	nop			; (mov r8, r8)
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	40007000 	.word	0x40007000

08005098 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	000a      	movs	r2, r1
 80050a2:	1cfb      	adds	r3, r7, #3
 80050a4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80050aa:	4b25      	ldr	r3, [pc, #148]	; (8005140 <HAL_PWR_EnterSTOPMode+0xa8>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4013      	ands	r3, r2
 80050b4:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80050b6:	4b23      	ldr	r3, [pc, #140]	; (8005144 <HAL_PWR_EnterSTOPMode+0xac>)
 80050b8:	6a1b      	ldr	r3, [r3, #32]
 80050ba:	2201      	movs	r2, #1
 80050bc:	4013      	ands	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_PWR_EnterSTOPMode+0x40>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80050cc:	4b1c      	ldr	r3, [pc, #112]	; (8005140 <HAL_PWR_EnterSTOPMode+0xa8>)
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	4b1b      	ldr	r3, [pc, #108]	; (8005140 <HAL_PWR_EnterSTOPMode+0xa8>)
 80050d2:	491d      	ldr	r1, [pc, #116]	; (8005148 <HAL_PWR_EnterSTOPMode+0xb0>)
 80050d4:	400a      	ands	r2, r1
 80050d6:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 80050d8:	4b19      	ldr	r3, [pc, #100]	; (8005140 <HAL_PWR_EnterSTOPMode+0xa8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2203      	movs	r2, #3
 80050e2:	4393      	bics	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 80050ee:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_PWR_EnterSTOPMode+0xa8>)
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80050f4:	4b15      	ldr	r3, [pc, #84]	; (800514c <HAL_PWR_EnterSTOPMode+0xb4>)
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	4b14      	ldr	r3, [pc, #80]	; (800514c <HAL_PWR_EnterSTOPMode+0xb4>)
 80050fa:	2104      	movs	r1, #4
 80050fc:	430a      	orrs	r2, r1
 80050fe:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005100:	1cfb      	adds	r3, r7, #3
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005108:	bf30      	wfi
 800510a:	e002      	b.n	8005112 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800510c:	bf40      	sev
    __WFE();
 800510e:	bf20      	wfe
    __WFE();
 8005110:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005112:	4b0e      	ldr	r3, [pc, #56]	; (800514c <HAL_PWR_EnterSTOPMode+0xb4>)
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	4b0d      	ldr	r3, [pc, #52]	; (800514c <HAL_PWR_EnterSTOPMode+0xb4>)
 8005118:	2104      	movs	r1, #4
 800511a:	438a      	bics	r2, r1
 800511c:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d009      	beq.n	8005138 <HAL_PWR_EnterSTOPMode+0xa0>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d006      	beq.n	8005138 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800512a:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_PWR_EnterSTOPMode+0xa8>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b04      	ldr	r3, [pc, #16]	; (8005140 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005130:	2180      	movs	r1, #128	; 0x80
 8005132:	0089      	lsls	r1, r1, #2
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]
  }
}
 8005138:	46c0      	nop			; (mov r8, r8)
 800513a:	46bd      	mov	sp, r7
 800513c:	b006      	add	sp, #24
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40007000 	.word	0x40007000
 8005144:	40010000 	.word	0x40010000
 8005148:	fffffdff 	.word	0xfffffdff
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005154:	4b04      	ldr	r3, [pc, #16]	; (8005168 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	4b03      	ldr	r3, [pc, #12]	; (8005168 <HAL_PWREx_EnableFastWakeUp+0x18>)
 800515a:	2180      	movs	r1, #128	; 0x80
 800515c:	00c9      	lsls	r1, r1, #3
 800515e:	430a      	orrs	r2, r1
 8005160:	601a      	str	r2, [r3, #0]
}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40007000 	.word	0x40007000

0800516c <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005170:	4b04      	ldr	r3, [pc, #16]	; (8005184 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b03      	ldr	r3, [pc, #12]	; (8005184 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8005176:	2180      	movs	r1, #128	; 0x80
 8005178:	0089      	lsls	r1, r1, #2
 800517a:	430a      	orrs	r2, r1
 800517c:	601a      	str	r2, [r3, #0]
}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	40007000 	.word	0x40007000

08005188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005188:	b5b0      	push	{r4, r5, r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f000 fbbf 	bl	800591a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800519c:	4bc9      	ldr	r3, [pc, #804]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	220c      	movs	r2, #12
 80051a2:	4013      	ands	r3, r2
 80051a4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051a6:	4bc7      	ldr	r3, [pc, #796]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	2380      	movs	r3, #128	; 0x80
 80051ac:	025b      	lsls	r3, r3, #9
 80051ae:	4013      	ands	r3, r2
 80051b0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	4013      	ands	r3, r2
 80051ba:	d100      	bne.n	80051be <HAL_RCC_OscConfig+0x36>
 80051bc:	e07e      	b.n	80052bc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d007      	beq.n	80051d4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b0c      	cmp	r3, #12
 80051c8:	d112      	bne.n	80051f0 <HAL_RCC_OscConfig+0x68>
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	025b      	lsls	r3, r3, #9
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d10d      	bne.n	80051f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	4bbb      	ldr	r3, [pc, #748]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	029b      	lsls	r3, r3, #10
 80051dc:	4013      	ands	r3, r2
 80051de:	d100      	bne.n	80051e2 <HAL_RCC_OscConfig+0x5a>
 80051e0:	e06b      	b.n	80052ba <HAL_RCC_OscConfig+0x132>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d167      	bne.n	80052ba <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f000 fb95 	bl	800591a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	2380      	movs	r3, #128	; 0x80
 80051f6:	025b      	lsls	r3, r3, #9
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d107      	bne.n	800520c <HAL_RCC_OscConfig+0x84>
 80051fc:	4bb1      	ldr	r3, [pc, #708]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	4bb0      	ldr	r3, [pc, #704]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005202:	2180      	movs	r1, #128	; 0x80
 8005204:	0249      	lsls	r1, r1, #9
 8005206:	430a      	orrs	r2, r1
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e027      	b.n	800525c <HAL_RCC_OscConfig+0xd4>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685a      	ldr	r2, [r3, #4]
 8005210:	23a0      	movs	r3, #160	; 0xa0
 8005212:	02db      	lsls	r3, r3, #11
 8005214:	429a      	cmp	r2, r3
 8005216:	d10e      	bne.n	8005236 <HAL_RCC_OscConfig+0xae>
 8005218:	4baa      	ldr	r3, [pc, #680]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	4ba9      	ldr	r3, [pc, #676]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800521e:	2180      	movs	r1, #128	; 0x80
 8005220:	02c9      	lsls	r1, r1, #11
 8005222:	430a      	orrs	r2, r1
 8005224:	601a      	str	r2, [r3, #0]
 8005226:	4ba7      	ldr	r3, [pc, #668]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	4ba6      	ldr	r3, [pc, #664]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800522c:	2180      	movs	r1, #128	; 0x80
 800522e:	0249      	lsls	r1, r1, #9
 8005230:	430a      	orrs	r2, r1
 8005232:	601a      	str	r2, [r3, #0]
 8005234:	e012      	b.n	800525c <HAL_RCC_OscConfig+0xd4>
 8005236:	4ba3      	ldr	r3, [pc, #652]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4ba2      	ldr	r3, [pc, #648]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800523c:	49a2      	ldr	r1, [pc, #648]	; (80054c8 <HAL_RCC_OscConfig+0x340>)
 800523e:	400a      	ands	r2, r1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	4ba0      	ldr	r3, [pc, #640]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	2380      	movs	r3, #128	; 0x80
 8005248:	025b      	lsls	r3, r3, #9
 800524a:	4013      	ands	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4b9c      	ldr	r3, [pc, #624]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	4b9b      	ldr	r3, [pc, #620]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005256:	499d      	ldr	r1, [pc, #628]	; (80054cc <HAL_RCC_OscConfig+0x344>)
 8005258:	400a      	ands	r2, r1
 800525a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d015      	beq.n	8005290 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fe fece 	bl	8004004 <HAL_GetTick>
 8005268:	0003      	movs	r3, r0
 800526a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800526c:	e009      	b.n	8005282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800526e:	f7fe fec9 	bl	8004004 <HAL_GetTick>
 8005272:	0002      	movs	r2, r0
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	2b64      	cmp	r3, #100	; 0x64
 800527a:	d902      	bls.n	8005282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	f000 fb4c 	bl	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005282:	4b90      	ldr	r3, [pc, #576]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	2380      	movs	r3, #128	; 0x80
 8005288:	029b      	lsls	r3, r3, #10
 800528a:	4013      	ands	r3, r2
 800528c:	d0ef      	beq.n	800526e <HAL_RCC_OscConfig+0xe6>
 800528e:	e015      	b.n	80052bc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fe feb8 	bl	8004004 <HAL_GetTick>
 8005294:	0003      	movs	r3, r0
 8005296:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800529a:	f7fe feb3 	bl	8004004 <HAL_GetTick>
 800529e:	0002      	movs	r2, r0
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b64      	cmp	r3, #100	; 0x64
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e336      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ac:	4b85      	ldr	r3, [pc, #532]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	2380      	movs	r3, #128	; 0x80
 80052b2:	029b      	lsls	r3, r3, #10
 80052b4:	4013      	ands	r3, r2
 80052b6:	d1f0      	bne.n	800529a <HAL_RCC_OscConfig+0x112>
 80052b8:	e000      	b.n	80052bc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052ba:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2202      	movs	r2, #2
 80052c2:	4013      	ands	r3, r2
 80052c4:	d100      	bne.n	80052c8 <HAL_RCC_OscConfig+0x140>
 80052c6:	e099      	b.n	80053fc <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	2220      	movs	r2, #32
 80052d2:	4013      	ands	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80052d6:	4b7b      	ldr	r3, [pc, #492]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	4b7a      	ldr	r3, [pc, #488]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80052dc:	2120      	movs	r1, #32
 80052de:	430a      	orrs	r2, r1
 80052e0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	2220      	movs	r2, #32
 80052e6:	4393      	bics	r3, r2
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d13e      	bne.n	8005374 <HAL_RCC_OscConfig+0x1ec>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d13b      	bne.n	8005374 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80052fc:	4b71      	ldr	r3, [pc, #452]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2204      	movs	r2, #4
 8005302:	4013      	ands	r3, r2
 8005304:	d004      	beq.n	8005310 <HAL_RCC_OscConfig+0x188>
 8005306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e304      	b.n	800591a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005310:	4b6c      	ldr	r3, [pc, #432]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4a6e      	ldr	r2, [pc, #440]	; (80054d0 <HAL_RCC_OscConfig+0x348>)
 8005316:	4013      	ands	r3, r2
 8005318:	0019      	movs	r1, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	021a      	lsls	r2, r3, #8
 8005320:	4b68      	ldr	r3, [pc, #416]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005326:	4b67      	ldr	r3, [pc, #412]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2209      	movs	r2, #9
 800532c:	4393      	bics	r3, r2
 800532e:	0019      	movs	r1, r3
 8005330:	4b64      	ldr	r3, [pc, #400]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005334:	430a      	orrs	r2, r1
 8005336:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005338:	f000 fc42 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 800533c:	0001      	movs	r1, r0
 800533e:	4b61      	ldr	r3, [pc, #388]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	220f      	movs	r2, #15
 8005346:	4013      	ands	r3, r2
 8005348:	4a62      	ldr	r2, [pc, #392]	; (80054d4 <HAL_RCC_OscConfig+0x34c>)
 800534a:	5cd3      	ldrb	r3, [r2, r3]
 800534c:	000a      	movs	r2, r1
 800534e:	40da      	lsrs	r2, r3
 8005350:	4b61      	ldr	r3, [pc, #388]	; (80054d8 <HAL_RCC_OscConfig+0x350>)
 8005352:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005354:	4b61      	ldr	r3, [pc, #388]	; (80054dc <HAL_RCC_OscConfig+0x354>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2513      	movs	r5, #19
 800535a:	197c      	adds	r4, r7, r5
 800535c:	0018      	movs	r0, r3
 800535e:	f7fe fe0b 	bl	8003f78 <HAL_InitTick>
 8005362:	0003      	movs	r3, r0
 8005364:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005366:	197b      	adds	r3, r7, r5
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d046      	beq.n	80053fc <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800536e:	197b      	adds	r3, r7, r5
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	e2d2      	b.n	800591a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	d027      	beq.n	80053ca <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800537a:	4b52      	ldr	r3, [pc, #328]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2209      	movs	r2, #9
 8005380:	4393      	bics	r3, r2
 8005382:	0019      	movs	r1, r3
 8005384:	4b4f      	ldr	r3, [pc, #316]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005388:	430a      	orrs	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800538c:	f7fe fe3a 	bl	8004004 <HAL_GetTick>
 8005390:	0003      	movs	r3, r0
 8005392:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005396:	f7fe fe35 	bl	8004004 <HAL_GetTick>
 800539a:	0002      	movs	r2, r0
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e2b8      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053a8:	4b46      	ldr	r3, [pc, #280]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2204      	movs	r2, #4
 80053ae:	4013      	ands	r3, r2
 80053b0:	d0f1      	beq.n	8005396 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b2:	4b44      	ldr	r3, [pc, #272]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	4a46      	ldr	r2, [pc, #280]	; (80054d0 <HAL_RCC_OscConfig+0x348>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	0019      	movs	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	021a      	lsls	r2, r3, #8
 80053c2:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80053c4:	430a      	orrs	r2, r1
 80053c6:	605a      	str	r2, [r3, #4]
 80053c8:	e018      	b.n	80053fc <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ca:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b3d      	ldr	r3, [pc, #244]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80053d0:	2101      	movs	r1, #1
 80053d2:	438a      	bics	r2, r1
 80053d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d6:	f7fe fe15 	bl	8004004 <HAL_GetTick>
 80053da:	0003      	movs	r3, r0
 80053dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e0:	f7fe fe10 	bl	8004004 <HAL_GetTick>
 80053e4:	0002      	movs	r2, r0
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e293      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053f2:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2204      	movs	r2, #4
 80053f8:	4013      	ands	r3, r2
 80053fa:	d1f1      	bne.n	80053e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2210      	movs	r2, #16
 8005402:	4013      	ands	r3, r2
 8005404:	d100      	bne.n	8005408 <HAL_RCC_OscConfig+0x280>
 8005406:	e0a2      	b.n	800554e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d140      	bne.n	8005490 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800540e:	4b2d      	ldr	r3, [pc, #180]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	2380      	movs	r3, #128	; 0x80
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4013      	ands	r3, r2
 8005418:	d005      	beq.n	8005426 <HAL_RCC_OscConfig+0x29e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e279      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	4a2d      	ldr	r2, [pc, #180]	; (80054e0 <HAL_RCC_OscConfig+0x358>)
 800542c:	4013      	ands	r3, r2
 800542e:	0019      	movs	r1, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800543a:	4b22      	ldr	r3, [pc, #136]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	0a19      	lsrs	r1, r3, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	061a      	lsls	r2, r3, #24
 8005448:	4b1e      	ldr	r3, [pc, #120]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800544a:	430a      	orrs	r2, r1
 800544c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005452:	0b5b      	lsrs	r3, r3, #13
 8005454:	3301      	adds	r3, #1
 8005456:	2280      	movs	r2, #128	; 0x80
 8005458:	0212      	lsls	r2, r2, #8
 800545a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800545c:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	091b      	lsrs	r3, r3, #4
 8005462:	210f      	movs	r1, #15
 8005464:	400b      	ands	r3, r1
 8005466:	491b      	ldr	r1, [pc, #108]	; (80054d4 <HAL_RCC_OscConfig+0x34c>)
 8005468:	5ccb      	ldrb	r3, [r1, r3]
 800546a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800546c:	4b1a      	ldr	r3, [pc, #104]	; (80054d8 <HAL_RCC_OscConfig+0x350>)
 800546e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005470:	4b1a      	ldr	r3, [pc, #104]	; (80054dc <HAL_RCC_OscConfig+0x354>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2513      	movs	r5, #19
 8005476:	197c      	adds	r4, r7, r5
 8005478:	0018      	movs	r0, r3
 800547a:	f7fe fd7d 	bl	8003f78 <HAL_InitTick>
 800547e:	0003      	movs	r3, r0
 8005480:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005482:	197b      	adds	r3, r7, r5
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d061      	beq.n	800554e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800548a:	197b      	adds	r3, r7, r5
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	e244      	b.n	800591a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d040      	beq.n	800551a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	4b09      	ldr	r3, [pc, #36]	; (80054c4 <HAL_RCC_OscConfig+0x33c>)
 800549e:	2180      	movs	r1, #128	; 0x80
 80054a0:	0049      	lsls	r1, r1, #1
 80054a2:	430a      	orrs	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a6:	f7fe fdad 	bl	8004004 <HAL_GetTick>
 80054aa:	0003      	movs	r3, r0
 80054ac:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054ae:	e019      	b.n	80054e4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054b0:	f7fe fda8 	bl	8004004 <HAL_GetTick>
 80054b4:	0002      	movs	r2, r0
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d912      	bls.n	80054e4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e22b      	b.n	800591a <HAL_RCC_OscConfig+0x792>
 80054c2:	46c0      	nop			; (mov r8, r8)
 80054c4:	40021000 	.word	0x40021000
 80054c8:	fffeffff 	.word	0xfffeffff
 80054cc:	fffbffff 	.word	0xfffbffff
 80054d0:	ffffe0ff 	.word	0xffffe0ff
 80054d4:	0800b13c 	.word	0x0800b13c
 80054d8:	20000004 	.word	0x20000004
 80054dc:	20000008 	.word	0x20000008
 80054e0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80054e4:	4bca      	ldr	r3, [pc, #808]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4013      	ands	r3, r2
 80054ee:	d0df      	beq.n	80054b0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80054f0:	4bc7      	ldr	r3, [pc, #796]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	4ac7      	ldr	r2, [pc, #796]	; (8005814 <HAL_RCC_OscConfig+0x68c>)
 80054f6:	4013      	ands	r3, r2
 80054f8:	0019      	movs	r1, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fe:	4bc4      	ldr	r3, [pc, #784]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005500:	430a      	orrs	r2, r1
 8005502:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005504:	4bc2      	ldr	r3, [pc, #776]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	0a19      	lsrs	r1, r3, #8
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a1b      	ldr	r3, [r3, #32]
 8005510:	061a      	lsls	r2, r3, #24
 8005512:	4bbf      	ldr	r3, [pc, #764]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005514:	430a      	orrs	r2, r1
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	e019      	b.n	800554e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800551a:	4bbd      	ldr	r3, [pc, #756]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	4bbc      	ldr	r3, [pc, #752]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005520:	49bd      	ldr	r1, [pc, #756]	; (8005818 <HAL_RCC_OscConfig+0x690>)
 8005522:	400a      	ands	r2, r1
 8005524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005526:	f7fe fd6d 	bl	8004004 <HAL_GetTick>
 800552a:	0003      	movs	r3, r0
 800552c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800552e:	e008      	b.n	8005542 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005530:	f7fe fd68 	bl	8004004 <HAL_GetTick>
 8005534:	0002      	movs	r2, r0
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	2b02      	cmp	r3, #2
 800553c:	d901      	bls.n	8005542 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800553e:	2303      	movs	r3, #3
 8005540:	e1eb      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005542:	4bb3      	ldr	r3, [pc, #716]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4013      	ands	r3, r2
 800554c:	d1f0      	bne.n	8005530 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2208      	movs	r2, #8
 8005554:	4013      	ands	r3, r2
 8005556:	d036      	beq.n	80055c6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d019      	beq.n	8005594 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005560:	4bab      	ldr	r3, [pc, #684]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005564:	4baa      	ldr	r3, [pc, #680]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005566:	2101      	movs	r1, #1
 8005568:	430a      	orrs	r2, r1
 800556a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800556c:	f7fe fd4a 	bl	8004004 <HAL_GetTick>
 8005570:	0003      	movs	r3, r0
 8005572:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005576:	f7fe fd45 	bl	8004004 <HAL_GetTick>
 800557a:	0002      	movs	r2, r0
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b02      	cmp	r3, #2
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e1c8      	b.n	800591a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005588:	4ba1      	ldr	r3, [pc, #644]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800558a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558c:	2202      	movs	r2, #2
 800558e:	4013      	ands	r3, r2
 8005590:	d0f1      	beq.n	8005576 <HAL_RCC_OscConfig+0x3ee>
 8005592:	e018      	b.n	80055c6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005594:	4b9e      	ldr	r3, [pc, #632]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005596:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005598:	4b9d      	ldr	r3, [pc, #628]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800559a:	2101      	movs	r1, #1
 800559c:	438a      	bics	r2, r1
 800559e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a0:	f7fe fd30 	bl	8004004 <HAL_GetTick>
 80055a4:	0003      	movs	r3, r0
 80055a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055aa:	f7fe fd2b 	bl	8004004 <HAL_GetTick>
 80055ae:	0002      	movs	r2, r0
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e1ae      	b.n	800591a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80055bc:	4b94      	ldr	r3, [pc, #592]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80055be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c0:	2202      	movs	r2, #2
 80055c2:	4013      	ands	r3, r2
 80055c4:	d1f1      	bne.n	80055aa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2204      	movs	r2, #4
 80055cc:	4013      	ands	r3, r2
 80055ce:	d100      	bne.n	80055d2 <HAL_RCC_OscConfig+0x44a>
 80055d0:	e0ae      	b.n	8005730 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055d2:	2023      	movs	r0, #35	; 0x23
 80055d4:	183b      	adds	r3, r7, r0
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055da:	4b8d      	ldr	r3, [pc, #564]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80055dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	055b      	lsls	r3, r3, #21
 80055e2:	4013      	ands	r3, r2
 80055e4:	d109      	bne.n	80055fa <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055e6:	4b8a      	ldr	r3, [pc, #552]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80055e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ea:	4b89      	ldr	r3, [pc, #548]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	0549      	lsls	r1, r1, #21
 80055f0:	430a      	orrs	r2, r1
 80055f2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80055f4:	183b      	adds	r3, r7, r0
 80055f6:	2201      	movs	r2, #1
 80055f8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055fa:	4b88      	ldr	r3, [pc, #544]	; (800581c <HAL_RCC_OscConfig+0x694>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	2380      	movs	r3, #128	; 0x80
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	4013      	ands	r3, r2
 8005604:	d11a      	bne.n	800563c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005606:	4b85      	ldr	r3, [pc, #532]	; (800581c <HAL_RCC_OscConfig+0x694>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	4b84      	ldr	r3, [pc, #528]	; (800581c <HAL_RCC_OscConfig+0x694>)
 800560c:	2180      	movs	r1, #128	; 0x80
 800560e:	0049      	lsls	r1, r1, #1
 8005610:	430a      	orrs	r2, r1
 8005612:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005614:	f7fe fcf6 	bl	8004004 <HAL_GetTick>
 8005618:	0003      	movs	r3, r0
 800561a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800561c:	e008      	b.n	8005630 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800561e:	f7fe fcf1 	bl	8004004 <HAL_GetTick>
 8005622:	0002      	movs	r2, r0
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b64      	cmp	r3, #100	; 0x64
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e174      	b.n	800591a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005630:	4b7a      	ldr	r3, [pc, #488]	; (800581c <HAL_RCC_OscConfig+0x694>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	2380      	movs	r3, #128	; 0x80
 8005636:	005b      	lsls	r3, r3, #1
 8005638:	4013      	ands	r3, r2
 800563a:	d0f0      	beq.n	800561e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689a      	ldr	r2, [r3, #8]
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	429a      	cmp	r2, r3
 8005646:	d107      	bne.n	8005658 <HAL_RCC_OscConfig+0x4d0>
 8005648:	4b71      	ldr	r3, [pc, #452]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800564a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800564c:	4b70      	ldr	r3, [pc, #448]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800564e:	2180      	movs	r1, #128	; 0x80
 8005650:	0049      	lsls	r1, r1, #1
 8005652:	430a      	orrs	r2, r1
 8005654:	651a      	str	r2, [r3, #80]	; 0x50
 8005656:	e031      	b.n	80056bc <HAL_RCC_OscConfig+0x534>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10c      	bne.n	800567a <HAL_RCC_OscConfig+0x4f2>
 8005660:	4b6b      	ldr	r3, [pc, #428]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005662:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005664:	4b6a      	ldr	r3, [pc, #424]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005666:	496c      	ldr	r1, [pc, #432]	; (8005818 <HAL_RCC_OscConfig+0x690>)
 8005668:	400a      	ands	r2, r1
 800566a:	651a      	str	r2, [r3, #80]	; 0x50
 800566c:	4b68      	ldr	r3, [pc, #416]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800566e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005670:	4b67      	ldr	r3, [pc, #412]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005672:	496b      	ldr	r1, [pc, #428]	; (8005820 <HAL_RCC_OscConfig+0x698>)
 8005674:	400a      	ands	r2, r1
 8005676:	651a      	str	r2, [r3, #80]	; 0x50
 8005678:	e020      	b.n	80056bc <HAL_RCC_OscConfig+0x534>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	23a0      	movs	r3, #160	; 0xa0
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	429a      	cmp	r2, r3
 8005684:	d10e      	bne.n	80056a4 <HAL_RCC_OscConfig+0x51c>
 8005686:	4b62      	ldr	r3, [pc, #392]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005688:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800568a:	4b61      	ldr	r3, [pc, #388]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	00c9      	lsls	r1, r1, #3
 8005690:	430a      	orrs	r2, r1
 8005692:	651a      	str	r2, [r3, #80]	; 0x50
 8005694:	4b5e      	ldr	r3, [pc, #376]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005696:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005698:	4b5d      	ldr	r3, [pc, #372]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800569a:	2180      	movs	r1, #128	; 0x80
 800569c:	0049      	lsls	r1, r1, #1
 800569e:	430a      	orrs	r2, r1
 80056a0:	651a      	str	r2, [r3, #80]	; 0x50
 80056a2:	e00b      	b.n	80056bc <HAL_RCC_OscConfig+0x534>
 80056a4:	4b5a      	ldr	r3, [pc, #360]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80056a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056a8:	4b59      	ldr	r3, [pc, #356]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80056aa:	495b      	ldr	r1, [pc, #364]	; (8005818 <HAL_RCC_OscConfig+0x690>)
 80056ac:	400a      	ands	r2, r1
 80056ae:	651a      	str	r2, [r3, #80]	; 0x50
 80056b0:	4b57      	ldr	r3, [pc, #348]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80056b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056b4:	4b56      	ldr	r3, [pc, #344]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80056b6:	495a      	ldr	r1, [pc, #360]	; (8005820 <HAL_RCC_OscConfig+0x698>)
 80056b8:	400a      	ands	r2, r1
 80056ba:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d015      	beq.n	80056f0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c4:	f7fe fc9e 	bl	8004004 <HAL_GetTick>
 80056c8:	0003      	movs	r3, r0
 80056ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056cc:	e009      	b.n	80056e2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ce:	f7fe fc99 	bl	8004004 <HAL_GetTick>
 80056d2:	0002      	movs	r2, r0
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	4a52      	ldr	r2, [pc, #328]	; (8005824 <HAL_RCC_OscConfig+0x69c>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e11b      	b.n	800591a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056e2:	4b4b      	ldr	r3, [pc, #300]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80056e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80056e6:	2380      	movs	r3, #128	; 0x80
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4013      	ands	r3, r2
 80056ec:	d0ef      	beq.n	80056ce <HAL_RCC_OscConfig+0x546>
 80056ee:	e014      	b.n	800571a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056f0:	f7fe fc88 	bl	8004004 <HAL_GetTick>
 80056f4:	0003      	movs	r3, r0
 80056f6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056f8:	e009      	b.n	800570e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056fa:	f7fe fc83 	bl	8004004 <HAL_GetTick>
 80056fe:	0002      	movs	r2, r0
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	4a47      	ldr	r2, [pc, #284]	; (8005824 <HAL_RCC_OscConfig+0x69c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d901      	bls.n	800570e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800570a:	2303      	movs	r3, #3
 800570c:	e105      	b.n	800591a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800570e:	4b40      	ldr	r3, [pc, #256]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005712:	2380      	movs	r3, #128	; 0x80
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4013      	ands	r3, r2
 8005718:	d1ef      	bne.n	80056fa <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800571a:	2323      	movs	r3, #35	; 0x23
 800571c:	18fb      	adds	r3, r7, r3
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d105      	bne.n	8005730 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005724:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005726:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005728:	4b39      	ldr	r3, [pc, #228]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 800572a:	493f      	ldr	r1, [pc, #252]	; (8005828 <HAL_RCC_OscConfig+0x6a0>)
 800572c:	400a      	ands	r2, r1
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2220      	movs	r2, #32
 8005736:	4013      	ands	r3, r2
 8005738:	d049      	beq.n	80057ce <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d026      	beq.n	8005790 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005742:	4b33      	ldr	r3, [pc, #204]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005744:	689a      	ldr	r2, [r3, #8]
 8005746:	4b32      	ldr	r3, [pc, #200]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005748:	2101      	movs	r1, #1
 800574a:	430a      	orrs	r2, r1
 800574c:	609a      	str	r2, [r3, #8]
 800574e:	4b30      	ldr	r3, [pc, #192]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005752:	4b2f      	ldr	r3, [pc, #188]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005754:	2101      	movs	r1, #1
 8005756:	430a      	orrs	r2, r1
 8005758:	635a      	str	r2, [r3, #52]	; 0x34
 800575a:	4b34      	ldr	r3, [pc, #208]	; (800582c <HAL_RCC_OscConfig+0x6a4>)
 800575c:	6a1a      	ldr	r2, [r3, #32]
 800575e:	4b33      	ldr	r3, [pc, #204]	; (800582c <HAL_RCC_OscConfig+0x6a4>)
 8005760:	2180      	movs	r1, #128	; 0x80
 8005762:	0189      	lsls	r1, r1, #6
 8005764:	430a      	orrs	r2, r1
 8005766:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005768:	f7fe fc4c 	bl	8004004 <HAL_GetTick>
 800576c:	0003      	movs	r3, r0
 800576e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005770:	e008      	b.n	8005784 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005772:	f7fe fc47 	bl	8004004 <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	2b02      	cmp	r3, #2
 800577e:	d901      	bls.n	8005784 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005780:	2303      	movs	r3, #3
 8005782:	e0ca      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005784:	4b22      	ldr	r3, [pc, #136]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2202      	movs	r2, #2
 800578a:	4013      	ands	r3, r2
 800578c:	d0f1      	beq.n	8005772 <HAL_RCC_OscConfig+0x5ea>
 800578e:	e01e      	b.n	80057ce <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005790:	4b1f      	ldr	r3, [pc, #124]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	4b1e      	ldr	r3, [pc, #120]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 8005796:	2101      	movs	r1, #1
 8005798:	438a      	bics	r2, r1
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	4b23      	ldr	r3, [pc, #140]	; (800582c <HAL_RCC_OscConfig+0x6a4>)
 800579e:	6a1a      	ldr	r2, [r3, #32]
 80057a0:	4b22      	ldr	r3, [pc, #136]	; (800582c <HAL_RCC_OscConfig+0x6a4>)
 80057a2:	4923      	ldr	r1, [pc, #140]	; (8005830 <HAL_RCC_OscConfig+0x6a8>)
 80057a4:	400a      	ands	r2, r1
 80057a6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fe fc2c 	bl	8004004 <HAL_GetTick>
 80057ac:	0003      	movs	r3, r0
 80057ae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b2:	f7fe fc27 	bl	8004004 <HAL_GetTick>
 80057b6:	0002      	movs	r2, r0
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e0aa      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80057c4:	4b12      	ldr	r3, [pc, #72]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	2202      	movs	r2, #2
 80057ca:	4013      	ands	r3, r2
 80057cc:	d1f1      	bne.n	80057b2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d100      	bne.n	80057d8 <HAL_RCC_OscConfig+0x650>
 80057d6:	e09f      	b.n	8005918 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d100      	bne.n	80057e0 <HAL_RCC_OscConfig+0x658>
 80057de:	e078      	b.n	80058d2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d159      	bne.n	800589c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b08      	ldr	r3, [pc, #32]	; (8005810 <HAL_RCC_OscConfig+0x688>)
 80057ee:	4911      	ldr	r1, [pc, #68]	; (8005834 <HAL_RCC_OscConfig+0x6ac>)
 80057f0:	400a      	ands	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fe fc06 	bl	8004004 <HAL_GetTick>
 80057f8:	0003      	movs	r3, r0
 80057fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80057fc:	e01c      	b.n	8005838 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fe:	f7fe fc01 	bl	8004004 <HAL_GetTick>
 8005802:	0002      	movs	r2, r0
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d915      	bls.n	8005838 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e084      	b.n	800591a <HAL_RCC_OscConfig+0x792>
 8005810:	40021000 	.word	0x40021000
 8005814:	ffff1fff 	.word	0xffff1fff
 8005818:	fffffeff 	.word	0xfffffeff
 800581c:	40007000 	.word	0x40007000
 8005820:	fffffbff 	.word	0xfffffbff
 8005824:	00001388 	.word	0x00001388
 8005828:	efffffff 	.word	0xefffffff
 800582c:	40010000 	.word	0x40010000
 8005830:	ffffdfff 	.word	0xffffdfff
 8005834:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005838:	4b3a      	ldr	r3, [pc, #232]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	049b      	lsls	r3, r3, #18
 8005840:	4013      	ands	r3, r2
 8005842:	d1dc      	bne.n	80057fe <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005844:	4b37      	ldr	r3, [pc, #220]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4a37      	ldr	r2, [pc, #220]	; (8005928 <HAL_RCC_OscConfig+0x7a0>)
 800584a:	4013      	ands	r3, r2
 800584c:	0019      	movs	r1, r3
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005856:	431a      	orrs	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	431a      	orrs	r2, r3
 800585e:	4b31      	ldr	r3, [pc, #196]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 8005860:	430a      	orrs	r2, r1
 8005862:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005864:	4b2f      	ldr	r3, [pc, #188]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b2e      	ldr	r3, [pc, #184]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 800586a:	2180      	movs	r1, #128	; 0x80
 800586c:	0449      	lsls	r1, r1, #17
 800586e:	430a      	orrs	r2, r1
 8005870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005872:	f7fe fbc7 	bl	8004004 <HAL_GetTick>
 8005876:	0003      	movs	r3, r0
 8005878:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800587c:	f7fe fbc2 	bl	8004004 <HAL_GetTick>
 8005880:	0002      	movs	r2, r0
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e045      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	2380      	movs	r3, #128	; 0x80
 8005894:	049b      	lsls	r3, r3, #18
 8005896:	4013      	ands	r3, r2
 8005898:	d0f0      	beq.n	800587c <HAL_RCC_OscConfig+0x6f4>
 800589a:	e03d      	b.n	8005918 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589c:	4b21      	ldr	r3, [pc, #132]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	4b20      	ldr	r3, [pc, #128]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 80058a2:	4922      	ldr	r1, [pc, #136]	; (800592c <HAL_RCC_OscConfig+0x7a4>)
 80058a4:	400a      	ands	r2, r1
 80058a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a8:	f7fe fbac 	bl	8004004 <HAL_GetTick>
 80058ac:	0003      	movs	r3, r0
 80058ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058b0:	e008      	b.n	80058c4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058b2:	f7fe fba7 	bl	8004004 <HAL_GetTick>
 80058b6:	0002      	movs	r2, r0
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d901      	bls.n	80058c4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e02a      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80058c4:	4b17      	ldr	r3, [pc, #92]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	2380      	movs	r3, #128	; 0x80
 80058ca:	049b      	lsls	r3, r3, #18
 80058cc:	4013      	ands	r3, r2
 80058ce:	d1f0      	bne.n	80058b2 <HAL_RCC_OscConfig+0x72a>
 80058d0:	e022      	b.n	8005918 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e01d      	b.n	800591a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80058de:	4b11      	ldr	r3, [pc, #68]	; (8005924 <HAL_RCC_OscConfig+0x79c>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	2380      	movs	r3, #128	; 0x80
 80058e8:	025b      	lsls	r3, r3, #9
 80058ea:	401a      	ands	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d10f      	bne.n	8005914 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	23f0      	movs	r3, #240	; 0xf0
 80058f8:	039b      	lsls	r3, r3, #14
 80058fa:	401a      	ands	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005900:	429a      	cmp	r2, r3
 8005902:	d107      	bne.n	8005914 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005904:	69ba      	ldr	r2, [r7, #24]
 8005906:	23c0      	movs	r3, #192	; 0xc0
 8005908:	041b      	lsls	r3, r3, #16
 800590a:	401a      	ands	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005910:	429a      	cmp	r2, r3
 8005912:	d001      	beq.n	8005918 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	0018      	movs	r0, r3
 800591c:	46bd      	mov	sp, r7
 800591e:	b00a      	add	sp, #40	; 0x28
 8005920:	bdb0      	pop	{r4, r5, r7, pc}
 8005922:	46c0      	nop			; (mov r8, r8)
 8005924:	40021000 	.word	0x40021000
 8005928:	ff02ffff 	.word	0xff02ffff
 800592c:	feffffff 	.word	0xfeffffff

08005930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005930:	b5b0      	push	{r4, r5, r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e128      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005944:	4b96      	ldr	r3, [pc, #600]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2201      	movs	r2, #1
 800594a:	4013      	ands	r3, r2
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	429a      	cmp	r2, r3
 8005950:	d91e      	bls.n	8005990 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005952:	4b93      	ldr	r3, [pc, #588]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2201      	movs	r2, #1
 8005958:	4393      	bics	r3, r2
 800595a:	0019      	movs	r1, r3
 800595c:	4b90      	ldr	r3, [pc, #576]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	430a      	orrs	r2, r1
 8005962:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005964:	f7fe fb4e 	bl	8004004 <HAL_GetTick>
 8005968:	0003      	movs	r3, r0
 800596a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800596c:	e009      	b.n	8005982 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800596e:	f7fe fb49 	bl	8004004 <HAL_GetTick>
 8005972:	0002      	movs	r2, r0
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	4a8a      	ldr	r2, [pc, #552]	; (8005ba4 <HAL_RCC_ClockConfig+0x274>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e109      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005982:	4b87      	ldr	r3, [pc, #540]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2201      	movs	r2, #1
 8005988:	4013      	ands	r3, r2
 800598a:	683a      	ldr	r2, [r7, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d1ee      	bne.n	800596e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2202      	movs	r2, #2
 8005996:	4013      	ands	r3, r2
 8005998:	d009      	beq.n	80059ae <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800599a:	4b83      	ldr	r3, [pc, #524]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	22f0      	movs	r2, #240	; 0xf0
 80059a0:	4393      	bics	r3, r2
 80059a2:	0019      	movs	r1, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689a      	ldr	r2, [r3, #8]
 80059a8:	4b7f      	ldr	r3, [pc, #508]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 80059aa:	430a      	orrs	r2, r1
 80059ac:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2201      	movs	r2, #1
 80059b4:	4013      	ands	r3, r2
 80059b6:	d100      	bne.n	80059ba <HAL_RCC_ClockConfig+0x8a>
 80059b8:	e089      	b.n	8005ace <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d107      	bne.n	80059d2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059c2:	4b79      	ldr	r3, [pc, #484]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	2380      	movs	r3, #128	; 0x80
 80059c8:	029b      	lsls	r3, r3, #10
 80059ca:	4013      	ands	r3, r2
 80059cc:	d120      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0e1      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d107      	bne.n	80059ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80059da:	4b73      	ldr	r3, [pc, #460]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	2380      	movs	r3, #128	; 0x80
 80059e0:	049b      	lsls	r3, r3, #18
 80059e2:	4013      	ands	r3, r2
 80059e4:	d114      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e0d5      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d106      	bne.n	8005a00 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80059f2:	4b6d      	ldr	r3, [pc, #436]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2204      	movs	r2, #4
 80059f8:	4013      	ands	r3, r2
 80059fa:	d109      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e0ca      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005a00:	4b69      	ldr	r3, [pc, #420]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	2380      	movs	r3, #128	; 0x80
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4013      	ands	r3, r2
 8005a0a:	d101      	bne.n	8005a10 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0c2      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a10:	4b65      	ldr	r3, [pc, #404]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2203      	movs	r2, #3
 8005a16:	4393      	bics	r3, r2
 8005a18:	0019      	movs	r1, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	4b62      	ldr	r3, [pc, #392]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005a20:	430a      	orrs	r2, r1
 8005a22:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a24:	f7fe faee 	bl	8004004 <HAL_GetTick>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d111      	bne.n	8005a58 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a34:	e009      	b.n	8005a4a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a36:	f7fe fae5 	bl	8004004 <HAL_GetTick>
 8005a3a:	0002      	movs	r2, r0
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1ad3      	subs	r3, r2, r3
 8005a40:	4a58      	ldr	r2, [pc, #352]	; (8005ba4 <HAL_RCC_ClockConfig+0x274>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e0a5      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a4a:	4b57      	ldr	r3, [pc, #348]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	220c      	movs	r2, #12
 8005a50:	4013      	ands	r3, r2
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d1ef      	bne.n	8005a36 <HAL_RCC_ClockConfig+0x106>
 8005a56:	e03a      	b.n	8005ace <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	d111      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a60:	e009      	b.n	8005a76 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a62:	f7fe facf 	bl	8004004 <HAL_GetTick>
 8005a66:	0002      	movs	r2, r0
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	4a4d      	ldr	r2, [pc, #308]	; (8005ba4 <HAL_RCC_ClockConfig+0x274>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e08f      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a76:	4b4c      	ldr	r3, [pc, #304]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	220c      	movs	r2, #12
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	2b0c      	cmp	r3, #12
 8005a80:	d1ef      	bne.n	8005a62 <HAL_RCC_ClockConfig+0x132>
 8005a82:	e024      	b.n	8005ace <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a8c:	e009      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8e:	f7fe fab9 	bl	8004004 <HAL_GetTick>
 8005a92:	0002      	movs	r2, r0
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	4a42      	ldr	r2, [pc, #264]	; (8005ba4 <HAL_RCC_ClockConfig+0x274>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e079      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aa2:	4b41      	ldr	r3, [pc, #260]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	220c      	movs	r2, #12
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d1ef      	bne.n	8005a8e <HAL_RCC_ClockConfig+0x15e>
 8005aae:	e00e      	b.n	8005ace <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab0:	f7fe faa8 	bl	8004004 <HAL_GetTick>
 8005ab4:	0002      	movs	r2, r0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	4a3a      	ldr	r2, [pc, #232]	; (8005ba4 <HAL_RCC_ClockConfig+0x274>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d901      	bls.n	8005ac4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e068      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005ac4:	4b38      	ldr	r3, [pc, #224]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	220c      	movs	r2, #12
 8005aca:	4013      	ands	r3, r2
 8005acc:	d1f0      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ace:	4b34      	ldr	r3, [pc, #208]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d21e      	bcs.n	8005b1a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005adc:	4b30      	ldr	r3, [pc, #192]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	4393      	bics	r3, r2
 8005ae4:	0019      	movs	r1, r3
 8005ae6:	4b2e      	ldr	r3, [pc, #184]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005aee:	f7fe fa89 	bl	8004004 <HAL_GetTick>
 8005af2:	0003      	movs	r3, r0
 8005af4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af6:	e009      	b.n	8005b0c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005af8:	f7fe fa84 	bl	8004004 <HAL_GetTick>
 8005afc:	0002      	movs	r2, r0
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	4a28      	ldr	r2, [pc, #160]	; (8005ba4 <HAL_RCC_ClockConfig+0x274>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e044      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0c:	4b24      	ldr	r3, [pc, #144]	; (8005ba0 <HAL_RCC_ClockConfig+0x270>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2201      	movs	r2, #1
 8005b12:	4013      	ands	r3, r2
 8005b14:	683a      	ldr	r2, [r7, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d1ee      	bne.n	8005af8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	4013      	ands	r3, r2
 8005b22:	d009      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b24:	4b20      	ldr	r3, [pc, #128]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	4a20      	ldr	r2, [pc, #128]	; (8005bac <HAL_RCC_ClockConfig+0x27c>)
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	0019      	movs	r1, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005b34:	430a      	orrs	r2, r1
 8005b36:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d00a      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005b42:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	4a1a      	ldr	r2, [pc, #104]	; (8005bb0 <HAL_RCC_ClockConfig+0x280>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	0019      	movs	r1, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	00da      	lsls	r2, r3, #3
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005b54:	430a      	orrs	r2, r1
 8005b56:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b58:	f000 f832 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8005b5c:	0001      	movs	r1, r0
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <HAL_RCC_ClockConfig+0x278>)
 8005b60:	68db      	ldr	r3, [r3, #12]
 8005b62:	091b      	lsrs	r3, r3, #4
 8005b64:	220f      	movs	r2, #15
 8005b66:	4013      	ands	r3, r2
 8005b68:	4a12      	ldr	r2, [pc, #72]	; (8005bb4 <HAL_RCC_ClockConfig+0x284>)
 8005b6a:	5cd3      	ldrb	r3, [r2, r3]
 8005b6c:	000a      	movs	r2, r1
 8005b6e:	40da      	lsrs	r2, r3
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <HAL_RCC_ClockConfig+0x288>)
 8005b72:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005b74:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <HAL_RCC_ClockConfig+0x28c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	250b      	movs	r5, #11
 8005b7a:	197c      	adds	r4, r7, r5
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f7fe f9fb 	bl	8003f78 <HAL_InitTick>
 8005b82:	0003      	movs	r3, r0
 8005b84:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005b86:	197b      	adds	r3, r7, r5
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005b8e:	197b      	adds	r3, r7, r5
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	0018      	movs	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	b004      	add	sp, #16
 8005b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005b9e:	46c0      	nop			; (mov r8, r8)
 8005ba0:	40022000 	.word	0x40022000
 8005ba4:	00001388 	.word	0x00001388
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	fffff8ff 	.word	0xfffff8ff
 8005bb0:	ffffc7ff 	.word	0xffffc7ff
 8005bb4:	0800b13c 	.word	0x0800b13c
 8005bb8:	20000004 	.word	0x20000004
 8005bbc:	20000008 	.word	0x20000008

08005bc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc0:	b5b0      	push	{r4, r5, r7, lr}
 8005bc2:	b08e      	sub	sp, #56	; 0x38
 8005bc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8005bc6:	4b4c      	ldr	r3, [pc, #304]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bce:	230c      	movs	r3, #12
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b0c      	cmp	r3, #12
 8005bd4:	d014      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0x40>
 8005bd6:	d900      	bls.n	8005bda <HAL_RCC_GetSysClockFreq+0x1a>
 8005bd8:	e07b      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x112>
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d002      	beq.n	8005be4 <HAL_RCC_GetSysClockFreq+0x24>
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d00b      	beq.n	8005bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8005be2:	e076      	b.n	8005cd2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005be4:	4b44      	ldr	r3, [pc, #272]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2210      	movs	r2, #16
 8005bea:	4013      	ands	r3, r2
 8005bec:	d002      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8005bee:	4b43      	ldr	r3, [pc, #268]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005bf0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005bf2:	e07c      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005bf4:	4b42      	ldr	r3, [pc, #264]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x140>)
 8005bf6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005bf8:	e079      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005bfa:	4b42      	ldr	r3, [pc, #264]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x144>)
 8005bfc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005bfe:	e076      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	0c9a      	lsrs	r2, r3, #18
 8005c04:	230f      	movs	r3, #15
 8005c06:	401a      	ands	r2, r3
 8005c08:	4b3f      	ldr	r3, [pc, #252]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x148>)
 8005c0a:	5c9b      	ldrb	r3, [r3, r2]
 8005c0c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c10:	0d9a      	lsrs	r2, r3, #22
 8005c12:	2303      	movs	r3, #3
 8005c14:	4013      	ands	r3, r2
 8005c16:	3301      	adds	r3, #1
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c1a:	4b37      	ldr	r3, [pc, #220]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c1c:	68da      	ldr	r2, [r3, #12]
 8005c1e:	2380      	movs	r3, #128	; 0x80
 8005c20:	025b      	lsls	r3, r3, #9
 8005c22:	4013      	ands	r3, r2
 8005c24:	d01a      	beq.n	8005c5c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
 8005c2e:	4a35      	ldr	r2, [pc, #212]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x144>)
 8005c30:	2300      	movs	r3, #0
 8005c32:	69b8      	ldr	r0, [r7, #24]
 8005c34:	69f9      	ldr	r1, [r7, #28]
 8005c36:	f7fa fc57 	bl	80004e8 <__aeabi_lmul>
 8005c3a:	0002      	movs	r2, r0
 8005c3c:	000b      	movs	r3, r1
 8005c3e:	0010      	movs	r0, r2
 8005c40:	0019      	movs	r1, r3
 8005c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f7fa fc2b 	bl	80004a8 <__aeabi_uldivmod>
 8005c52:	0002      	movs	r2, r0
 8005c54:	000b      	movs	r3, r1
 8005c56:	0013      	movs	r3, r2
 8005c58:	637b      	str	r3, [r7, #52]	; 0x34
 8005c5a:	e037      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005c5c:	4b26      	ldr	r3, [pc, #152]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2210      	movs	r2, #16
 8005c62:	4013      	ands	r3, r2
 8005c64:	d01a      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <HAL_RCC_GetSysClockFreq+0x13c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	68b8      	ldr	r0, [r7, #8]
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	f7fa fc37 	bl	80004e8 <__aeabi_lmul>
 8005c7a:	0002      	movs	r2, r0
 8005c7c:	000b      	movs	r3, r1
 8005c7e:	0010      	movs	r0, r2
 8005c80:	0019      	movs	r1, r3
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	2300      	movs	r3, #0
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f7fa fc0b 	bl	80004a8 <__aeabi_uldivmod>
 8005c92:	0002      	movs	r2, r0
 8005c94:	000b      	movs	r3, r1
 8005c96:	0013      	movs	r3, r2
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
 8005c9a:	e017      	b.n	8005ccc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	0019      	movs	r1, r3
 8005ca4:	4a16      	ldr	r2, [pc, #88]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x140>)
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f7fa fc1e 	bl	80004e8 <__aeabi_lmul>
 8005cac:	0002      	movs	r2, r0
 8005cae:	000b      	movs	r3, r1
 8005cb0:	0010      	movs	r0, r2
 8005cb2:	0019      	movs	r1, r3
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb6:	001c      	movs	r4, r3
 8005cb8:	2300      	movs	r3, #0
 8005cba:	001d      	movs	r5, r3
 8005cbc:	0022      	movs	r2, r4
 8005cbe:	002b      	movs	r3, r5
 8005cc0:	f7fa fbf2 	bl	80004a8 <__aeabi_uldivmod>
 8005cc4:	0002      	movs	r2, r0
 8005cc6:	000b      	movs	r3, r1
 8005cc8:	0013      	movs	r3, r2
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cd0:	e00d      	b.n	8005cee <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x138>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	0b5b      	lsrs	r3, r3, #13
 8005cd8:	2207      	movs	r2, #7
 8005cda:	4013      	ands	r3, r2
 8005cdc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	2280      	movs	r2, #128	; 0x80
 8005ce4:	0212      	lsls	r2, r2, #8
 8005ce6:	409a      	lsls	r2, r3
 8005ce8:	0013      	movs	r3, r2
 8005cea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005cec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b00e      	add	sp, #56	; 0x38
 8005cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	003d0900 	.word	0x003d0900
 8005d00:	00f42400 	.word	0x00f42400
 8005d04:	007a1200 	.word	0x007a1200
 8005d08:	0800b154 	.word	0x0800b154

08005d0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d10:	4b02      	ldr	r3, [pc, #8]	; (8005d1c <HAL_RCC_GetHCLKFreq+0x10>)
 8005d12:	681b      	ldr	r3, [r3, #0]
}
 8005d14:	0018      	movs	r0, r3
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	20000004 	.word	0x20000004

08005d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d24:	f7ff fff2 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d28:	0001      	movs	r1, r0
 8005d2a:	4b06      	ldr	r3, [pc, #24]	; (8005d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	0a1b      	lsrs	r3, r3, #8
 8005d30:	2207      	movs	r2, #7
 8005d32:	4013      	ands	r3, r2
 8005d34:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d36:	5cd3      	ldrb	r3, [r2, r3]
 8005d38:	40d9      	lsrs	r1, r3
 8005d3a:	000b      	movs	r3, r1
}
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	40021000 	.word	0x40021000
 8005d48:	0800b14c 	.word	0x0800b14c

08005d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d50:	f7ff ffdc 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d54:	0001      	movs	r1, r0
 8005d56:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	0adb      	lsrs	r3, r3, #11
 8005d5c:	2207      	movs	r2, #7
 8005d5e:	4013      	ands	r3, r2
 8005d60:	4a04      	ldr	r2, [pc, #16]	; (8005d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d62:	5cd3      	ldrb	r3, [r2, r3]
 8005d64:	40d9      	lsrs	r1, r3
 8005d66:	000b      	movs	r3, r1
}
 8005d68:	0018      	movs	r0, r3
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	46c0      	nop			; (mov r8, r8)
 8005d70:	40021000 	.word	0x40021000
 8005d74:	0800b14c 	.word	0x0800b14c

08005d78 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005d80:	2317      	movs	r3, #23
 8005d82:	18fb      	adds	r3, r7, r3
 8005d84:	2200      	movs	r2, #0
 8005d86:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2220      	movs	r2, #32
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d106      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	2380      	movs	r3, #128	; 0x80
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	d100      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005d9e:	e0d9      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005da0:	4ba4      	ldr	r3, [pc, #656]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005da2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	055b      	lsls	r3, r3, #21
 8005da8:	4013      	ands	r3, r2
 8005daa:	d10a      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dac:	4ba1      	ldr	r3, [pc, #644]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db0:	4ba0      	ldr	r3, [pc, #640]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	0549      	lsls	r1, r1, #21
 8005db6:	430a      	orrs	r2, r1
 8005db8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005dba:	2317      	movs	r3, #23
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dc2:	4b9d      	ldr	r3, [pc, #628]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	2380      	movs	r3, #128	; 0x80
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d11a      	bne.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dce:	4b9a      	ldr	r3, [pc, #616]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b99      	ldr	r3, [pc, #612]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005dd4:	2180      	movs	r1, #128	; 0x80
 8005dd6:	0049      	lsls	r1, r1, #1
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ddc:	f7fe f912 	bl	8004004 <HAL_GetTick>
 8005de0:	0003      	movs	r3, r0
 8005de2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de4:	e008      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de6:	f7fe f90d 	bl	8004004 <HAL_GetTick>
 8005dea:	0002      	movs	r2, r0
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	2b64      	cmp	r3, #100	; 0x64
 8005df2:	d901      	bls.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e118      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005df8:	4b8f      	ldr	r3, [pc, #572]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	2380      	movs	r3, #128	; 0x80
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	4013      	ands	r3, r2
 8005e02:	d0f0      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005e04:	4b8b      	ldr	r3, [pc, #556]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	23c0      	movs	r3, #192	; 0xc0
 8005e0a:	039b      	lsls	r3, r3, #14
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	23c0      	movs	r3, #192	; 0xc0
 8005e16:	039b      	lsls	r3, r3, #14
 8005e18:	4013      	ands	r3, r2
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d107      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	23c0      	movs	r3, #192	; 0xc0
 8005e26:	039b      	lsls	r3, r3, #14
 8005e28:	4013      	ands	r3, r2
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d013      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	23c0      	movs	r3, #192	; 0xc0
 8005e36:	029b      	lsls	r3, r3, #10
 8005e38:	401a      	ands	r2, r3
 8005e3a:	23c0      	movs	r3, #192	; 0xc0
 8005e3c:	029b      	lsls	r3, r3, #10
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d10a      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005e42:	4b7c      	ldr	r3, [pc, #496]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	2380      	movs	r3, #128	; 0x80
 8005e48:	029b      	lsls	r3, r3, #10
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	2380      	movs	r3, #128	; 0x80
 8005e4e:	029b      	lsls	r3, r3, #10
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d101      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e0e8      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005e58:	4b76      	ldr	r3, [pc, #472]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005e5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e5c:	23c0      	movs	r3, #192	; 0xc0
 8005e5e:	029b      	lsls	r3, r3, #10
 8005e60:	4013      	ands	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d049      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	23c0      	movs	r3, #192	; 0xc0
 8005e70:	029b      	lsls	r3, r3, #10
 8005e72:	4013      	ands	r3, r2
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d004      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	4013      	ands	r3, r2
 8005e82:	d10d      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	23c0      	movs	r3, #192	; 0xc0
 8005e8a:	029b      	lsls	r3, r3, #10
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d034      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d02e      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005ea0:	4b64      	ldr	r3, [pc, #400]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ea4:	4a65      	ldr	r2, [pc, #404]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005eaa:	4b62      	ldr	r3, [pc, #392]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005eae:	4b61      	ldr	r3, [pc, #388]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eb0:	2180      	movs	r1, #128	; 0x80
 8005eb2:	0309      	lsls	r1, r1, #12
 8005eb4:	430a      	orrs	r2, r1
 8005eb6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb8:	4b5e      	ldr	r3, [pc, #376]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005eba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ebc:	4b5d      	ldr	r3, [pc, #372]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ebe:	4960      	ldr	r1, [pc, #384]	; (8006040 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005ec0:	400a      	ands	r2, r1
 8005ec2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005ec4:	4b5b      	ldr	r3, [pc, #364]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	2380      	movs	r3, #128	; 0x80
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	d014      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fe f896 	bl	8004004 <HAL_GetTick>
 8005ed8:	0003      	movs	r3, r0
 8005eda:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005edc:	e009      	b.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ede:	f7fe f891 	bl	8004004 <HAL_GetTick>
 8005ee2:	0002      	movs	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	4a56      	ldr	r2, [pc, #344]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e09b      	b.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ef2:	4b50      	ldr	r3, [pc, #320]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4013      	ands	r3, r2
 8005efc:	d0ef      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	23c0      	movs	r3, #192	; 0xc0
 8005f04:	029b      	lsls	r3, r3, #10
 8005f06:	401a      	ands	r2, r3
 8005f08:	23c0      	movs	r3, #192	; 0xc0
 8005f0a:	029b      	lsls	r3, r3, #10
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d10c      	bne.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005f10:	4b48      	ldr	r3, [pc, #288]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a4c      	ldr	r2, [pc, #304]	; (8006048 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	0019      	movs	r1, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	23c0      	movs	r3, #192	; 0xc0
 8005f20:	039b      	lsls	r3, r3, #14
 8005f22:	401a      	ands	r2, r3
 8005f24:	4b43      	ldr	r3, [pc, #268]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f26:	430a      	orrs	r2, r1
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	4b42      	ldr	r3, [pc, #264]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	23c0      	movs	r3, #192	; 0xc0
 8005f34:	029b      	lsls	r3, r3, #10
 8005f36:	401a      	ands	r2, r3
 8005f38:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005f3e:	2317      	movs	r3, #23
 8005f40:	18fb      	adds	r3, r7, r3
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d105      	bne.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f48:	4b3a      	ldr	r3, [pc, #232]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4c:	4b39      	ldr	r3, [pc, #228]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f4e:	493f      	ldr	r1, [pc, #252]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f50:	400a      	ands	r2, r1
 8005f52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	d009      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f5e:	4b35      	ldr	r3, [pc, #212]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f62:	2203      	movs	r2, #3
 8005f64:	4393      	bics	r3, r2
 8005f66:	0019      	movs	r1, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	4b31      	ldr	r3, [pc, #196]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2202      	movs	r2, #2
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d009      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f7c:	4b2d      	ldr	r3, [pc, #180]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f80:	220c      	movs	r2, #12
 8005f82:	4393      	bics	r3, r2
 8005f84:	0019      	movs	r1, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	691a      	ldr	r2, [r3, #16]
 8005f8a:	4b2a      	ldr	r3, [pc, #168]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2204      	movs	r2, #4
 8005f96:	4013      	ands	r3, r2
 8005f98:	d009      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f9a:	4b26      	ldr	r3, [pc, #152]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9e:	4a2c      	ldr	r2, [pc, #176]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	0019      	movs	r1, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695a      	ldr	r2, [r3, #20]
 8005fa8:	4b22      	ldr	r3, [pc, #136]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005faa:	430a      	orrs	r2, r1
 8005fac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	d009      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fb8:	4b1e      	ldr	r3, [pc, #120]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fbc:	4a25      	ldr	r2, [pc, #148]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	0019      	movs	r1, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	2380      	movs	r3, #128	; 0x80
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fd8:	4b16      	ldr	r3, [pc, #88]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fdc:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fde:	4013      	ands	r3, r2
 8005fe0:	0019      	movs	r1, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69da      	ldr	r2, [r3, #28]
 8005fe6:	4b13      	ldr	r3, [pc, #76]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2240      	movs	r2, #64	; 0x40
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ff6:	4b0f      	ldr	r3, [pc, #60]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	0019      	movs	r1, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006004:	4b0b      	ldr	r3, [pc, #44]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006006:	430a      	orrs	r2, r1
 8006008:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2280      	movs	r2, #128	; 0x80
 8006010:	4013      	ands	r3, r2
 8006012:	d009      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006014:	4b07      	ldr	r3, [pc, #28]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006018:	4a10      	ldr	r2, [pc, #64]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800601a:	4013      	ands	r3, r2
 800601c:	0019      	movs	r1, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a1a      	ldr	r2, [r3, #32]
 8006022:	4b04      	ldr	r3, [pc, #16]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8006024:	430a      	orrs	r2, r1
 8006026:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	0018      	movs	r0, r3
 800602c:	46bd      	mov	sp, r7
 800602e:	b006      	add	sp, #24
 8006030:	bd80      	pop	{r7, pc}
 8006032:	46c0      	nop			; (mov r8, r8)
 8006034:	40021000 	.word	0x40021000
 8006038:	40007000 	.word	0x40007000
 800603c:	fffcffff 	.word	0xfffcffff
 8006040:	fff7ffff 	.word	0xfff7ffff
 8006044:	00001388 	.word	0x00001388
 8006048:	ffcfffff 	.word	0xffcfffff
 800604c:	efffffff 	.word	0xefffffff
 8006050:	fffff3ff 	.word	0xfffff3ff
 8006054:	ffffcfff 	.word	0xffffcfff
 8006058:	fbffffff 	.word	0xfbffffff
 800605c:	fff3ffff 	.word	0xfff3ffff

08006060 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e08e      	b.n	8006190 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2221      	movs	r2, #33	; 0x21
 8006076:	5c9b      	ldrb	r3, [r3, r2]
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d107      	bne.n	800608e <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2220      	movs	r2, #32
 8006082:	2100      	movs	r1, #0
 8006084:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0018      	movs	r0, r3
 800608a:	f7fd fb4b 	bl	8003724 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2221      	movs	r2, #33	; 0x21
 8006092:	2102      	movs	r1, #2
 8006094:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	22ca      	movs	r2, #202	; 0xca
 800609c:	625a      	str	r2, [r3, #36]	; 0x24
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2253      	movs	r2, #83	; 0x53
 80060a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	0018      	movs	r0, r3
 80060aa:	f000 fbaa 	bl	8006802 <RTC_EnterInitMode>
 80060ae:	1e03      	subs	r3, r0, #0
 80060b0:	d009      	beq.n	80060c6 <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	22ff      	movs	r2, #255	; 0xff
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2221      	movs	r2, #33	; 0x21
 80060be:	2104      	movs	r1, #4
 80060c0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e064      	b.n	8006190 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4931      	ldr	r1, [pc, #196]	; (8006198 <HAL_RTC_Init+0x138>)
 80060d2:	400a      	ands	r2, r1
 80060d4:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6899      	ldr	r1, [r3, #8]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	68d2      	ldr	r2, [r2, #12]
 80060fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	6919      	ldr	r1, [r3, #16]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	041a      	lsls	r2, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	430a      	orrs	r2, r1
 8006110:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2180      	movs	r1, #128	; 0x80
 800611e:	438a      	bics	r2, r1
 8006120:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2103      	movs	r1, #3
 800612e:	438a      	bics	r2, r1
 8006130:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	69da      	ldr	r2, [r3, #28]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	431a      	orrs	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	2220      	movs	r2, #32
 8006152:	4013      	ands	r3, r2
 8006154:	d113      	bne.n	800617e <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	0018      	movs	r0, r3
 800615a:	f000 fb2b 	bl	80067b4 <HAL_RTC_WaitForSynchro>
 800615e:	1e03      	subs	r3, r0, #0
 8006160:	d00d      	beq.n	800617e <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	22ff      	movs	r2, #255	; 0xff
 8006168:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2221      	movs	r2, #33	; 0x21
 800616e:	2104      	movs	r1, #4
 8006170:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	2100      	movs	r1, #0
 8006178:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e008      	b.n	8006190 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	22ff      	movs	r2, #255	; 0xff
 8006184:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2221      	movs	r2, #33	; 0x21
 800618a:	2101      	movs	r1, #1
 800618c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800618e:	2300      	movs	r3, #0
  }
}
 8006190:	0018      	movs	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	b002      	add	sp, #8
 8006196:	bd80      	pop	{r7, pc}
 8006198:	ff8fffbf 	.word	0xff8fffbf

0800619c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	5c9b      	ldrb	r3, [r3, r2]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_RTC_SetTime+0x1a>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e0ad      	b.n	8006312 <HAL_RTC_SetTime+0x176>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2220      	movs	r2, #32
 80061ba:	2101      	movs	r1, #1
 80061bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2221      	movs	r2, #33	; 0x21
 80061c2:	2102      	movs	r1, #2
 80061c4:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d125      	bne.n	8006218 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	2240      	movs	r2, #64	; 0x40
 80061d4:	4013      	ands	r3, r2
 80061d6:	d102      	bne.n	80061de <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2200      	movs	r2, #0
 80061dc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 fb37 	bl	8006856 <RTC_ByteToBcd2>
 80061e8:	0003      	movs	r3, r0
 80061ea:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	0018      	movs	r0, r3
 80061f2:	f000 fb30 	bl	8006856 <RTC_ByteToBcd2>
 80061f6:	0003      	movs	r3, r0
 80061f8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80061fa:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	789b      	ldrb	r3, [r3, #2]
 8006200:	0018      	movs	r0, r3
 8006202:	f000 fb28 	bl	8006856 <RTC_ByteToBcd2>
 8006206:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006208:	0022      	movs	r2, r4
 800620a:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	78db      	ldrb	r3, [r3, #3]
 8006210:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006212:	4313      	orrs	r3, r2
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	e017      	b.n	8006248 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2240      	movs	r2, #64	; 0x40
 8006220:	4013      	ands	r3, r2
 8006222:	d102      	bne.n	800622a <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2200      	movs	r2, #0
 8006228:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	785b      	ldrb	r3, [r3, #1]
 8006234:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006236:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800623c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	78db      	ldrb	r3, [r3, #3]
 8006242:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	22ca      	movs	r2, #202	; 0xca
 800624e:	625a      	str	r2, [r3, #36]	; 0x24
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2253      	movs	r2, #83	; 0x53
 8006256:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	0018      	movs	r0, r3
 800625c:	f000 fad1 	bl	8006802 <RTC_EnterInitMode>
 8006260:	1e03      	subs	r3, r0, #0
 8006262:	d00d      	beq.n	8006280 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	22ff      	movs	r2, #255	; 0xff
 800626a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2221      	movs	r2, #33	; 0x21
 8006270:	2104      	movs	r1, #4
 8006272:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	2100      	movs	r1, #0
 800627a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e048      	b.n	8006312 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4925      	ldr	r1, [pc, #148]	; (800631c <HAL_RTC_SetTime+0x180>)
 8006288:	400a      	ands	r2, r1
 800628a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4922      	ldr	r1, [pc, #136]	; (8006320 <HAL_RTC_SetTime+0x184>)
 8006298:	400a      	ands	r2, r1
 800629a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6899      	ldr	r1, [r3, #8]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68da      	ldr	r2, [r3, #12]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2180      	movs	r1, #128	; 0x80
 80062c0:	438a      	bics	r2, r1
 80062c2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	2220      	movs	r2, #32
 80062cc:	4013      	ands	r3, r2
 80062ce:	d113      	bne.n	80062f8 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	0018      	movs	r0, r3
 80062d4:	f000 fa6e 	bl	80067b4 <HAL_RTC_WaitForSynchro>
 80062d8:	1e03      	subs	r3, r0, #0
 80062da:	d00d      	beq.n	80062f8 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	22ff      	movs	r2, #255	; 0xff
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2221      	movs	r2, #33	; 0x21
 80062e8:	2104      	movs	r1, #4
 80062ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	2100      	movs	r1, #0
 80062f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e00c      	b.n	8006312 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	22ff      	movs	r2, #255	; 0xff
 80062fe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2221      	movs	r2, #33	; 0x21
 8006304:	2101      	movs	r1, #1
 8006306:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2220      	movs	r2, #32
 800630c:	2100      	movs	r1, #0
 800630e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006310:	2300      	movs	r3, #0
  }
}
 8006312:	0018      	movs	r0, r3
 8006314:	46bd      	mov	sp, r7
 8006316:	b007      	add	sp, #28
 8006318:	bd90      	pop	{r4, r7, pc}
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	007f7f7f 	.word	0x007f7f7f
 8006320:	fffbffff 	.word	0xfffbffff

08006324 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006324:	b590      	push	{r4, r7, lr}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2220      	movs	r2, #32
 8006334:	5c9b      	ldrb	r3, [r3, r2]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d101      	bne.n	800633e <HAL_RTC_SetDate+0x1a>
 800633a:	2302      	movs	r3, #2
 800633c:	e099      	b.n	8006472 <HAL_RTC_SetDate+0x14e>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2220      	movs	r2, #32
 8006342:	2101      	movs	r1, #1
 8006344:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2221      	movs	r2, #33	; 0x21
 800634a:	2102      	movs	r1, #2
 800634c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10e      	bne.n	8006372 <HAL_RTC_SetDate+0x4e>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	785b      	ldrb	r3, [r3, #1]
 8006358:	001a      	movs	r2, r3
 800635a:	2310      	movs	r3, #16
 800635c:	4013      	ands	r3, r2
 800635e:	d008      	beq.n	8006372 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	785b      	ldrb	r3, [r3, #1]
 8006364:	2210      	movs	r2, #16
 8006366:	4393      	bics	r3, r2
 8006368:	b2db      	uxtb	r3, r3
 800636a:	330a      	adds	r3, #10
 800636c:	b2da      	uxtb	r2, r3
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11c      	bne.n	80063b2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	78db      	ldrb	r3, [r3, #3]
 800637c:	0018      	movs	r0, r3
 800637e:	f000 fa6a 	bl	8006856 <RTC_ByteToBcd2>
 8006382:	0003      	movs	r3, r0
 8006384:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	785b      	ldrb	r3, [r3, #1]
 800638a:	0018      	movs	r0, r3
 800638c:	f000 fa63 	bl	8006856 <RTC_ByteToBcd2>
 8006390:	0003      	movs	r3, r0
 8006392:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006394:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	789b      	ldrb	r3, [r3, #2]
 800639a:	0018      	movs	r0, r3
 800639c:	f000 fa5b 	bl	8006856 <RTC_ByteToBcd2>
 80063a0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80063a2:	0022      	movs	r2, r4
 80063a4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80063ac:	4313      	orrs	r3, r2
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	e00e      	b.n	80063d0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	78db      	ldrb	r3, [r3, #3]
 80063b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	785b      	ldrb	r3, [r3, #1]
 80063bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063be:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80063c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	22ca      	movs	r2, #202	; 0xca
 80063d6:	625a      	str	r2, [r3, #36]	; 0x24
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2253      	movs	r2, #83	; 0x53
 80063de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	0018      	movs	r0, r3
 80063e4:	f000 fa0d 	bl	8006802 <RTC_EnterInitMode>
 80063e8:	1e03      	subs	r3, r0, #0
 80063ea:	d00d      	beq.n	8006408 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	22ff      	movs	r2, #255	; 0xff
 80063f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2221      	movs	r2, #33	; 0x21
 80063f8:	2104      	movs	r1, #4
 80063fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	2100      	movs	r1, #0
 8006402:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e034      	b.n	8006472 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	491b      	ldr	r1, [pc, #108]	; (800647c <HAL_RTC_SetDate+0x158>)
 8006410:	400a      	ands	r2, r1
 8006412:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68da      	ldr	r2, [r3, #12]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2180      	movs	r1, #128	; 0x80
 8006420:	438a      	bics	r2, r1
 8006422:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	2220      	movs	r2, #32
 800642c:	4013      	ands	r3, r2
 800642e:	d113      	bne.n	8006458 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	0018      	movs	r0, r3
 8006434:	f000 f9be 	bl	80067b4 <HAL_RTC_WaitForSynchro>
 8006438:	1e03      	subs	r3, r0, #0
 800643a:	d00d      	beq.n	8006458 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	22ff      	movs	r2, #255	; 0xff
 8006442:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2221      	movs	r2, #33	; 0x21
 8006448:	2104      	movs	r1, #4
 800644a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2220      	movs	r2, #32
 8006450:	2100      	movs	r1, #0
 8006452:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	e00c      	b.n	8006472 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	22ff      	movs	r2, #255	; 0xff
 800645e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2221      	movs	r2, #33	; 0x21
 8006464:	2101      	movs	r1, #1
 8006466:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2220      	movs	r2, #32
 800646c:	2100      	movs	r1, #0
 800646e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006470:	2300      	movs	r3, #0
  }
}
 8006472:	0018      	movs	r0, r3
 8006474:	46bd      	mov	sp, r7
 8006476:	b007      	add	sp, #28
 8006478:	bd90      	pop	{r4, r7, pc}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	00ffff3f 	.word	0x00ffff3f

08006480 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b089      	sub	sp, #36	; 0x24
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	5c9b      	ldrb	r3, [r3, r2]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_RTC_SetAlarm_IT+0x1a>
 8006496:	2302      	movs	r3, #2
 8006498:	e130      	b.n	80066fc <HAL_RTC_SetAlarm_IT+0x27c>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	2101      	movs	r1, #1
 80064a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2221      	movs	r2, #33	; 0x21
 80064a6:	2102      	movs	r1, #2
 80064a8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d136      	bne.n	800651e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	2240      	movs	r2, #64	; 0x40
 80064b8:	4013      	ands	r3, r2
 80064ba:	d102      	bne.n	80064c2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2200      	movs	r2, #0
 80064c0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	0018      	movs	r0, r3
 80064c8:	f000 f9c5 	bl	8006856 <RTC_ByteToBcd2>
 80064cc:	0003      	movs	r3, r0
 80064ce:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	785b      	ldrb	r3, [r3, #1]
 80064d4:	0018      	movs	r0, r3
 80064d6:	f000 f9be 	bl	8006856 <RTC_ByteToBcd2>
 80064da:	0003      	movs	r3, r0
 80064dc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80064de:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	789b      	ldrb	r3, [r3, #2]
 80064e4:	0018      	movs	r0, r3
 80064e6:	f000 f9b6 	bl	8006856 <RTC_ByteToBcd2>
 80064ea:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80064ec:	0022      	movs	r2, r4
 80064ee:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80064f6:	431a      	orrs	r2, r3
 80064f8:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2220      	movs	r2, #32
 80064fe:	5c9b      	ldrb	r3, [r3, r2]
 8006500:	0018      	movs	r0, r3
 8006502:	f000 f9a8 	bl	8006856 <RTC_ByteToBcd2>
 8006506:	0003      	movs	r3, r0
 8006508:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800650a:	0022      	movs	r2, r4
 800650c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006512:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006518:	4313      	orrs	r3, r2
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	e022      	b.n	8006564 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2240      	movs	r2, #64	; 0x40
 8006526:	4013      	ands	r3, r2
 8006528:	d102      	bne.n	8006530 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2200      	movs	r2, #0
 800652e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	785b      	ldrb	r3, [r3, #1]
 800653a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800653c:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006542:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800654a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	2120      	movs	r1, #32
 8006550:	5c5b      	ldrb	r3, [r3, r1]
 8006552:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006554:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800655a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006560:	4313      	orrs	r3, r2
 8006562:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	4313      	orrs	r3, r2
 800656e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	22ca      	movs	r2, #202	; 0xca
 8006576:	625a      	str	r2, [r3, #36]	; 0x24
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2253      	movs	r2, #83	; 0x53
 800657e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006584:	2380      	movs	r3, #128	; 0x80
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	429a      	cmp	r2, r3
 800658a:	d14e      	bne.n	800662a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	495b      	ldr	r1, [pc, #364]	; (8006704 <HAL_RTC_SetAlarm_IT+0x284>)
 8006598:	400a      	ands	r2, r1
 800659a:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	22ff      	movs	r2, #255	; 0xff
 80065a4:	401a      	ands	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4957      	ldr	r1, [pc, #348]	; (8006708 <HAL_RTC_SetAlarm_IT+0x288>)
 80065ac:	430a      	orrs	r2, r1
 80065ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80065b0:	f7fd fd28 	bl	8004004 <HAL_GetTick>
 80065b4:	0003      	movs	r3, r0
 80065b6:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80065b8:	e016      	b.n	80065e8 <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065ba:	f7fd fd23 	bl	8004004 <HAL_GetTick>
 80065be:	0002      	movs	r2, r0
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	1ad2      	subs	r2, r2, r3
 80065c4:	23fa      	movs	r3, #250	; 0xfa
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d90d      	bls.n	80065e8 <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	22ff      	movs	r2, #255	; 0xff
 80065d2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2221      	movs	r2, #33	; 0x21
 80065d8:	2103      	movs	r1, #3
 80065da:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2220      	movs	r2, #32
 80065e0:	2100      	movs	r1, #0
 80065e2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065e4:	2303      	movs	r3, #3
 80065e6:	e089      	b.n	80066fc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	2201      	movs	r2, #1
 80065f0:	4013      	ands	r3, r2
 80065f2:	d0e2      	beq.n	80065ba <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	0049      	lsls	r1, r1, #1
 8006612:	430a      	orrs	r2, r1
 8006614:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689a      	ldr	r2, [r3, #8]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2180      	movs	r1, #128	; 0x80
 8006622:	0149      	lsls	r1, r1, #5
 8006624:	430a      	orrs	r2, r1
 8006626:	609a      	str	r2, [r3, #8]
 8006628:	e04d      	b.n	80066c6 <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4935      	ldr	r1, [pc, #212]	; (800670c <HAL_RTC_SetAlarm_IT+0x28c>)
 8006636:	400a      	ands	r2, r1
 8006638:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	22ff      	movs	r2, #255	; 0xff
 8006642:	401a      	ands	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4931      	ldr	r1, [pc, #196]	; (8006710 <HAL_RTC_SetAlarm_IT+0x290>)
 800664a:	430a      	orrs	r2, r1
 800664c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800664e:	f7fd fcd9 	bl	8004004 <HAL_GetTick>
 8006652:	0003      	movs	r3, r0
 8006654:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006656:	e016      	b.n	8006686 <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006658:	f7fd fcd4 	bl	8004004 <HAL_GetTick>
 800665c:	0002      	movs	r2, r0
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	1ad2      	subs	r2, r2, r3
 8006662:	23fa      	movs	r3, #250	; 0xfa
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	429a      	cmp	r2, r3
 8006668:	d90d      	bls.n	8006686 <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	22ff      	movs	r2, #255	; 0xff
 8006670:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2221      	movs	r2, #33	; 0x21
 8006676:	2103      	movs	r1, #3
 8006678:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2220      	movs	r2, #32
 800667e:	2100      	movs	r1, #0
 8006680:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006682:	2303      	movs	r3, #3
 8006684:	e03a      	b.n	80066fc <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	2202      	movs	r2, #2
 800668e:	4013      	ands	r3, r2
 8006690:	d0e2      	beq.n	8006658 <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2180      	movs	r1, #128	; 0x80
 80066ae:	0089      	lsls	r1, r1, #2
 80066b0:	430a      	orrs	r2, r1
 80066b2:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	0189      	lsls	r1, r1, #6
 80066c2:	430a      	orrs	r2, r1
 80066c4:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80066c6:	4b13      	ldr	r3, [pc, #76]	; (8006714 <HAL_RTC_SetAlarm_IT+0x294>)
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	4b12      	ldr	r3, [pc, #72]	; (8006714 <HAL_RTC_SetAlarm_IT+0x294>)
 80066cc:	2180      	movs	r1, #128	; 0x80
 80066ce:	0289      	lsls	r1, r1, #10
 80066d0:	430a      	orrs	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80066d4:	4b0f      	ldr	r3, [pc, #60]	; (8006714 <HAL_RTC_SetAlarm_IT+0x294>)
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <HAL_RTC_SetAlarm_IT+0x294>)
 80066da:	2180      	movs	r1, #128	; 0x80
 80066dc:	0289      	lsls	r1, r1, #10
 80066de:	430a      	orrs	r2, r1
 80066e0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	22ff      	movs	r2, #255	; 0xff
 80066e8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2221      	movs	r2, #33	; 0x21
 80066ee:	2101      	movs	r1, #1
 80066f0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2220      	movs	r2, #32
 80066f6:	2100      	movs	r1, #0
 80066f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	0018      	movs	r0, r3
 80066fe:	46bd      	mov	sp, r7
 8006700:	b009      	add	sp, #36	; 0x24
 8006702:	bd90      	pop	{r4, r7, pc}
 8006704:	fffffeff 	.word	0xfffffeff
 8006708:	fffffe7f 	.word	0xfffffe7f
 800670c:	fffffdff 	.word	0xfffffdff
 8006710:	fffffd7f 	.word	0xfffffd7f
 8006714:	40010400 	.word	0x40010400

08006718 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	015b      	lsls	r3, r3, #5
 800672a:	4013      	ands	r3, r2
 800672c:	d014      	beq.n	8006758 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	2380      	movs	r3, #128	; 0x80
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	4013      	ands	r3, r2
 800673a:	d00d      	beq.n	8006758 <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	0018      	movs	r0, r3
 8006740:	f7fd f8cc 	bl	80038dc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	22ff      	movs	r2, #255	; 0xff
 800674c:	401a      	ands	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4915      	ldr	r1, [pc, #84]	; (80067a8 <HAL_RTC_AlarmIRQHandler+0x90>)
 8006754:	430a      	orrs	r2, r1
 8006756:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	2380      	movs	r3, #128	; 0x80
 8006760:	019b      	lsls	r3, r3, #6
 8006762:	4013      	ands	r3, r2
 8006764:	d014      	beq.n	8006790 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	2380      	movs	r3, #128	; 0x80
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4013      	ands	r3, r2
 8006772:	d00d      	beq.n	8006790 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	0018      	movs	r0, r3
 8006778:	f7fd f8be 	bl	80038f8 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	22ff      	movs	r2, #255	; 0xff
 8006784:	401a      	ands	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4908      	ldr	r1, [pc, #32]	; (80067ac <HAL_RTC_AlarmIRQHandler+0x94>)
 800678c:	430a      	orrs	r2, r1
 800678e:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <HAL_RTC_AlarmIRQHandler+0x98>)
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	0292      	lsls	r2, r2, #10
 8006796:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2221      	movs	r2, #33	; 0x21
 800679c:	2101      	movs	r1, #1
 800679e:	5499      	strb	r1, [r3, r2]
}
 80067a0:	46c0      	nop			; (mov r8, r8)
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b002      	add	sp, #8
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	fffffe7f 	.word	0xfffffe7f
 80067ac:	fffffd7f 	.word	0xfffffd7f
 80067b0:	40010400 	.word	0x40010400

080067b4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	21a0      	movs	r1, #160	; 0xa0
 80067c8:	438a      	bics	r2, r1
 80067ca:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80067cc:	f7fd fc1a 	bl	8004004 <HAL_GetTick>
 80067d0:	0003      	movs	r3, r0
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067d4:	e00a      	b.n	80067ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067d6:	f7fd fc15 	bl	8004004 <HAL_GetTick>
 80067da:	0002      	movs	r2, r0
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	1ad2      	subs	r2, r2, r3
 80067e0:	23fa      	movs	r3, #250	; 0xfa
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d901      	bls.n	80067ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80067e8:	2303      	movs	r3, #3
 80067ea:	e006      	b.n	80067fa <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	4013      	ands	r3, r2
 80067f6:	d0ee      	beq.n	80067d6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	0018      	movs	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b004      	add	sp, #16
 8006800:	bd80      	pop	{r7, pc}

08006802 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b084      	sub	sp, #16
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	2240      	movs	r2, #64	; 0x40
 8006812:	4013      	ands	r3, r2
 8006814:	d11a      	bne.n	800684c <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2201      	movs	r2, #1
 800681c:	4252      	negs	r2, r2
 800681e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006820:	f7fd fbf0 	bl	8004004 <HAL_GetTick>
 8006824:	0003      	movs	r3, r0
 8006826:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006828:	e00a      	b.n	8006840 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800682a:	f7fd fbeb 	bl	8004004 <HAL_GetTick>
 800682e:	0002      	movs	r2, r0
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	1ad2      	subs	r2, r2, r3
 8006834:	23fa      	movs	r3, #250	; 0xfa
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	429a      	cmp	r2, r3
 800683a:	d901      	bls.n	8006840 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e006      	b.n	800684e <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	2240      	movs	r2, #64	; 0x40
 8006848:	4013      	ands	r3, r2
 800684a:	d0ee      	beq.n	800682a <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	0018      	movs	r0, r3
 8006850:	46bd      	mov	sp, r7
 8006852:	b004      	add	sp, #16
 8006854:	bd80      	pop	{r7, pc}

08006856 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b084      	sub	sp, #16
 800685a:	af00      	add	r7, sp, #0
 800685c:	0002      	movs	r2, r0
 800685e:	1dfb      	adds	r3, r7, #7
 8006860:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8006866:	230b      	movs	r3, #11
 8006868:	18fb      	adds	r3, r7, r3
 800686a:	1dfa      	adds	r2, r7, #7
 800686c:	7812      	ldrb	r2, [r2, #0]
 800686e:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8006870:	e008      	b.n	8006884 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	3301      	adds	r3, #1
 8006876:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8006878:	220b      	movs	r2, #11
 800687a:	18bb      	adds	r3, r7, r2
 800687c:	18ba      	adds	r2, r7, r2
 800687e:	7812      	ldrb	r2, [r2, #0]
 8006880:	3a0a      	subs	r2, #10
 8006882:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8006884:	210b      	movs	r1, #11
 8006886:	187b      	adds	r3, r7, r1
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b09      	cmp	r3, #9
 800688c:	d8f1      	bhi.n	8006872 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	b2da      	uxtb	r2, r3
 8006896:	187b      	adds	r3, r7, r1
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	4313      	orrs	r3, r2
 800689c:	b2db      	uxtb	r3, r3
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b004      	add	sp, #16
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b082      	sub	sp, #8
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e032      	b.n	800691e <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2239      	movs	r2, #57	; 0x39
 80068bc:	5c9b      	ldrb	r3, [r3, r2]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d107      	bne.n	80068d4 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2238      	movs	r2, #56	; 0x38
 80068c8:	2100      	movs	r1, #0
 80068ca:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f7fd f9fa 	bl	8003cc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2239      	movs	r2, #57	; 0x39
 80068d8:	2102      	movs	r1, #2
 80068da:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	3304      	adds	r3, #4
 80068e4:	0019      	movs	r1, r3
 80068e6:	0010      	movs	r0, r2
 80068e8:	f000 fb74 	bl	8006fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	223e      	movs	r2, #62	; 0x3e
 80068f0:	2101      	movs	r1, #1
 80068f2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	223a      	movs	r2, #58	; 0x3a
 80068f8:	2101      	movs	r1, #1
 80068fa:	5499      	strb	r1, [r3, r2]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	223b      	movs	r2, #59	; 0x3b
 8006900:	2101      	movs	r1, #1
 8006902:	5499      	strb	r1, [r3, r2]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	223c      	movs	r2, #60	; 0x3c
 8006908:	2101      	movs	r1, #1
 800690a:	5499      	strb	r1, [r3, r2]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	223d      	movs	r2, #61	; 0x3d
 8006910:	2101      	movs	r1, #1
 8006912:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2239      	movs	r2, #57	; 0x39
 8006918:	2101      	movs	r1, #1
 800691a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	0018      	movs	r0, r3
 8006920:	46bd      	mov	sp, r7
 8006922:	b002      	add	sp, #8
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b084      	sub	sp, #16
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2239      	movs	r2, #57	; 0x39
 8006934:	5c9b      	ldrb	r3, [r3, r2]
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b01      	cmp	r3, #1
 800693a:	d001      	beq.n	8006940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	e03b      	b.n	80069b8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2239      	movs	r2, #57	; 0x39
 8006944:	2102      	movs	r1, #2
 8006946:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2101      	movs	r1, #1
 8006954:	430a      	orrs	r2, r1
 8006956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	2380      	movs	r3, #128	; 0x80
 800695e:	05db      	lsls	r3, r3, #23
 8006960:	429a      	cmp	r2, r3
 8006962:	d00e      	beq.n	8006982 <HAL_TIM_Base_Start_IT+0x5a>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <HAL_TIM_Base_Start_IT+0x98>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d009      	beq.n	8006982 <HAL_TIM_Base_Start_IT+0x5a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a14      	ldr	r2, [pc, #80]	; (80069c4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d004      	beq.n	8006982 <HAL_TIM_Base_Start_IT+0x5a>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a12      	ldr	r2, [pc, #72]	; (80069c8 <HAL_TIM_Base_Start_IT+0xa0>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d111      	bne.n	80069a6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	2207      	movs	r2, #7
 800698a:	4013      	ands	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b06      	cmp	r3, #6
 8006992:	d010      	beq.n	80069b6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2101      	movs	r1, #1
 80069a0:	430a      	orrs	r2, r1
 80069a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a4:	e007      	b.n	80069b6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2101      	movs	r1, #1
 80069b2:	430a      	orrs	r2, r1
 80069b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069b6:	2300      	movs	r3, #0
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b004      	add	sp, #16
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	40000400 	.word	0x40000400
 80069c4:	40010800 	.word	0x40010800
 80069c8:	40011400 	.word	0x40011400

080069cc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68da      	ldr	r2, [r3, #12]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2101      	movs	r1, #1
 80069e0:	438a      	bics	r2, r1
 80069e2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <HAL_TIM_Base_Stop_IT+0x48>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	d107      	bne.n	8006a00 <HAL_TIM_Base_Stop_IT+0x34>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2101      	movs	r1, #1
 80069fc:	438a      	bics	r2, r1
 80069fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2239      	movs	r2, #57	; 0x39
 8006a04:	2101      	movs	r1, #1
 8006a06:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b002      	add	sp, #8
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	00001111 	.word	0x00001111

08006a18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d101      	bne.n	8006a2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e032      	b.n	8006a90 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2239      	movs	r2, #57	; 0x39
 8006a2e:	5c9b      	ldrb	r3, [r3, r2]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d107      	bne.n	8006a46 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2238      	movs	r2, #56	; 0x38
 8006a3a:	2100      	movs	r1, #0
 8006a3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	0018      	movs	r0, r3
 8006a42:	f7fd f929 	bl	8003c98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2239      	movs	r2, #57	; 0x39
 8006a4a:	2102      	movs	r1, #2
 8006a4c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	3304      	adds	r3, #4
 8006a56:	0019      	movs	r1, r3
 8006a58:	0010      	movs	r0, r2
 8006a5a:	f000 fabb 	bl	8006fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	223e      	movs	r2, #62	; 0x3e
 8006a62:	2101      	movs	r1, #1
 8006a64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	223a      	movs	r2, #58	; 0x3a
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	5499      	strb	r1, [r3, r2]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	223b      	movs	r2, #59	; 0x3b
 8006a72:	2101      	movs	r1, #1
 8006a74:	5499      	strb	r1, [r3, r2]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	223c      	movs	r2, #60	; 0x3c
 8006a7a:	2101      	movs	r1, #1
 8006a7c:	5499      	strb	r1, [r3, r2]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	223d      	movs	r2, #61	; 0x3d
 8006a82:	2101      	movs	r1, #1
 8006a84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2239      	movs	r2, #57	; 0x39
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	0018      	movs	r0, r3
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b002      	add	sp, #8
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d108      	bne.n	8006aba <HAL_TIM_PWM_Start+0x22>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	223a      	movs	r2, #58	; 0x3a
 8006aac:	5c9b      	ldrb	r3, [r3, r2]
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	1e5a      	subs	r2, r3, #1
 8006ab4:	4193      	sbcs	r3, r2
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	e01f      	b.n	8006afa <HAL_TIM_PWM_Start+0x62>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d108      	bne.n	8006ad2 <HAL_TIM_PWM_Start+0x3a>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	223b      	movs	r2, #59	; 0x3b
 8006ac4:	5c9b      	ldrb	r3, [r3, r2]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	1e5a      	subs	r2, r3, #1
 8006acc:	4193      	sbcs	r3, r2
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	e013      	b.n	8006afa <HAL_TIM_PWM_Start+0x62>
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d108      	bne.n	8006aea <HAL_TIM_PWM_Start+0x52>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	223c      	movs	r2, #60	; 0x3c
 8006adc:	5c9b      	ldrb	r3, [r3, r2]
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	1e5a      	subs	r2, r3, #1
 8006ae4:	4193      	sbcs	r3, r2
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	e007      	b.n	8006afa <HAL_TIM_PWM_Start+0x62>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	223d      	movs	r2, #61	; 0x3d
 8006aee:	5c9b      	ldrb	r3, [r3, r2]
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	1e5a      	subs	r2, r3, #1
 8006af6:	4193      	sbcs	r3, r2
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e052      	b.n	8006ba8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d104      	bne.n	8006b12 <HAL_TIM_PWM_Start+0x7a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	223a      	movs	r2, #58	; 0x3a
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	5499      	strb	r1, [r3, r2]
 8006b10:	e013      	b.n	8006b3a <HAL_TIM_PWM_Start+0xa2>
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d104      	bne.n	8006b22 <HAL_TIM_PWM_Start+0x8a>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	223b      	movs	r2, #59	; 0x3b
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	5499      	strb	r1, [r3, r2]
 8006b20:	e00b      	b.n	8006b3a <HAL_TIM_PWM_Start+0xa2>
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	2b08      	cmp	r3, #8
 8006b26:	d104      	bne.n	8006b32 <HAL_TIM_PWM_Start+0x9a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	223c      	movs	r2, #60	; 0x3c
 8006b2c:	2102      	movs	r1, #2
 8006b2e:	5499      	strb	r1, [r3, r2]
 8006b30:	e003      	b.n	8006b3a <HAL_TIM_PWM_Start+0xa2>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	223d      	movs	r2, #61	; 0x3d
 8006b36:	2102      	movs	r1, #2
 8006b38:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6839      	ldr	r1, [r7, #0]
 8006b40:	2201      	movs	r2, #1
 8006b42:	0018      	movs	r0, r3
 8006b44:	f000 fba8 	bl	8007298 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	05db      	lsls	r3, r3, #23
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d00e      	beq.n	8006b72 <HAL_TIM_PWM_Start+0xda>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a15      	ldr	r2, [pc, #84]	; (8006bb0 <HAL_TIM_PWM_Start+0x118>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d009      	beq.n	8006b72 <HAL_TIM_PWM_Start+0xda>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a14      	ldr	r2, [pc, #80]	; (8006bb4 <HAL_TIM_PWM_Start+0x11c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d004      	beq.n	8006b72 <HAL_TIM_PWM_Start+0xda>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a12      	ldr	r2, [pc, #72]	; (8006bb8 <HAL_TIM_PWM_Start+0x120>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d111      	bne.n	8006b96 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	2207      	movs	r2, #7
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b06      	cmp	r3, #6
 8006b82:	d010      	beq.n	8006ba6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2101      	movs	r1, #1
 8006b90:	430a      	orrs	r2, r1
 8006b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b94:	e007      	b.n	8006ba6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	0018      	movs	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	b004      	add	sp, #16
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40000400 	.word	0x40000400
 8006bb4:	40010800 	.word	0x40010800
 8006bb8:	40011400 	.word	0x40011400

08006bbc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f000 fb62 	bl	8007298 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <HAL_TIM_PWM_Stop+0x78>)
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d107      	bne.n	8006bf0 <HAL_TIM_PWM_Stop+0x34>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2101      	movs	r1, #1
 8006bec:	438a      	bics	r2, r1
 8006bee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d104      	bne.n	8006c00 <HAL_TIM_PWM_Stop+0x44>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	223a      	movs	r2, #58	; 0x3a
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	5499      	strb	r1, [r3, r2]
 8006bfe:	e013      	b.n	8006c28 <HAL_TIM_PWM_Stop+0x6c>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d104      	bne.n	8006c10 <HAL_TIM_PWM_Stop+0x54>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	223b      	movs	r2, #59	; 0x3b
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	5499      	strb	r1, [r3, r2]
 8006c0e:	e00b      	b.n	8006c28 <HAL_TIM_PWM_Stop+0x6c>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b08      	cmp	r3, #8
 8006c14:	d104      	bne.n	8006c20 <HAL_TIM_PWM_Stop+0x64>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	223c      	movs	r2, #60	; 0x3c
 8006c1a:	2101      	movs	r1, #1
 8006c1c:	5499      	strb	r1, [r3, r2]
 8006c1e:	e003      	b.n	8006c28 <HAL_TIM_PWM_Stop+0x6c>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	223d      	movs	r2, #61	; 0x3d
 8006c24:	2101      	movs	r1, #1
 8006c26:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b002      	add	sp, #8
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	00001111 	.word	0x00001111

08006c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	2202      	movs	r2, #2
 8006c48:	4013      	ands	r3, r2
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d124      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2202      	movs	r2, #2
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d11d      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2203      	movs	r2, #3
 8006c62:	4252      	negs	r2, r2
 8006c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	2203      	movs	r2, #3
 8006c74:	4013      	ands	r3, r2
 8006c76:	d004      	beq.n	8006c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	0018      	movs	r0, r3
 8006c7c:	f000 f992 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006c80:	e007      	b.n	8006c92 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	0018      	movs	r0, r3
 8006c86:	f000 f985 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f000 f991 	bl	8006fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2204      	movs	r2, #4
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d125      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	2204      	movs	r2, #4
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d11e      	bne.n	8006cf2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2205      	movs	r2, #5
 8006cba:	4252      	negs	r2, r2
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	23c0      	movs	r3, #192	; 0xc0
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4013      	ands	r3, r2
 8006cd0:	d004      	beq.n	8006cdc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f000 f965 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006cda:	e007      	b.n	8006cec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	0018      	movs	r0, r3
 8006ce0:	f000 f958 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	0018      	movs	r0, r3
 8006ce8:	f000 f964 	bl	8006fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	2208      	movs	r2, #8
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b08      	cmp	r3, #8
 8006cfe:	d124      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	2208      	movs	r2, #8
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b08      	cmp	r3, #8
 8006d0c:	d11d      	bne.n	8006d4a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2209      	movs	r2, #9
 8006d14:	4252      	negs	r2, r2
 8006d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2204      	movs	r2, #4
 8006d1c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69db      	ldr	r3, [r3, #28]
 8006d24:	2203      	movs	r2, #3
 8006d26:	4013      	ands	r3, r2
 8006d28:	d004      	beq.n	8006d34 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	f000 f939 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006d32:	e007      	b.n	8006d44 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	0018      	movs	r0, r3
 8006d38:	f000 f92c 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	0018      	movs	r0, r3
 8006d40:	f000 f938 	bl	8006fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	691b      	ldr	r3, [r3, #16]
 8006d50:	2210      	movs	r2, #16
 8006d52:	4013      	ands	r3, r2
 8006d54:	2b10      	cmp	r3, #16
 8006d56:	d125      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	2210      	movs	r2, #16
 8006d60:	4013      	ands	r3, r2
 8006d62:	2b10      	cmp	r3, #16
 8006d64:	d11e      	bne.n	8006da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2211      	movs	r2, #17
 8006d6c:	4252      	negs	r2, r2
 8006d6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2208      	movs	r2, #8
 8006d74:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	23c0      	movs	r3, #192	; 0xc0
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4013      	ands	r3, r2
 8006d82:	d004      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	0018      	movs	r0, r3
 8006d88:	f000 f90c 	bl	8006fa4 <HAL_TIM_IC_CaptureCallback>
 8006d8c:	e007      	b.n	8006d9e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	0018      	movs	r0, r3
 8006d92:	f000 f8ff 	bl	8006f94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	0018      	movs	r0, r3
 8006d9a:	f000 f90b 	bl	8006fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2201      	movs	r2, #1
 8006dac:	4013      	ands	r3, r2
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d10f      	bne.n	8006dd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	2201      	movs	r2, #1
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d108      	bne.n	8006dd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	4252      	negs	r2, r2
 8006dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	0018      	movs	r0, r3
 8006dce:	f7fc fd23 	bl	8003818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691b      	ldr	r3, [r3, #16]
 8006dd8:	2240      	movs	r2, #64	; 0x40
 8006dda:	4013      	ands	r3, r2
 8006ddc:	2b40      	cmp	r3, #64	; 0x40
 8006dde:	d10f      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	2240      	movs	r2, #64	; 0x40
 8006de8:	4013      	ands	r3, r2
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d108      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	2241      	movs	r2, #65	; 0x41
 8006df4:	4252      	negs	r2, r2
 8006df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	0018      	movs	r0, r3
 8006dfc:	f000 f8e2 	bl	8006fc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e00:	46c0      	nop			; (mov r8, r8)
 8006e02:	46bd      	mov	sp, r7
 8006e04:	b002      	add	sp, #8
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e14:	2317      	movs	r3, #23
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2238      	movs	r2, #56	; 0x38
 8006e20:	5c9b      	ldrb	r3, [r3, r2]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <HAL_TIM_PWM_ConfigChannel+0x22>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e0ad      	b.n	8006f86 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2238      	movs	r2, #56	; 0x38
 8006e2e:	2101      	movs	r1, #1
 8006e30:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b0c      	cmp	r3, #12
 8006e36:	d100      	bne.n	8006e3a <HAL_TIM_PWM_ConfigChannel+0x32>
 8006e38:	e076      	b.n	8006f28 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	d900      	bls.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006e40:	e095      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d04e      	beq.n	8006ee6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d900      	bls.n	8006e50 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006e4e:	e08e      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x166>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d003      	beq.n	8006e5e <HAL_TIM_PWM_ConfigChannel+0x56>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	d021      	beq.n	8006ea0 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006e5c:	e087      	b.n	8006f6e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	0011      	movs	r1, r2
 8006e66:	0018      	movs	r0, r3
 8006e68:	f000 f912 	bl	8007090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699a      	ldr	r2, [r3, #24]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2108      	movs	r1, #8
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699a      	ldr	r2, [r3, #24]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2104      	movs	r1, #4
 8006e88:	438a      	bics	r2, r1
 8006e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6999      	ldr	r1, [r3, #24]
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	619a      	str	r2, [r3, #24]
      break;
 8006e9e:	e06b      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	0011      	movs	r1, r2
 8006ea8:	0018      	movs	r0, r3
 8006eaa:	f000 f92d 	bl	8007108 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	2180      	movs	r1, #128	; 0x80
 8006eba:	0109      	lsls	r1, r1, #4
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4931      	ldr	r1, [pc, #196]	; (8006f90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006ecc:	400a      	ands	r2, r1
 8006ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	6999      	ldr	r1, [r3, #24]
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	021a      	lsls	r2, r3, #8
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	430a      	orrs	r2, r1
 8006ee2:	619a      	str	r2, [r3, #24]
      break;
 8006ee4:	e048      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	0011      	movs	r1, r2
 8006eee:	0018      	movs	r0, r3
 8006ef0:	f000 f94c 	bl	800718c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	69da      	ldr	r2, [r3, #28]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2108      	movs	r1, #8
 8006f00:	430a      	orrs	r2, r1
 8006f02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	69da      	ldr	r2, [r3, #28]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2104      	movs	r1, #4
 8006f10:	438a      	bics	r2, r1
 8006f12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69d9      	ldr	r1, [r3, #28]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	61da      	str	r2, [r3, #28]
      break;
 8006f26:	e027      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	0011      	movs	r1, r2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f000 f96b 	bl	800720c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	69da      	ldr	r2, [r3, #28]
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2180      	movs	r1, #128	; 0x80
 8006f42:	0109      	lsls	r1, r1, #4
 8006f44:	430a      	orrs	r2, r1
 8006f46:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	69da      	ldr	r2, [r3, #28]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	490f      	ldr	r1, [pc, #60]	; (8006f90 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006f54:	400a      	ands	r2, r1
 8006f56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	69d9      	ldr	r1, [r3, #28]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	021a      	lsls	r2, r3, #8
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	61da      	str	r2, [r3, #28]
      break;
 8006f6c:	e004      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006f6e:	2317      	movs	r3, #23
 8006f70:	18fb      	adds	r3, r7, r3
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
      break;
 8006f76:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2238      	movs	r2, #56	; 0x38
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	5499      	strb	r1, [r3, r2]

  return status;
 8006f80:	2317      	movs	r3, #23
 8006f82:	18fb      	adds	r3, r7, r3
 8006f84:	781b      	ldrb	r3, [r3, #0]
}
 8006f86:	0018      	movs	r0, r3
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b006      	add	sp, #24
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	46c0      	nop			; (mov r8, r8)
 8006f90:	fffffbff 	.word	0xfffffbff

08006f94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f9c:	46c0      	nop			; (mov r8, r8)
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	b002      	add	sp, #8
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006fac:	46c0      	nop			; (mov r8, r8)
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	b002      	add	sp, #8
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006fbc:	46c0      	nop			; (mov r8, r8)
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	b002      	add	sp, #8
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fcc:	46c0      	nop			; (mov r8, r8)
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b002      	add	sp, #8
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	2380      	movs	r3, #128	; 0x80
 8006fe8:	05db      	lsls	r3, r3, #23
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d00b      	beq.n	8007006 <TIM_Base_SetConfig+0x32>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a23      	ldr	r2, [pc, #140]	; (8007080 <TIM_Base_SetConfig+0xac>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d007      	beq.n	8007006 <TIM_Base_SetConfig+0x32>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	4a22      	ldr	r2, [pc, #136]	; (8007084 <TIM_Base_SetConfig+0xb0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d003      	beq.n	8007006 <TIM_Base_SetConfig+0x32>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	4a21      	ldr	r2, [pc, #132]	; (8007088 <TIM_Base_SetConfig+0xb4>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d108      	bne.n	8007018 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2270      	movs	r2, #112	; 0x70
 800700a:	4393      	bics	r3, r2
 800700c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	4313      	orrs	r3, r2
 8007016:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	2380      	movs	r3, #128	; 0x80
 800701c:	05db      	lsls	r3, r3, #23
 800701e:	429a      	cmp	r2, r3
 8007020:	d00b      	beq.n	800703a <TIM_Base_SetConfig+0x66>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <TIM_Base_SetConfig+0xac>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d007      	beq.n	800703a <TIM_Base_SetConfig+0x66>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a15      	ldr	r2, [pc, #84]	; (8007084 <TIM_Base_SetConfig+0xb0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d003      	beq.n	800703a <TIM_Base_SetConfig+0x66>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a14      	ldr	r2, [pc, #80]	; (8007088 <TIM_Base_SetConfig+0xb4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d108      	bne.n	800704c <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4a13      	ldr	r2, [pc, #76]	; (800708c <TIM_Base_SetConfig+0xb8>)
 800703e:	4013      	ands	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2280      	movs	r2, #128	; 0x80
 8007050:	4393      	bics	r3, r2
 8007052:	001a      	movs	r2, r3
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2201      	movs	r2, #1
 8007076:	615a      	str	r2, [r3, #20]
}
 8007078:	46c0      	nop			; (mov r8, r8)
 800707a:	46bd      	mov	sp, r7
 800707c:	b004      	add	sp, #16
 800707e:	bd80      	pop	{r7, pc}
 8007080:	40000400 	.word	0x40000400
 8007084:	40010800 	.word	0x40010800
 8007088:	40011400 	.word	0x40011400
 800708c:	fffffcff 	.word	0xfffffcff

08007090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a1b      	ldr	r3, [r3, #32]
 800709e:	2201      	movs	r2, #1
 80070a0:	4393      	bics	r3, r2
 80070a2:	001a      	movs	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a1b      	ldr	r3, [r3, #32]
 80070ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2270      	movs	r2, #112	; 0x70
 80070be:	4393      	bics	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2203      	movs	r2, #3
 80070c6:	4393      	bics	r3, r2
 80070c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	2202      	movs	r2, #2
 80070d8:	4393      	bics	r3, r2
 80070da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	697a      	ldr	r2, [r7, #20]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	621a      	str	r2, [r3, #32]
}
 8007100:	46c0      	nop			; (mov r8, r8)
 8007102:	46bd      	mov	sp, r7
 8007104:	b006      	add	sp, #24
 8007106:	bd80      	pop	{r7, pc}

08007108 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	2210      	movs	r2, #16
 8007118:	4393      	bics	r3, r2
 800711a:	001a      	movs	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	4a13      	ldr	r2, [pc, #76]	; (8007184 <TIM_OC2_SetConfig+0x7c>)
 8007136:	4013      	ands	r3, r2
 8007138:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	4a12      	ldr	r2, [pc, #72]	; (8007188 <TIM_OC2_SetConfig+0x80>)
 800713e:	4013      	ands	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	021b      	lsls	r3, r3, #8
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4313      	orrs	r3, r2
 800714c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2220      	movs	r2, #32
 8007152:	4393      	bics	r3, r2
 8007154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	011b      	lsls	r3, r3, #4
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	4313      	orrs	r3, r2
 8007160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	685a      	ldr	r2, [r3, #4]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	697a      	ldr	r2, [r7, #20]
 800717a:	621a      	str	r2, [r3, #32]
}
 800717c:	46c0      	nop			; (mov r8, r8)
 800717e:	46bd      	mov	sp, r7
 8007180:	b006      	add	sp, #24
 8007182:	bd80      	pop	{r7, pc}
 8007184:	ffff8fff 	.word	0xffff8fff
 8007188:	fffffcff 	.word	0xfffffcff

0800718c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <TIM_OC3_SetConfig+0x78>)
 800719c:	401a      	ands	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2270      	movs	r2, #112	; 0x70
 80071b8:	4393      	bics	r3, r2
 80071ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2203      	movs	r2, #3
 80071c0:	4393      	bics	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	68fa      	ldr	r2, [r7, #12]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	4a0d      	ldr	r2, [pc, #52]	; (8007208 <TIM_OC3_SetConfig+0x7c>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	021b      	lsls	r3, r3, #8
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	621a      	str	r2, [r3, #32]
}
 80071fc:	46c0      	nop			; (mov r8, r8)
 80071fe:	46bd      	mov	sp, r7
 8007200:	b006      	add	sp, #24
 8007202:	bd80      	pop	{r7, pc}
 8007204:	fffffeff 	.word	0xfffffeff
 8007208:	fffffdff 	.word	0xfffffdff

0800720c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b086      	sub	sp, #24
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <TIM_OC4_SetConfig+0x7c>)
 800721c:	401a      	ands	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a15      	ldr	r2, [pc, #84]	; (800728c <TIM_OC4_SetConfig+0x80>)
 8007238:	4013      	ands	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4a14      	ldr	r2, [pc, #80]	; (8007290 <TIM_OC4_SetConfig+0x84>)
 8007240:	4013      	ands	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	4a10      	ldr	r2, [pc, #64]	; (8007294 <TIM_OC4_SetConfig+0x88>)
 8007254:	4013      	ands	r3, r2
 8007256:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	697a      	ldr	r2, [r7, #20]
 8007260:	4313      	orrs	r3, r2
 8007262:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	621a      	str	r2, [r3, #32]
}
 800727e:	46c0      	nop			; (mov r8, r8)
 8007280:	46bd      	mov	sp, r7
 8007282:	b006      	add	sp, #24
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	ffffefff 	.word	0xffffefff
 800728c:	ffff8fff 	.word	0xffff8fff
 8007290:	fffffcff 	.word	0xfffffcff
 8007294:	ffffdfff 	.word	0xffffdfff

08007298 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	221f      	movs	r2, #31
 80072a8:	4013      	ands	r3, r2
 80072aa:	2201      	movs	r2, #1
 80072ac:	409a      	lsls	r2, r3
 80072ae:	0013      	movs	r3, r2
 80072b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a1b      	ldr	r3, [r3, #32]
 80072b6:	697a      	ldr	r2, [r7, #20]
 80072b8:	43d2      	mvns	r2, r2
 80072ba:	401a      	ands	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	211f      	movs	r1, #31
 80072c8:	400b      	ands	r3, r1
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4099      	lsls	r1, r3
 80072ce:	000b      	movs	r3, r1
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
}
 80072d6:	46c0      	nop			; (mov r8, r8)
 80072d8:	46bd      	mov	sp, r7
 80072da:	b006      	add	sp, #24
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2238      	movs	r2, #56	; 0x38
 80072ee:	5c9b      	ldrb	r3, [r3, r2]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e047      	b.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2238      	movs	r2, #56	; 0x38
 80072fc:	2101      	movs	r1, #1
 80072fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2239      	movs	r2, #57	; 0x39
 8007304:	2102      	movs	r1, #2
 8007306:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2270      	movs	r2, #112	; 0x70
 800731c:	4393      	bics	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	2380      	movs	r3, #128	; 0x80
 8007338:	05db      	lsls	r3, r3, #23
 800733a:	429a      	cmp	r2, r3
 800733c:	d00e      	beq.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a13      	ldr	r2, [pc, #76]	; (8007390 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d009      	beq.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a11      	ldr	r2, [pc, #68]	; (8007394 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d004      	beq.n	800735c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a10      	ldr	r2, [pc, #64]	; (8007398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d10c      	bne.n	8007376 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2280      	movs	r2, #128	; 0x80
 8007360:	4393      	bics	r3, r2
 8007362:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	4313      	orrs	r3, r2
 800736c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2239      	movs	r2, #57	; 0x39
 800737a:	2101      	movs	r1, #1
 800737c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2238      	movs	r2, #56	; 0x38
 8007382:	2100      	movs	r1, #0
 8007384:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	0018      	movs	r0, r3
 800738a:	46bd      	mov	sp, r7
 800738c:	b004      	add	sp, #16
 800738e:	bd80      	pop	{r7, pc}
 8007390:	40000400 	.word	0x40000400
 8007394:	40010800 	.word	0x40010800
 8007398:	40011400 	.word	0x40011400

0800739c <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  __HAL_LOCK(htim);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2238      	movs	r2, #56	; 0x38
 80073aa:	5c9b      	ldrb	r3, [r3, r2]
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_TIMEx_RemapConfig+0x18>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e00c      	b.n	80073ce <HAL_TIMEx_RemapConfig+0x32>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2238      	movs	r2, #56	; 0x38
 80073b8:	2101      	movs	r1, #1
 80073ba:	5499      	strb	r1, [r3, r2]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	683a      	ldr	r2, [r7, #0]
 80073c2:	651a      	str	r2, [r3, #80]	; 0x50

  __HAL_UNLOCK(htim);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2238      	movs	r2, #56	; 0x38
 80073c8:	2100      	movs	r1, #0
 80073ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	0018      	movs	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b002      	add	sp, #8
 80073d4:	bd80      	pop	{r7, pc}
	...

080073d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d101      	bne.n	80073ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e044      	b.n	8007474 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d107      	bne.n	8007402 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2274      	movs	r2, #116	; 0x74
 80073f6:	2100      	movs	r1, #0
 80073f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	0018      	movs	r0, r3
 80073fe:	f7fc fd2d 	bl	8003e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2224      	movs	r2, #36	; 0x24
 8007406:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2101      	movs	r1, #1
 8007414:	438a      	bics	r2, r1
 8007416:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	0018      	movs	r0, r3
 800741c:	f000 f9c6 	bl	80077ac <UART_SetConfig>
 8007420:	0003      	movs	r3, r0
 8007422:	2b01      	cmp	r3, #1
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e024      	b.n	8007474 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742e:	2b00      	cmp	r3, #0
 8007430:	d003      	beq.n	800743a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0018      	movs	r0, r3
 8007436:	f000 fc77 	bl	8007d28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	490d      	ldr	r1, [pc, #52]	; (800747c <HAL_UART_Init+0xa4>)
 8007446:	400a      	ands	r2, r1
 8007448:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	689a      	ldr	r2, [r3, #8]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	212a      	movs	r1, #42	; 0x2a
 8007456:	438a      	bics	r2, r1
 8007458:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2101      	movs	r1, #1
 8007466:	430a      	orrs	r2, r1
 8007468:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	0018      	movs	r0, r3
 800746e:	f000 fd0f 	bl	8007e90 <UART_CheckIdleState>
 8007472:	0003      	movs	r3, r0
}
 8007474:	0018      	movs	r0, r3
 8007476:	46bd      	mov	sp, r7
 8007478:	b002      	add	sp, #8
 800747a:	bd80      	pop	{r7, pc}
 800747c:	ffffb7ff 	.word	0xffffb7ff

08007480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08a      	sub	sp, #40	; 0x28
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	1dbb      	adds	r3, r7, #6
 800748e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007494:	2b20      	cmp	r3, #32
 8007496:	d000      	beq.n	800749a <HAL_UART_Transmit+0x1a>
 8007498:	e095      	b.n	80075c6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_UART_Transmit+0x28>
 80074a0:	1dbb      	adds	r3, r7, #6
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d101      	bne.n	80074ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e08d      	b.n	80075c8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	2380      	movs	r3, #128	; 0x80
 80074b2:	015b      	lsls	r3, r3, #5
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d109      	bne.n	80074cc <HAL_UART_Transmit+0x4c>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d105      	bne.n	80074cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	2201      	movs	r2, #1
 80074c4:	4013      	ands	r3, r2
 80074c6:	d001      	beq.n	80074cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e07d      	b.n	80075c8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2274      	movs	r2, #116	; 0x74
 80074d0:	5c9b      	ldrb	r3, [r3, r2]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d101      	bne.n	80074da <HAL_UART_Transmit+0x5a>
 80074d6:	2302      	movs	r3, #2
 80074d8:	e076      	b.n	80075c8 <HAL_UART_Transmit+0x148>
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2274      	movs	r2, #116	; 0x74
 80074de:	2101      	movs	r1, #1
 80074e0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2280      	movs	r2, #128	; 0x80
 80074e6:	2100      	movs	r1, #0
 80074e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2221      	movs	r2, #33	; 0x21
 80074ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074f0:	f7fc fd88 	bl	8004004 <HAL_GetTick>
 80074f4:	0003      	movs	r3, r0
 80074f6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	1dba      	adds	r2, r7, #6
 80074fc:	2150      	movs	r1, #80	; 0x50
 80074fe:	8812      	ldrh	r2, [r2, #0]
 8007500:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1dba      	adds	r2, r7, #6
 8007506:	2152      	movs	r1, #82	; 0x52
 8007508:	8812      	ldrh	r2, [r2, #0]
 800750a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	2380      	movs	r3, #128	; 0x80
 8007512:	015b      	lsls	r3, r3, #5
 8007514:	429a      	cmp	r2, r3
 8007516:	d108      	bne.n	800752a <HAL_UART_Transmit+0xaa>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d104      	bne.n	800752a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	61bb      	str	r3, [r7, #24]
 8007528:	e003      	b.n	8007532 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800752e:	2300      	movs	r3, #0
 8007530:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2274      	movs	r2, #116	; 0x74
 8007536:	2100      	movs	r1, #0
 8007538:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800753a:	e02c      	b.n	8007596 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	0013      	movs	r3, r2
 8007546:	2200      	movs	r2, #0
 8007548:	2180      	movs	r1, #128	; 0x80
 800754a:	f000 fce9 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 800754e:	1e03      	subs	r3, r0, #0
 8007550:	d001      	beq.n	8007556 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e038      	b.n	80075c8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8007556:	69fb      	ldr	r3, [r7, #28]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10b      	bne.n	8007574 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	001a      	movs	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	05d2      	lsls	r2, r2, #23
 8007568:	0dd2      	lsrs	r2, r2, #23
 800756a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800756c:	69bb      	ldr	r3, [r7, #24]
 800756e:	3302      	adds	r3, #2
 8007570:	61bb      	str	r3, [r7, #24]
 8007572:	e007      	b.n	8007584 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	3301      	adds	r3, #1
 8007582:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2252      	movs	r2, #82	; 0x52
 8007588:	5a9b      	ldrh	r3, [r3, r2]
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b299      	uxth	r1, r3
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2252      	movs	r2, #82	; 0x52
 8007594:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2252      	movs	r2, #82	; 0x52
 800759a:	5a9b      	ldrh	r3, [r3, r2]
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1cc      	bne.n	800753c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	0013      	movs	r3, r2
 80075ac:	2200      	movs	r2, #0
 80075ae:	2140      	movs	r1, #64	; 0x40
 80075b0:	f000 fcb6 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 80075b4:	1e03      	subs	r3, r0, #0
 80075b6:	d001      	beq.n	80075bc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80075b8:	2303      	movs	r3, #3
 80075ba:	e005      	b.n	80075c8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2220      	movs	r2, #32
 80075c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e000      	b.n	80075c8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80075c6:	2302      	movs	r3, #2
  }
}
 80075c8:	0018      	movs	r0, r3
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b008      	add	sp, #32
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	; 0x28
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	1dbb      	adds	r3, r7, #6
 80075de:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d000      	beq.n	80075ea <HAL_UART_Receive+0x1a>
 80075e8:	e0d9      	b.n	800779e <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d003      	beq.n	80075f8 <HAL_UART_Receive+0x28>
 80075f0:	1dbb      	adds	r3, r7, #6
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e0d1      	b.n	80077a0 <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689a      	ldr	r2, [r3, #8]
 8007600:	2380      	movs	r3, #128	; 0x80
 8007602:	015b      	lsls	r3, r3, #5
 8007604:	429a      	cmp	r2, r3
 8007606:	d109      	bne.n	800761c <HAL_UART_Receive+0x4c>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d105      	bne.n	800761c <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2201      	movs	r2, #1
 8007614:	4013      	ands	r3, r2
 8007616:	d001      	beq.n	800761c <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e0c1      	b.n	80077a0 <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2274      	movs	r2, #116	; 0x74
 8007620:	5c9b      	ldrb	r3, [r3, r2]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_UART_Receive+0x5a>
 8007626:	2302      	movs	r3, #2
 8007628:	e0ba      	b.n	80077a0 <HAL_UART_Receive+0x1d0>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2274      	movs	r2, #116	; 0x74
 800762e:	2101      	movs	r1, #1
 8007630:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2280      	movs	r2, #128	; 0x80
 8007636:	2100      	movs	r1, #0
 8007638:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2222      	movs	r2, #34	; 0x22
 800763e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007646:	f7fc fcdd 	bl	8004004 <HAL_GetTick>
 800764a:	0003      	movs	r3, r0
 800764c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1dba      	adds	r2, r7, #6
 8007652:	2158      	movs	r1, #88	; 0x58
 8007654:	8812      	ldrh	r2, [r2, #0]
 8007656:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	1dba      	adds	r2, r7, #6
 800765c:	215a      	movs	r1, #90	; 0x5a
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	689a      	ldr	r2, [r3, #8]
 8007666:	2380      	movs	r3, #128	; 0x80
 8007668:	015b      	lsls	r3, r3, #5
 800766a:	429a      	cmp	r2, r3
 800766c:	d10d      	bne.n	800768a <HAL_UART_Receive+0xba>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	691b      	ldr	r3, [r3, #16]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d104      	bne.n	8007680 <HAL_UART_Receive+0xb0>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	225c      	movs	r2, #92	; 0x5c
 800767a:	494b      	ldr	r1, [pc, #300]	; (80077a8 <HAL_UART_Receive+0x1d8>)
 800767c:	5299      	strh	r1, [r3, r2]
 800767e:	e02e      	b.n	80076de <HAL_UART_Receive+0x10e>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	225c      	movs	r2, #92	; 0x5c
 8007684:	21ff      	movs	r1, #255	; 0xff
 8007686:	5299      	strh	r1, [r3, r2]
 8007688:	e029      	b.n	80076de <HAL_UART_Receive+0x10e>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d10d      	bne.n	80076ae <HAL_UART_Receive+0xde>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d104      	bne.n	80076a4 <HAL_UART_Receive+0xd4>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	225c      	movs	r2, #92	; 0x5c
 800769e:	21ff      	movs	r1, #255	; 0xff
 80076a0:	5299      	strh	r1, [r3, r2]
 80076a2:	e01c      	b.n	80076de <HAL_UART_Receive+0x10e>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	225c      	movs	r2, #92	; 0x5c
 80076a8:	217f      	movs	r1, #127	; 0x7f
 80076aa:	5299      	strh	r1, [r3, r2]
 80076ac:	e017      	b.n	80076de <HAL_UART_Receive+0x10e>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	2380      	movs	r3, #128	; 0x80
 80076b4:	055b      	lsls	r3, r3, #21
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d10d      	bne.n	80076d6 <HAL_UART_Receive+0x106>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <HAL_UART_Receive+0xfc>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	225c      	movs	r2, #92	; 0x5c
 80076c6:	217f      	movs	r1, #127	; 0x7f
 80076c8:	5299      	strh	r1, [r3, r2]
 80076ca:	e008      	b.n	80076de <HAL_UART_Receive+0x10e>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	225c      	movs	r2, #92	; 0x5c
 80076d0:	213f      	movs	r1, #63	; 0x3f
 80076d2:	5299      	strh	r1, [r3, r2]
 80076d4:	e003      	b.n	80076de <HAL_UART_Receive+0x10e>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	225c      	movs	r2, #92	; 0x5c
 80076da:	2100      	movs	r1, #0
 80076dc:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80076de:	2312      	movs	r3, #18
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	215c      	movs	r1, #92	; 0x5c
 80076e6:	5a52      	ldrh	r2, [r2, r1]
 80076e8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	2380      	movs	r3, #128	; 0x80
 80076f0:	015b      	lsls	r3, r3, #5
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d108      	bne.n	8007708 <HAL_UART_Receive+0x138>
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d104      	bne.n	8007708 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	61bb      	str	r3, [r7, #24]
 8007706:	e003      	b.n	8007710 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800770c:	2300      	movs	r3, #0
 800770e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2274      	movs	r2, #116	; 0x74
 8007714:	2100      	movs	r1, #0
 8007716:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007718:	e036      	b.n	8007788 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800771a:	697a      	ldr	r2, [r7, #20]
 800771c:	68f8      	ldr	r0, [r7, #12]
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	9300      	str	r3, [sp, #0]
 8007722:	0013      	movs	r3, r2
 8007724:	2200      	movs	r2, #0
 8007726:	2120      	movs	r1, #32
 8007728:	f000 fbfa 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 800772c:	1e03      	subs	r3, r0, #0
 800772e:	d001      	beq.n	8007734 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e035      	b.n	80077a0 <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10e      	bne.n	8007758 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007740:	b29b      	uxth	r3, r3
 8007742:	2212      	movs	r2, #18
 8007744:	18ba      	adds	r2, r7, r2
 8007746:	8812      	ldrh	r2, [r2, #0]
 8007748:	4013      	ands	r3, r2
 800774a:	b29a      	uxth	r2, r3
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007750:	69bb      	ldr	r3, [r7, #24]
 8007752:	3302      	adds	r3, #2
 8007754:	61bb      	str	r3, [r7, #24]
 8007756:	e00e      	b.n	8007776 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800775e:	b2db      	uxtb	r3, r3
 8007760:	2212      	movs	r2, #18
 8007762:	18ba      	adds	r2, r7, r2
 8007764:	8812      	ldrh	r2, [r2, #0]
 8007766:	b2d2      	uxtb	r2, r2
 8007768:	4013      	ands	r3, r2
 800776a:	b2da      	uxtb	r2, r3
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3301      	adds	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	225a      	movs	r2, #90	; 0x5a
 800777a:	5a9b      	ldrh	r3, [r3, r2]
 800777c:	b29b      	uxth	r3, r3
 800777e:	3b01      	subs	r3, #1
 8007780:	b299      	uxth	r1, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	225a      	movs	r2, #90	; 0x5a
 8007786:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	225a      	movs	r2, #90	; 0x5a
 800778c:	5a9b      	ldrh	r3, [r3, r2]
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1c2      	bne.n	800771a <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2220      	movs	r2, #32
 8007798:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	e000      	b.n	80077a0 <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800779e:	2302      	movs	r3, #2
  }
}
 80077a0:	0018      	movs	r0, r3
 80077a2:	46bd      	mov	sp, r7
 80077a4:	b008      	add	sp, #32
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	000001ff 	.word	0x000001ff

080077ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077ac:	b5b0      	push	{r4, r5, r7, lr}
 80077ae:	b08e      	sub	sp, #56	; 0x38
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077b4:	231a      	movs	r3, #26
 80077b6:	2218      	movs	r2, #24
 80077b8:	4694      	mov	ip, r2
 80077ba:	44bc      	add	ip, r7
 80077bc:	4463      	add	r3, ip
 80077be:	2200      	movs	r2, #0
 80077c0:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	431a      	orrs	r2, r3
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	431a      	orrs	r2, r3
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4ab0      	ldr	r2, [pc, #704]	; (8007aa4 <UART_SetConfig+0x2f8>)
 80077e2:	4013      	ands	r3, r2
 80077e4:	0019      	movs	r1, r3
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077ec:	430a      	orrs	r2, r1
 80077ee:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	4aac      	ldr	r2, [pc, #688]	; (8007aa8 <UART_SetConfig+0x2fc>)
 80077f8:	4013      	ands	r3, r2
 80077fa:	0019      	movs	r1, r3
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	699b      	ldr	r3, [r3, #24]
 800780c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800780e:	69fb      	ldr	r3, [r7, #28]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4aa6      	ldr	r2, [pc, #664]	; (8007aac <UART_SetConfig+0x300>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d004      	beq.n	8007822 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800781e:	4313      	orrs	r3, r2
 8007820:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4aa1      	ldr	r2, [pc, #644]	; (8007ab0 <UART_SetConfig+0x304>)
 800782a:	4013      	ands	r3, r2
 800782c:	0019      	movs	r1, r3
 800782e:	69fb      	ldr	r3, [r7, #28]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007834:	430a      	orrs	r2, r1
 8007836:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a9d      	ldr	r2, [pc, #628]	; (8007ab4 <UART_SetConfig+0x308>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d136      	bne.n	80078b0 <UART_SetConfig+0x104>
 8007842:	4b9d      	ldr	r3, [pc, #628]	; (8007ab8 <UART_SetConfig+0x30c>)
 8007844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007846:	2203      	movs	r2, #3
 8007848:	4013      	ands	r3, r2
 800784a:	2b03      	cmp	r3, #3
 800784c:	d020      	beq.n	8007890 <UART_SetConfig+0xe4>
 800784e:	d827      	bhi.n	80078a0 <UART_SetConfig+0xf4>
 8007850:	2b02      	cmp	r3, #2
 8007852:	d00d      	beq.n	8007870 <UART_SetConfig+0xc4>
 8007854:	d824      	bhi.n	80078a0 <UART_SetConfig+0xf4>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <UART_SetConfig+0xb4>
 800785a:	2b01      	cmp	r3, #1
 800785c:	d010      	beq.n	8007880 <UART_SetConfig+0xd4>
 800785e:	e01f      	b.n	80078a0 <UART_SetConfig+0xf4>
 8007860:	231b      	movs	r3, #27
 8007862:	2218      	movs	r2, #24
 8007864:	4694      	mov	ip, r2
 8007866:	44bc      	add	ip, r7
 8007868:	4463      	add	r3, ip
 800786a:	2201      	movs	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e0c5      	b.n	80079fc <UART_SetConfig+0x250>
 8007870:	231b      	movs	r3, #27
 8007872:	2218      	movs	r2, #24
 8007874:	4694      	mov	ip, r2
 8007876:	44bc      	add	ip, r7
 8007878:	4463      	add	r3, ip
 800787a:	2202      	movs	r2, #2
 800787c:	701a      	strb	r2, [r3, #0]
 800787e:	e0bd      	b.n	80079fc <UART_SetConfig+0x250>
 8007880:	231b      	movs	r3, #27
 8007882:	2218      	movs	r2, #24
 8007884:	4694      	mov	ip, r2
 8007886:	44bc      	add	ip, r7
 8007888:	4463      	add	r3, ip
 800788a:	2204      	movs	r2, #4
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	e0b5      	b.n	80079fc <UART_SetConfig+0x250>
 8007890:	231b      	movs	r3, #27
 8007892:	2218      	movs	r2, #24
 8007894:	4694      	mov	ip, r2
 8007896:	44bc      	add	ip, r7
 8007898:	4463      	add	r3, ip
 800789a:	2208      	movs	r2, #8
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	e0ad      	b.n	80079fc <UART_SetConfig+0x250>
 80078a0:	231b      	movs	r3, #27
 80078a2:	2218      	movs	r2, #24
 80078a4:	4694      	mov	ip, r2
 80078a6:	44bc      	add	ip, r7
 80078a8:	4463      	add	r3, ip
 80078aa:	2210      	movs	r2, #16
 80078ac:	701a      	strb	r2, [r3, #0]
 80078ae:	e0a5      	b.n	80079fc <UART_SetConfig+0x250>
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a81      	ldr	r2, [pc, #516]	; (8007abc <UART_SetConfig+0x310>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d136      	bne.n	8007928 <UART_SetConfig+0x17c>
 80078ba:	4b7f      	ldr	r3, [pc, #508]	; (8007ab8 <UART_SetConfig+0x30c>)
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	220c      	movs	r2, #12
 80078c0:	4013      	ands	r3, r2
 80078c2:	2b0c      	cmp	r3, #12
 80078c4:	d020      	beq.n	8007908 <UART_SetConfig+0x15c>
 80078c6:	d827      	bhi.n	8007918 <UART_SetConfig+0x16c>
 80078c8:	2b08      	cmp	r3, #8
 80078ca:	d00d      	beq.n	80078e8 <UART_SetConfig+0x13c>
 80078cc:	d824      	bhi.n	8007918 <UART_SetConfig+0x16c>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <UART_SetConfig+0x12c>
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d010      	beq.n	80078f8 <UART_SetConfig+0x14c>
 80078d6:	e01f      	b.n	8007918 <UART_SetConfig+0x16c>
 80078d8:	231b      	movs	r3, #27
 80078da:	2218      	movs	r2, #24
 80078dc:	4694      	mov	ip, r2
 80078de:	44bc      	add	ip, r7
 80078e0:	4463      	add	r3, ip
 80078e2:	2200      	movs	r2, #0
 80078e4:	701a      	strb	r2, [r3, #0]
 80078e6:	e089      	b.n	80079fc <UART_SetConfig+0x250>
 80078e8:	231b      	movs	r3, #27
 80078ea:	2218      	movs	r2, #24
 80078ec:	4694      	mov	ip, r2
 80078ee:	44bc      	add	ip, r7
 80078f0:	4463      	add	r3, ip
 80078f2:	2202      	movs	r2, #2
 80078f4:	701a      	strb	r2, [r3, #0]
 80078f6:	e081      	b.n	80079fc <UART_SetConfig+0x250>
 80078f8:	231b      	movs	r3, #27
 80078fa:	2218      	movs	r2, #24
 80078fc:	4694      	mov	ip, r2
 80078fe:	44bc      	add	ip, r7
 8007900:	4463      	add	r3, ip
 8007902:	2204      	movs	r2, #4
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	e079      	b.n	80079fc <UART_SetConfig+0x250>
 8007908:	231b      	movs	r3, #27
 800790a:	2218      	movs	r2, #24
 800790c:	4694      	mov	ip, r2
 800790e:	44bc      	add	ip, r7
 8007910:	4463      	add	r3, ip
 8007912:	2208      	movs	r2, #8
 8007914:	701a      	strb	r2, [r3, #0]
 8007916:	e071      	b.n	80079fc <UART_SetConfig+0x250>
 8007918:	231b      	movs	r3, #27
 800791a:	2218      	movs	r2, #24
 800791c:	4694      	mov	ip, r2
 800791e:	44bc      	add	ip, r7
 8007920:	4463      	add	r3, ip
 8007922:	2210      	movs	r2, #16
 8007924:	701a      	strb	r2, [r3, #0]
 8007926:	e069      	b.n	80079fc <UART_SetConfig+0x250>
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a64      	ldr	r2, [pc, #400]	; (8007ac0 <UART_SetConfig+0x314>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d107      	bne.n	8007942 <UART_SetConfig+0x196>
 8007932:	231b      	movs	r3, #27
 8007934:	2218      	movs	r2, #24
 8007936:	4694      	mov	ip, r2
 8007938:	44bc      	add	ip, r7
 800793a:	4463      	add	r3, ip
 800793c:	2200      	movs	r2, #0
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e05c      	b.n	80079fc <UART_SetConfig+0x250>
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a5f      	ldr	r2, [pc, #380]	; (8007ac4 <UART_SetConfig+0x318>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d107      	bne.n	800795c <UART_SetConfig+0x1b0>
 800794c:	231b      	movs	r3, #27
 800794e:	2218      	movs	r2, #24
 8007950:	4694      	mov	ip, r2
 8007952:	44bc      	add	ip, r7
 8007954:	4463      	add	r3, ip
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	e04f      	b.n	80079fc <UART_SetConfig+0x250>
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a52      	ldr	r2, [pc, #328]	; (8007aac <UART_SetConfig+0x300>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d143      	bne.n	80079ee <UART_SetConfig+0x242>
 8007966:	4b54      	ldr	r3, [pc, #336]	; (8007ab8 <UART_SetConfig+0x30c>)
 8007968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800796a:	23c0      	movs	r3, #192	; 0xc0
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	4013      	ands	r3, r2
 8007970:	22c0      	movs	r2, #192	; 0xc0
 8007972:	0112      	lsls	r2, r2, #4
 8007974:	4293      	cmp	r3, r2
 8007976:	d02a      	beq.n	80079ce <UART_SetConfig+0x222>
 8007978:	22c0      	movs	r2, #192	; 0xc0
 800797a:	0112      	lsls	r2, r2, #4
 800797c:	4293      	cmp	r3, r2
 800797e:	d82e      	bhi.n	80079de <UART_SetConfig+0x232>
 8007980:	2280      	movs	r2, #128	; 0x80
 8007982:	0112      	lsls	r2, r2, #4
 8007984:	4293      	cmp	r3, r2
 8007986:	d012      	beq.n	80079ae <UART_SetConfig+0x202>
 8007988:	2280      	movs	r2, #128	; 0x80
 800798a:	0112      	lsls	r2, r2, #4
 800798c:	4293      	cmp	r3, r2
 800798e:	d826      	bhi.n	80079de <UART_SetConfig+0x232>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d004      	beq.n	800799e <UART_SetConfig+0x1f2>
 8007994:	2280      	movs	r2, #128	; 0x80
 8007996:	00d2      	lsls	r2, r2, #3
 8007998:	4293      	cmp	r3, r2
 800799a:	d010      	beq.n	80079be <UART_SetConfig+0x212>
 800799c:	e01f      	b.n	80079de <UART_SetConfig+0x232>
 800799e:	231b      	movs	r3, #27
 80079a0:	2218      	movs	r2, #24
 80079a2:	4694      	mov	ip, r2
 80079a4:	44bc      	add	ip, r7
 80079a6:	4463      	add	r3, ip
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]
 80079ac:	e026      	b.n	80079fc <UART_SetConfig+0x250>
 80079ae:	231b      	movs	r3, #27
 80079b0:	2218      	movs	r2, #24
 80079b2:	4694      	mov	ip, r2
 80079b4:	44bc      	add	ip, r7
 80079b6:	4463      	add	r3, ip
 80079b8:	2202      	movs	r2, #2
 80079ba:	701a      	strb	r2, [r3, #0]
 80079bc:	e01e      	b.n	80079fc <UART_SetConfig+0x250>
 80079be:	231b      	movs	r3, #27
 80079c0:	2218      	movs	r2, #24
 80079c2:	4694      	mov	ip, r2
 80079c4:	44bc      	add	ip, r7
 80079c6:	4463      	add	r3, ip
 80079c8:	2204      	movs	r2, #4
 80079ca:	701a      	strb	r2, [r3, #0]
 80079cc:	e016      	b.n	80079fc <UART_SetConfig+0x250>
 80079ce:	231b      	movs	r3, #27
 80079d0:	2218      	movs	r2, #24
 80079d2:	4694      	mov	ip, r2
 80079d4:	44bc      	add	ip, r7
 80079d6:	4463      	add	r3, ip
 80079d8:	2208      	movs	r2, #8
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e00e      	b.n	80079fc <UART_SetConfig+0x250>
 80079de:	231b      	movs	r3, #27
 80079e0:	2218      	movs	r2, #24
 80079e2:	4694      	mov	ip, r2
 80079e4:	44bc      	add	ip, r7
 80079e6:	4463      	add	r3, ip
 80079e8:	2210      	movs	r2, #16
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e006      	b.n	80079fc <UART_SetConfig+0x250>
 80079ee:	231b      	movs	r3, #27
 80079f0:	2218      	movs	r2, #24
 80079f2:	4694      	mov	ip, r2
 80079f4:	44bc      	add	ip, r7
 80079f6:	4463      	add	r3, ip
 80079f8:	2210      	movs	r2, #16
 80079fa:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a2a      	ldr	r2, [pc, #168]	; (8007aac <UART_SetConfig+0x300>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d000      	beq.n	8007a08 <UART_SetConfig+0x25c>
 8007a06:	e09e      	b.n	8007b46 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a08:	231b      	movs	r3, #27
 8007a0a:	2218      	movs	r2, #24
 8007a0c:	4694      	mov	ip, r2
 8007a0e:	44bc      	add	ip, r7
 8007a10:	4463      	add	r3, ip
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b08      	cmp	r3, #8
 8007a16:	d01d      	beq.n	8007a54 <UART_SetConfig+0x2a8>
 8007a18:	dc20      	bgt.n	8007a5c <UART_SetConfig+0x2b0>
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d015      	beq.n	8007a4a <UART_SetConfig+0x29e>
 8007a1e:	dc1d      	bgt.n	8007a5c <UART_SetConfig+0x2b0>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <UART_SetConfig+0x27e>
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d005      	beq.n	8007a34 <UART_SetConfig+0x288>
 8007a28:	e018      	b.n	8007a5c <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a2a:	f7fe f979 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007a2e:	0003      	movs	r3, r0
 8007a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a32:	e01d      	b.n	8007a70 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a34:	4b20      	ldr	r3, [pc, #128]	; (8007ab8 <UART_SetConfig+0x30c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2210      	movs	r2, #16
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	d002      	beq.n	8007a44 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007a3e:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <UART_SetConfig+0x31c>)
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007a42:	e015      	b.n	8007a70 <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8007a44:	4b21      	ldr	r3, [pc, #132]	; (8007acc <UART_SetConfig+0x320>)
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a48:	e012      	b.n	8007a70 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4a:	f7fe f8b9 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8007a4e:	0003      	movs	r3, r0
 8007a50:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a52:	e00d      	b.n	8007a70 <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a54:	2380      	movs	r3, #128	; 0x80
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007a5a:	e009      	b.n	8007a70 <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007a60:	231a      	movs	r3, #26
 8007a62:	2218      	movs	r2, #24
 8007a64:	4694      	mov	ip, r2
 8007a66:	44bc      	add	ip, r7
 8007a68:	4463      	add	r3, ip
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	701a      	strb	r2, [r3, #0]
        break;
 8007a6e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d100      	bne.n	8007a78 <UART_SetConfig+0x2cc>
 8007a76:	e13c      	b.n	8007cf2 <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	0013      	movs	r3, r2
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	189b      	adds	r3, r3, r2
 8007a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d305      	bcc.n	8007a94 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d91d      	bls.n	8007ad0 <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8007a94:	231a      	movs	r3, #26
 8007a96:	2218      	movs	r2, #24
 8007a98:	4694      	mov	ip, r2
 8007a9a:	44bc      	add	ip, r7
 8007a9c:	4463      	add	r3, ip
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	701a      	strb	r2, [r3, #0]
 8007aa2:	e126      	b.n	8007cf2 <UART_SetConfig+0x546>
 8007aa4:	efff69f3 	.word	0xefff69f3
 8007aa8:	ffffcfff 	.word	0xffffcfff
 8007aac:	40004800 	.word	0x40004800
 8007ab0:	fffff4ff 	.word	0xfffff4ff
 8007ab4:	40013800 	.word	0x40013800
 8007ab8:	40021000 	.word	0x40021000
 8007abc:	40004400 	.word	0x40004400
 8007ac0:	40004c00 	.word	0x40004c00
 8007ac4:	40005000 	.word	0x40005000
 8007ac8:	003d0900 	.word	0x003d0900
 8007acc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad2:	613b      	str	r3, [r7, #16]
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	617b      	str	r3, [r7, #20]
 8007ad8:	6939      	ldr	r1, [r7, #16]
 8007ada:	697a      	ldr	r2, [r7, #20]
 8007adc:	000b      	movs	r3, r1
 8007ade:	0e1b      	lsrs	r3, r3, #24
 8007ae0:	0010      	movs	r0, r2
 8007ae2:	0205      	lsls	r5, r0, #8
 8007ae4:	431d      	orrs	r5, r3
 8007ae6:	000b      	movs	r3, r1
 8007ae8:	021c      	lsls	r4, r3, #8
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	085b      	lsrs	r3, r3, #1
 8007af0:	60bb      	str	r3, [r7, #8]
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
 8007af6:	68b8      	ldr	r0, [r7, #8]
 8007af8:	68f9      	ldr	r1, [r7, #12]
 8007afa:	1900      	adds	r0, r0, r4
 8007afc:	4169      	adcs	r1, r5
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	603b      	str	r3, [r7, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	607b      	str	r3, [r7, #4]
 8007b08:	683a      	ldr	r2, [r7, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f7f8 fccc 	bl	80004a8 <__aeabi_uldivmod>
 8007b10:	0002      	movs	r2, r0
 8007b12:	000b      	movs	r3, r1
 8007b14:	0013      	movs	r3, r2
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b1a:	23c0      	movs	r3, #192	; 0xc0
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d309      	bcc.n	8007b36 <UART_SetConfig+0x38a>
 8007b22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b24:	2380      	movs	r3, #128	; 0x80
 8007b26:	035b      	lsls	r3, r3, #13
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d204      	bcs.n	8007b36 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b32:	60da      	str	r2, [r3, #12]
 8007b34:	e0dd      	b.n	8007cf2 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8007b36:	231a      	movs	r3, #26
 8007b38:	2218      	movs	r2, #24
 8007b3a:	4694      	mov	ip, r2
 8007b3c:	44bc      	add	ip, r7
 8007b3e:	4463      	add	r3, ip
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
 8007b44:	e0d5      	b.n	8007cf2 <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	69da      	ldr	r2, [r3, #28]
 8007b4a:	2380      	movs	r3, #128	; 0x80
 8007b4c:	021b      	lsls	r3, r3, #8
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d000      	beq.n	8007b54 <UART_SetConfig+0x3a8>
 8007b52:	e074      	b.n	8007c3e <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8007b54:	231b      	movs	r3, #27
 8007b56:	2218      	movs	r2, #24
 8007b58:	4694      	mov	ip, r2
 8007b5a:	44bc      	add	ip, r7
 8007b5c:	4463      	add	r3, ip
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d822      	bhi.n	8007baa <UART_SetConfig+0x3fe>
 8007b64:	009a      	lsls	r2, r3, #2
 8007b66:	4b6b      	ldr	r3, [pc, #428]	; (8007d14 <UART_SetConfig+0x568>)
 8007b68:	18d3      	adds	r3, r2, r3
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b6e:	f7fe f8d7 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007b72:	0003      	movs	r3, r0
 8007b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b76:	e022      	b.n	8007bbe <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b78:	f7fe f8e8 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 8007b7c:	0003      	movs	r3, r0
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b80:	e01d      	b.n	8007bbe <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b82:	4b65      	ldr	r3, [pc, #404]	; (8007d18 <UART_SetConfig+0x56c>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2210      	movs	r2, #16
 8007b88:	4013      	ands	r3, r2
 8007b8a:	d002      	beq.n	8007b92 <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007b8c:	4b63      	ldr	r3, [pc, #396]	; (8007d1c <UART_SetConfig+0x570>)
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007b90:	e015      	b.n	8007bbe <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 8007b92:	4b63      	ldr	r3, [pc, #396]	; (8007d20 <UART_SetConfig+0x574>)
 8007b94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007b96:	e012      	b.n	8007bbe <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b98:	f7fe f812 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8007b9c:	0003      	movs	r3, r0
 8007b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ba0:	e00d      	b.n	8007bbe <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ba2:	2380      	movs	r3, #128	; 0x80
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ba8:	e009      	b.n	8007bbe <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8007baa:	2300      	movs	r3, #0
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007bae:	231a      	movs	r3, #26
 8007bb0:	2218      	movs	r2, #24
 8007bb2:	4694      	mov	ip, r2
 8007bb4:	44bc      	add	ip, r7
 8007bb6:	4463      	add	r3, ip
 8007bb8:	2201      	movs	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]
        break;
 8007bbc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d100      	bne.n	8007bc6 <UART_SetConfig+0x41a>
 8007bc4:	e095      	b.n	8007cf2 <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc8:	005a      	lsls	r2, r3, #1
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	18d2      	adds	r2, r2, r3
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	0019      	movs	r1, r3
 8007bd8:	0010      	movs	r0, r2
 8007bda:	f7f8 fab1 	bl	8000140 <__udivsi3>
 8007bde:	0003      	movs	r3, r0
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	2b0f      	cmp	r3, #15
 8007be8:	d921      	bls.n	8007c2e <UART_SetConfig+0x482>
 8007bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bec:	2380      	movs	r3, #128	; 0x80
 8007bee:	025b      	lsls	r3, r3, #9
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d21c      	bcs.n	8007c2e <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	200e      	movs	r0, #14
 8007bfa:	2418      	movs	r4, #24
 8007bfc:	193b      	adds	r3, r7, r4
 8007bfe:	181b      	adds	r3, r3, r0
 8007c00:	210f      	movs	r1, #15
 8007c02:	438a      	bics	r2, r1
 8007c04:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c08:	085b      	lsrs	r3, r3, #1
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2207      	movs	r2, #7
 8007c0e:	4013      	ands	r3, r2
 8007c10:	b299      	uxth	r1, r3
 8007c12:	193b      	adds	r3, r7, r4
 8007c14:	181b      	adds	r3, r3, r0
 8007c16:	193a      	adds	r2, r7, r4
 8007c18:	1812      	adds	r2, r2, r0
 8007c1a:	8812      	ldrh	r2, [r2, #0]
 8007c1c:	430a      	orrs	r2, r1
 8007c1e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	193a      	adds	r2, r7, r4
 8007c26:	1812      	adds	r2, r2, r0
 8007c28:	8812      	ldrh	r2, [r2, #0]
 8007c2a:	60da      	str	r2, [r3, #12]
 8007c2c:	e061      	b.n	8007cf2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007c2e:	231a      	movs	r3, #26
 8007c30:	2218      	movs	r2, #24
 8007c32:	4694      	mov	ip, r2
 8007c34:	44bc      	add	ip, r7
 8007c36:	4463      	add	r3, ip
 8007c38:	2201      	movs	r2, #1
 8007c3a:	701a      	strb	r2, [r3, #0]
 8007c3c:	e059      	b.n	8007cf2 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c3e:	231b      	movs	r3, #27
 8007c40:	2218      	movs	r2, #24
 8007c42:	4694      	mov	ip, r2
 8007c44:	44bc      	add	ip, r7
 8007c46:	4463      	add	r3, ip
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d822      	bhi.n	8007c94 <UART_SetConfig+0x4e8>
 8007c4e:	009a      	lsls	r2, r3, #2
 8007c50:	4b34      	ldr	r3, [pc, #208]	; (8007d24 <UART_SetConfig+0x578>)
 8007c52:	18d3      	adds	r3, r2, r3
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c58:	f7fe f862 	bl	8005d20 <HAL_RCC_GetPCLK1Freq>
 8007c5c:	0003      	movs	r3, r0
 8007c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c60:	e022      	b.n	8007ca8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c62:	f7fe f873 	bl	8005d4c <HAL_RCC_GetPCLK2Freq>
 8007c66:	0003      	movs	r3, r0
 8007c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c6a:	e01d      	b.n	8007ca8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c6c:	4b2a      	ldr	r3, [pc, #168]	; (8007d18 <UART_SetConfig+0x56c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2210      	movs	r2, #16
 8007c72:	4013      	ands	r3, r2
 8007c74:	d002      	beq.n	8007c7c <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007c76:	4b29      	ldr	r3, [pc, #164]	; (8007d1c <UART_SetConfig+0x570>)
 8007c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c7a:	e015      	b.n	8007ca8 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8007c7c:	4b28      	ldr	r3, [pc, #160]	; (8007d20 <UART_SetConfig+0x574>)
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c80:	e012      	b.n	8007ca8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c82:	f7fd ff9d 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8007c86:	0003      	movs	r3, r0
 8007c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c8a:	e00d      	b.n	8007ca8 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c8c:	2380      	movs	r3, #128	; 0x80
 8007c8e:	021b      	lsls	r3, r3, #8
 8007c90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007c92:	e009      	b.n	8007ca8 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007c98:	231a      	movs	r3, #26
 8007c9a:	2218      	movs	r2, #24
 8007c9c:	4694      	mov	ip, r2
 8007c9e:	44bc      	add	ip, r7
 8007ca0:	4463      	add	r3, ip
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	701a      	strb	r2, [r3, #0]
        break;
 8007ca6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d021      	beq.n	8007cf2 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	085a      	lsrs	r2, r3, #1
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	18d2      	adds	r2, r2, r3
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	0019      	movs	r1, r3
 8007cbe:	0010      	movs	r0, r2
 8007cc0:	f7f8 fa3e 	bl	8000140 <__udivsi3>
 8007cc4:	0003      	movs	r3, r0
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ccc:	2b0f      	cmp	r3, #15
 8007cce:	d909      	bls.n	8007ce4 <UART_SetConfig+0x538>
 8007cd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cd2:	2380      	movs	r3, #128	; 0x80
 8007cd4:	025b      	lsls	r3, r3, #9
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d204      	bcs.n	8007ce4 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ce0:	60da      	str	r2, [r3, #12]
 8007ce2:	e006      	b.n	8007cf2 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8007ce4:	231a      	movs	r3, #26
 8007ce6:	2218      	movs	r2, #24
 8007ce8:	4694      	mov	ip, r2
 8007cea:	44bc      	add	ip, r7
 8007cec:	4463      	add	r3, ip
 8007cee:	2201      	movs	r2, #1
 8007cf0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cf2:	69fb      	ldr	r3, [r7, #28]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007cfe:	231a      	movs	r3, #26
 8007d00:	2218      	movs	r2, #24
 8007d02:	4694      	mov	ip, r2
 8007d04:	44bc      	add	ip, r7
 8007d06:	4463      	add	r3, ip
 8007d08:	781b      	ldrb	r3, [r3, #0]
}
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	b00e      	add	sp, #56	; 0x38
 8007d10:	bdb0      	pop	{r4, r5, r7, pc}
 8007d12:	46c0      	nop			; (mov r8, r8)
 8007d14:	0800b160 	.word	0x0800b160
 8007d18:	40021000 	.word	0x40021000
 8007d1c:	003d0900 	.word	0x003d0900
 8007d20:	00f42400 	.word	0x00f42400
 8007d24:	0800b184 	.word	0x0800b184

08007d28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d34:	2201      	movs	r2, #1
 8007d36:	4013      	ands	r3, r2
 8007d38:	d00b      	beq.n	8007d52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	4a4a      	ldr	r2, [pc, #296]	; (8007e6c <UART_AdvFeatureConfig+0x144>)
 8007d42:	4013      	ands	r3, r2
 8007d44:	0019      	movs	r1, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	2202      	movs	r2, #2
 8007d58:	4013      	ands	r3, r2
 8007d5a:	d00b      	beq.n	8007d74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	4a43      	ldr	r2, [pc, #268]	; (8007e70 <UART_AdvFeatureConfig+0x148>)
 8007d64:	4013      	ands	r3, r2
 8007d66:	0019      	movs	r1, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	2204      	movs	r2, #4
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	d00b      	beq.n	8007d96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	4a3b      	ldr	r2, [pc, #236]	; (8007e74 <UART_AdvFeatureConfig+0x14c>)
 8007d86:	4013      	ands	r3, r2
 8007d88:	0019      	movs	r1, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	2208      	movs	r2, #8
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	d00b      	beq.n	8007db8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	4a34      	ldr	r2, [pc, #208]	; (8007e78 <UART_AdvFeatureConfig+0x150>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	0019      	movs	r1, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	430a      	orrs	r2, r1
 8007db6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbc:	2210      	movs	r2, #16
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	d00b      	beq.n	8007dda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	4a2c      	ldr	r2, [pc, #176]	; (8007e7c <UART_AdvFeatureConfig+0x154>)
 8007dca:	4013      	ands	r3, r2
 8007dcc:	0019      	movs	r1, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	2220      	movs	r2, #32
 8007de0:	4013      	ands	r3, r2
 8007de2:	d00b      	beq.n	8007dfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	4a25      	ldr	r2, [pc, #148]	; (8007e80 <UART_AdvFeatureConfig+0x158>)
 8007dec:	4013      	ands	r3, r2
 8007dee:	0019      	movs	r1, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e00:	2240      	movs	r2, #64	; 0x40
 8007e02:	4013      	ands	r3, r2
 8007e04:	d01d      	beq.n	8007e42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <UART_AdvFeatureConfig+0x15c>)
 8007e0e:	4013      	ands	r3, r2
 8007e10:	0019      	movs	r1, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	430a      	orrs	r2, r1
 8007e1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e22:	2380      	movs	r3, #128	; 0x80
 8007e24:	035b      	lsls	r3, r3, #13
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d10b      	bne.n	8007e42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4a15      	ldr	r2, [pc, #84]	; (8007e88 <UART_AdvFeatureConfig+0x160>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	0019      	movs	r1, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	2280      	movs	r2, #128	; 0x80
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d00b      	beq.n	8007e64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	4a0e      	ldr	r2, [pc, #56]	; (8007e8c <UART_AdvFeatureConfig+0x164>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	0019      	movs	r1, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	605a      	str	r2, [r3, #4]
  }
}
 8007e64:	46c0      	nop			; (mov r8, r8)
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b002      	add	sp, #8
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	fffdffff 	.word	0xfffdffff
 8007e70:	fffeffff 	.word	0xfffeffff
 8007e74:	fffbffff 	.word	0xfffbffff
 8007e78:	ffff7fff 	.word	0xffff7fff
 8007e7c:	ffffefff 	.word	0xffffefff
 8007e80:	ffffdfff 	.word	0xffffdfff
 8007e84:	ffefffff 	.word	0xffefffff
 8007e88:	ff9fffff 	.word	0xff9fffff
 8007e8c:	fff7ffff 	.word	0xfff7ffff

08007e90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2280      	movs	r2, #128	; 0x80
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ea0:	f7fc f8b0 	bl	8004004 <HAL_GetTick>
 8007ea4:	0003      	movs	r3, r0
 8007ea6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2208      	movs	r2, #8
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d10c      	bne.n	8007ed0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2280      	movs	r2, #128	; 0x80
 8007eba:	0391      	lsls	r1, r2, #14
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4a17      	ldr	r2, [pc, #92]	; (8007f1c <UART_CheckIdleState+0x8c>)
 8007ec0:	9200      	str	r2, [sp, #0]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f000 f82c 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 8007ec8:	1e03      	subs	r3, r0, #0
 8007eca:	d001      	beq.n	8007ed0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e021      	b.n	8007f14 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2204      	movs	r2, #4
 8007ed8:	4013      	ands	r3, r2
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d10c      	bne.n	8007ef8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2280      	movs	r2, #128	; 0x80
 8007ee2:	03d1      	lsls	r1, r2, #15
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4a0d      	ldr	r2, [pc, #52]	; (8007f1c <UART_CheckIdleState+0x8c>)
 8007ee8:	9200      	str	r2, [sp, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f000 f818 	bl	8007f20 <UART_WaitOnFlagUntilTimeout>
 8007ef0:	1e03      	subs	r3, r0, #0
 8007ef2:	d001      	beq.n	8007ef8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e00d      	b.n	8007f14 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2220      	movs	r2, #32
 8007efc:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2220      	movs	r2, #32
 8007f02:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2200      	movs	r2, #0
 8007f08:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2274      	movs	r2, #116	; 0x74
 8007f0e:	2100      	movs	r1, #0
 8007f10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	0018      	movs	r0, r3
 8007f16:	46bd      	mov	sp, r7
 8007f18:	b004      	add	sp, #16
 8007f1a:	bd80      	pop	{r7, pc}
 8007f1c:	01ffffff 	.word	0x01ffffff

08007f20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b094      	sub	sp, #80	; 0x50
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	603b      	str	r3, [r7, #0]
 8007f2c:	1dfb      	adds	r3, r7, #7
 8007f2e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f30:	e0a3      	b.n	800807a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f34:	3301      	adds	r3, #1
 8007f36:	d100      	bne.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x1a>
 8007f38:	e09f      	b.n	800807a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f3a:	f7fc f863 	bl	8004004 <HAL_GetTick>
 8007f3e:	0002      	movs	r2, r0
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d302      	bcc.n	8007f50 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d13d      	bne.n	8007fcc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f50:	f3ef 8310 	mrs	r3, PRIMASK
 8007f54:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f58:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	f383 8810 	msr	PRIMASK, r3
}
 8007f64:	46c0      	nop			; (mov r8, r8)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	494c      	ldr	r1, [pc, #304]	; (80080a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8007f72:	400a      	ands	r2, r1
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f78:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7c:	f383 8810 	msr	PRIMASK, r3
}
 8007f80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f82:	f3ef 8310 	mrs	r3, PRIMASK
 8007f86:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f92:	f383 8810 	msr	PRIMASK, r3
}
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	438a      	bics	r2, r1
 8007fa6:	609a      	str	r2, [r3, #8]
 8007fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fae:	f383 8810 	msr	PRIMASK, r3
}
 8007fb2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2220      	movs	r2, #32
 8007fb8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2274      	movs	r2, #116	; 0x74
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	e067      	b.n	800809c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2204      	movs	r2, #4
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	d050      	beq.n	800807a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	69da      	ldr	r2, [r3, #28]
 8007fde:	2380      	movs	r3, #128	; 0x80
 8007fe0:	011b      	lsls	r3, r3, #4
 8007fe2:	401a      	ands	r2, r3
 8007fe4:	2380      	movs	r3, #128	; 0x80
 8007fe6:	011b      	lsls	r3, r3, #4
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d146      	bne.n	800807a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2280      	movs	r2, #128	; 0x80
 8007ff2:	0112      	lsls	r2, r2, #4
 8007ff4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8007ffa:	613b      	str	r3, [r7, #16]
  return(result);
 8007ffc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008000:	2301      	movs	r3, #1
 8008002:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f383 8810 	msr	PRIMASK, r3
}
 800800a:	46c0      	nop			; (mov r8, r8)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4923      	ldr	r1, [pc, #140]	; (80080a4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8008018:	400a      	ands	r2, r1
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800801e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f383 8810 	msr	PRIMASK, r3
}
 8008026:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008028:	f3ef 8310 	mrs	r3, PRIMASK
 800802c:	61fb      	str	r3, [r7, #28]
  return(result);
 800802e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008030:	64bb      	str	r3, [r7, #72]	; 0x48
 8008032:	2301      	movs	r3, #1
 8008034:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008036:	6a3b      	ldr	r3, [r7, #32]
 8008038:	f383 8810 	msr	PRIMASK, r3
}
 800803c:	46c0      	nop			; (mov r8, r8)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689a      	ldr	r2, [r3, #8]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2101      	movs	r1, #1
 800804a:	438a      	bics	r2, r1
 800804c:	609a      	str	r2, [r3, #8]
 800804e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008050:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	f383 8810 	msr	PRIMASK, r3
}
 8008058:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2220      	movs	r2, #32
 800805e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2220      	movs	r2, #32
 8008064:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2280      	movs	r2, #128	; 0x80
 800806a:	2120      	movs	r1, #32
 800806c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2274      	movs	r2, #116	; 0x74
 8008072:	2100      	movs	r1, #0
 8008074:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e010      	b.n	800809c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	4013      	ands	r3, r2
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	425a      	negs	r2, r3
 800808a:	4153      	adcs	r3, r2
 800808c:	b2db      	uxtb	r3, r3
 800808e:	001a      	movs	r2, r3
 8008090:	1dfb      	adds	r3, r7, #7
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	429a      	cmp	r2, r3
 8008096:	d100      	bne.n	800809a <UART_WaitOnFlagUntilTimeout+0x17a>
 8008098:	e74b      	b.n	8007f32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800809a:	2300      	movs	r3, #0
}
 800809c:	0018      	movs	r0, r3
 800809e:	46bd      	mov	sp, r7
 80080a0:	b014      	add	sp, #80	; 0x50
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	fffffe5f 	.word	0xfffffe5f

080080a8 <__errno>:
 80080a8:	4b01      	ldr	r3, [pc, #4]	; (80080b0 <__errno+0x8>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	4770      	bx	lr
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	20000010 	.word	0x20000010

080080b4 <__libc_init_array>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	2600      	movs	r6, #0
 80080b8:	4d0c      	ldr	r5, [pc, #48]	; (80080ec <__libc_init_array+0x38>)
 80080ba:	4c0d      	ldr	r4, [pc, #52]	; (80080f0 <__libc_init_array+0x3c>)
 80080bc:	1b64      	subs	r4, r4, r5
 80080be:	10a4      	asrs	r4, r4, #2
 80080c0:	42a6      	cmp	r6, r4
 80080c2:	d109      	bne.n	80080d8 <__libc_init_array+0x24>
 80080c4:	2600      	movs	r6, #0
 80080c6:	f002 ff6d 	bl	800afa4 <_init>
 80080ca:	4d0a      	ldr	r5, [pc, #40]	; (80080f4 <__libc_init_array+0x40>)
 80080cc:	4c0a      	ldr	r4, [pc, #40]	; (80080f8 <__libc_init_array+0x44>)
 80080ce:	1b64      	subs	r4, r4, r5
 80080d0:	10a4      	asrs	r4, r4, #2
 80080d2:	42a6      	cmp	r6, r4
 80080d4:	d105      	bne.n	80080e2 <__libc_init_array+0x2e>
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	00b3      	lsls	r3, r6, #2
 80080da:	58eb      	ldr	r3, [r5, r3]
 80080dc:	4798      	blx	r3
 80080de:	3601      	adds	r6, #1
 80080e0:	e7ee      	b.n	80080c0 <__libc_init_array+0xc>
 80080e2:	00b3      	lsls	r3, r6, #2
 80080e4:	58eb      	ldr	r3, [r5, r3]
 80080e6:	4798      	blx	r3
 80080e8:	3601      	adds	r6, #1
 80080ea:	e7f2      	b.n	80080d2 <__libc_init_array+0x1e>
 80080ec:	0800b594 	.word	0x0800b594
 80080f0:	0800b594 	.word	0x0800b594
 80080f4:	0800b594 	.word	0x0800b594
 80080f8:	0800b598 	.word	0x0800b598

080080fc <memset>:
 80080fc:	0003      	movs	r3, r0
 80080fe:	1882      	adds	r2, r0, r2
 8008100:	4293      	cmp	r3, r2
 8008102:	d100      	bne.n	8008106 <memset+0xa>
 8008104:	4770      	bx	lr
 8008106:	7019      	strb	r1, [r3, #0]
 8008108:	3301      	adds	r3, #1
 800810a:	e7f9      	b.n	8008100 <memset+0x4>

0800810c <__cvt>:
 800810c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800810e:	001e      	movs	r6, r3
 8008110:	2300      	movs	r3, #0
 8008112:	0014      	movs	r4, r2
 8008114:	b08b      	sub	sp, #44	; 0x2c
 8008116:	429e      	cmp	r6, r3
 8008118:	da04      	bge.n	8008124 <__cvt+0x18>
 800811a:	2180      	movs	r1, #128	; 0x80
 800811c:	0609      	lsls	r1, r1, #24
 800811e:	1873      	adds	r3, r6, r1
 8008120:	001e      	movs	r6, r3
 8008122:	232d      	movs	r3, #45	; 0x2d
 8008124:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008126:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008128:	7013      	strb	r3, [r2, #0]
 800812a:	2320      	movs	r3, #32
 800812c:	2203      	movs	r2, #3
 800812e:	439f      	bics	r7, r3
 8008130:	2f46      	cmp	r7, #70	; 0x46
 8008132:	d007      	beq.n	8008144 <__cvt+0x38>
 8008134:	003b      	movs	r3, r7
 8008136:	3b45      	subs	r3, #69	; 0x45
 8008138:	4259      	negs	r1, r3
 800813a:	414b      	adcs	r3, r1
 800813c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800813e:	3a01      	subs	r2, #1
 8008140:	18cb      	adds	r3, r1, r3
 8008142:	9310      	str	r3, [sp, #64]	; 0x40
 8008144:	ab09      	add	r3, sp, #36	; 0x24
 8008146:	9304      	str	r3, [sp, #16]
 8008148:	ab08      	add	r3, sp, #32
 800814a:	9303      	str	r3, [sp, #12]
 800814c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800814e:	9200      	str	r2, [sp, #0]
 8008150:	9302      	str	r3, [sp, #8]
 8008152:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008154:	0022      	movs	r2, r4
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	0033      	movs	r3, r6
 800815a:	f000 fcfd 	bl	8008b58 <_dtoa_r>
 800815e:	0005      	movs	r5, r0
 8008160:	2f47      	cmp	r7, #71	; 0x47
 8008162:	d102      	bne.n	800816a <__cvt+0x5e>
 8008164:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008166:	07db      	lsls	r3, r3, #31
 8008168:	d528      	bpl.n	80081bc <__cvt+0xb0>
 800816a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800816c:	18eb      	adds	r3, r5, r3
 800816e:	9307      	str	r3, [sp, #28]
 8008170:	2f46      	cmp	r7, #70	; 0x46
 8008172:	d114      	bne.n	800819e <__cvt+0x92>
 8008174:	782b      	ldrb	r3, [r5, #0]
 8008176:	2b30      	cmp	r3, #48	; 0x30
 8008178:	d10c      	bne.n	8008194 <__cvt+0x88>
 800817a:	2200      	movs	r2, #0
 800817c:	2300      	movs	r3, #0
 800817e:	0020      	movs	r0, r4
 8008180:	0031      	movs	r1, r6
 8008182:	f7f8 f963 	bl	800044c <__aeabi_dcmpeq>
 8008186:	2800      	cmp	r0, #0
 8008188:	d104      	bne.n	8008194 <__cvt+0x88>
 800818a:	2301      	movs	r3, #1
 800818c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800818e:	1a9b      	subs	r3, r3, r2
 8008190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008196:	9a07      	ldr	r2, [sp, #28]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	18d3      	adds	r3, r2, r3
 800819c:	9307      	str	r3, [sp, #28]
 800819e:	2200      	movs	r2, #0
 80081a0:	2300      	movs	r3, #0
 80081a2:	0020      	movs	r0, r4
 80081a4:	0031      	movs	r1, r6
 80081a6:	f7f8 f951 	bl	800044c <__aeabi_dcmpeq>
 80081aa:	2800      	cmp	r0, #0
 80081ac:	d001      	beq.n	80081b2 <__cvt+0xa6>
 80081ae:	9b07      	ldr	r3, [sp, #28]
 80081b0:	9309      	str	r3, [sp, #36]	; 0x24
 80081b2:	2230      	movs	r2, #48	; 0x30
 80081b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b6:	9907      	ldr	r1, [sp, #28]
 80081b8:	428b      	cmp	r3, r1
 80081ba:	d306      	bcc.n	80081ca <__cvt+0xbe>
 80081bc:	0028      	movs	r0, r5
 80081be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80081c2:	1b5b      	subs	r3, r3, r5
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	b00b      	add	sp, #44	; 0x2c
 80081c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ca:	1c59      	adds	r1, r3, #1
 80081cc:	9109      	str	r1, [sp, #36]	; 0x24
 80081ce:	701a      	strb	r2, [r3, #0]
 80081d0:	e7f0      	b.n	80081b4 <__cvt+0xa8>

080081d2 <__exponent>:
 80081d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081d4:	1c83      	adds	r3, r0, #2
 80081d6:	b087      	sub	sp, #28
 80081d8:	9303      	str	r3, [sp, #12]
 80081da:	0005      	movs	r5, r0
 80081dc:	000c      	movs	r4, r1
 80081de:	232b      	movs	r3, #43	; 0x2b
 80081e0:	7002      	strb	r2, [r0, #0]
 80081e2:	2900      	cmp	r1, #0
 80081e4:	da01      	bge.n	80081ea <__exponent+0x18>
 80081e6:	424c      	negs	r4, r1
 80081e8:	3302      	adds	r3, #2
 80081ea:	706b      	strb	r3, [r5, #1]
 80081ec:	2c09      	cmp	r4, #9
 80081ee:	dd31      	ble.n	8008254 <__exponent+0x82>
 80081f0:	270a      	movs	r7, #10
 80081f2:	ab04      	add	r3, sp, #16
 80081f4:	1dde      	adds	r6, r3, #7
 80081f6:	0020      	movs	r0, r4
 80081f8:	0039      	movs	r1, r7
 80081fa:	9601      	str	r6, [sp, #4]
 80081fc:	f7f8 f910 	bl	8000420 <__aeabi_idivmod>
 8008200:	3e01      	subs	r6, #1
 8008202:	3130      	adds	r1, #48	; 0x30
 8008204:	0020      	movs	r0, r4
 8008206:	7031      	strb	r1, [r6, #0]
 8008208:	0039      	movs	r1, r7
 800820a:	9402      	str	r4, [sp, #8]
 800820c:	f7f8 f822 	bl	8000254 <__divsi3>
 8008210:	9b02      	ldr	r3, [sp, #8]
 8008212:	0004      	movs	r4, r0
 8008214:	2b63      	cmp	r3, #99	; 0x63
 8008216:	dcee      	bgt.n	80081f6 <__exponent+0x24>
 8008218:	9b01      	ldr	r3, [sp, #4]
 800821a:	3430      	adds	r4, #48	; 0x30
 800821c:	1e9a      	subs	r2, r3, #2
 800821e:	0013      	movs	r3, r2
 8008220:	9903      	ldr	r1, [sp, #12]
 8008222:	7014      	strb	r4, [r2, #0]
 8008224:	a804      	add	r0, sp, #16
 8008226:	3007      	adds	r0, #7
 8008228:	4298      	cmp	r0, r3
 800822a:	d80e      	bhi.n	800824a <__exponent+0x78>
 800822c:	ab04      	add	r3, sp, #16
 800822e:	3307      	adds	r3, #7
 8008230:	2000      	movs	r0, #0
 8008232:	429a      	cmp	r2, r3
 8008234:	d804      	bhi.n	8008240 <__exponent+0x6e>
 8008236:	ab04      	add	r3, sp, #16
 8008238:	3009      	adds	r0, #9
 800823a:	18c0      	adds	r0, r0, r3
 800823c:	9b01      	ldr	r3, [sp, #4]
 800823e:	1ac0      	subs	r0, r0, r3
 8008240:	9b03      	ldr	r3, [sp, #12]
 8008242:	1818      	adds	r0, r3, r0
 8008244:	1b40      	subs	r0, r0, r5
 8008246:	b007      	add	sp, #28
 8008248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800824a:	7818      	ldrb	r0, [r3, #0]
 800824c:	3301      	adds	r3, #1
 800824e:	7008      	strb	r0, [r1, #0]
 8008250:	3101      	adds	r1, #1
 8008252:	e7e7      	b.n	8008224 <__exponent+0x52>
 8008254:	2330      	movs	r3, #48	; 0x30
 8008256:	18e4      	adds	r4, r4, r3
 8008258:	70ab      	strb	r3, [r5, #2]
 800825a:	1d28      	adds	r0, r5, #4
 800825c:	70ec      	strb	r4, [r5, #3]
 800825e:	e7f1      	b.n	8008244 <__exponent+0x72>

08008260 <_printf_float>:
 8008260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008262:	b095      	sub	sp, #84	; 0x54
 8008264:	000c      	movs	r4, r1
 8008266:	9208      	str	r2, [sp, #32]
 8008268:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800826a:	9309      	str	r3, [sp, #36]	; 0x24
 800826c:	0007      	movs	r7, r0
 800826e:	f001 fa91 	bl	8009794 <_localeconv_r>
 8008272:	6803      	ldr	r3, [r0, #0]
 8008274:	0018      	movs	r0, r3
 8008276:	930b      	str	r3, [sp, #44]	; 0x2c
 8008278:	f7f7 ff46 	bl	8000108 <strlen>
 800827c:	2300      	movs	r3, #0
 800827e:	9312      	str	r3, [sp, #72]	; 0x48
 8008280:	7e23      	ldrb	r3, [r4, #24]
 8008282:	2207      	movs	r2, #7
 8008284:	001e      	movs	r6, r3
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	900d      	str	r0, [sp, #52]	; 0x34
 800828a:	930c      	str	r3, [sp, #48]	; 0x30
 800828c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	05c9      	lsls	r1, r1, #23
 8008292:	d547      	bpl.n	8008324 <_printf_float+0xc4>
 8008294:	189b      	adds	r3, r3, r2
 8008296:	4393      	bics	r3, r2
 8008298:	001a      	movs	r2, r3
 800829a:	3208      	adds	r2, #8
 800829c:	602a      	str	r2, [r5, #0]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	64a2      	str	r2, [r4, #72]	; 0x48
 80082a4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80082a6:	2201      	movs	r2, #1
 80082a8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80082aa:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80082ac:	930a      	str	r3, [sp, #40]	; 0x28
 80082ae:	006b      	lsls	r3, r5, #1
 80082b0:	085b      	lsrs	r3, r3, #1
 80082b2:	930e      	str	r3, [sp, #56]	; 0x38
 80082b4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082b6:	4ba8      	ldr	r3, [pc, #672]	; (8008558 <_printf_float+0x2f8>)
 80082b8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80082ba:	4252      	negs	r2, r2
 80082bc:	f7f9 ff94 	bl	80021e8 <__aeabi_dcmpun>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	d131      	bne.n	8008328 <_printf_float+0xc8>
 80082c4:	2201      	movs	r2, #1
 80082c6:	4ba4      	ldr	r3, [pc, #656]	; (8008558 <_printf_float+0x2f8>)
 80082c8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082ca:	990e      	ldr	r1, [sp, #56]	; 0x38
 80082cc:	4252      	negs	r2, r2
 80082ce:	f7f8 f8cd 	bl	800046c <__aeabi_dcmple>
 80082d2:	2800      	cmp	r0, #0
 80082d4:	d128      	bne.n	8008328 <_printf_float+0xc8>
 80082d6:	2200      	movs	r2, #0
 80082d8:	2300      	movs	r3, #0
 80082da:	0029      	movs	r1, r5
 80082dc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80082de:	f7f8 f8bb 	bl	8000458 <__aeabi_dcmplt>
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d003      	beq.n	80082ee <_printf_float+0x8e>
 80082e6:	0023      	movs	r3, r4
 80082e8:	222d      	movs	r2, #45	; 0x2d
 80082ea:	3343      	adds	r3, #67	; 0x43
 80082ec:	701a      	strb	r2, [r3, #0]
 80082ee:	4d9b      	ldr	r5, [pc, #620]	; (800855c <_printf_float+0x2fc>)
 80082f0:	2e47      	cmp	r6, #71	; 0x47
 80082f2:	d900      	bls.n	80082f6 <_printf_float+0x96>
 80082f4:	4d9a      	ldr	r5, [pc, #616]	; (8008560 <_printf_float+0x300>)
 80082f6:	2303      	movs	r3, #3
 80082f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	3301      	adds	r3, #1
 80082fe:	439a      	bics	r2, r3
 8008300:	2300      	movs	r3, #0
 8008302:	6022      	str	r2, [r4, #0]
 8008304:	930a      	str	r3, [sp, #40]	; 0x28
 8008306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008308:	0021      	movs	r1, r4
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	0038      	movs	r0, r7
 800830e:	9b08      	ldr	r3, [sp, #32]
 8008310:	aa13      	add	r2, sp, #76	; 0x4c
 8008312:	f000 f9f3 	bl	80086fc <_printf_common>
 8008316:	1c43      	adds	r3, r0, #1
 8008318:	d000      	beq.n	800831c <_printf_float+0xbc>
 800831a:	e09e      	b.n	800845a <_printf_float+0x1fa>
 800831c:	2001      	movs	r0, #1
 800831e:	4240      	negs	r0, r0
 8008320:	b015      	add	sp, #84	; 0x54
 8008322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008324:	3307      	adds	r3, #7
 8008326:	e7b6      	b.n	8008296 <_printf_float+0x36>
 8008328:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800832a:	002b      	movs	r3, r5
 800832c:	0010      	movs	r0, r2
 800832e:	0029      	movs	r1, r5
 8008330:	f7f9 ff5a 	bl	80021e8 <__aeabi_dcmpun>
 8008334:	2800      	cmp	r0, #0
 8008336:	d00a      	beq.n	800834e <_printf_float+0xee>
 8008338:	2d00      	cmp	r5, #0
 800833a:	da03      	bge.n	8008344 <_printf_float+0xe4>
 800833c:	0023      	movs	r3, r4
 800833e:	222d      	movs	r2, #45	; 0x2d
 8008340:	3343      	adds	r3, #67	; 0x43
 8008342:	701a      	strb	r2, [r3, #0]
 8008344:	4d87      	ldr	r5, [pc, #540]	; (8008564 <_printf_float+0x304>)
 8008346:	2e47      	cmp	r6, #71	; 0x47
 8008348:	d9d5      	bls.n	80082f6 <_printf_float+0x96>
 800834a:	4d87      	ldr	r5, [pc, #540]	; (8008568 <_printf_float+0x308>)
 800834c:	e7d3      	b.n	80082f6 <_printf_float+0x96>
 800834e:	2220      	movs	r2, #32
 8008350:	0031      	movs	r1, r6
 8008352:	6863      	ldr	r3, [r4, #4]
 8008354:	4391      	bics	r1, r2
 8008356:	910e      	str	r1, [sp, #56]	; 0x38
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	d147      	bne.n	80083ec <_printf_float+0x18c>
 800835c:	3307      	adds	r3, #7
 800835e:	6063      	str	r3, [r4, #4]
 8008360:	2380      	movs	r3, #128	; 0x80
 8008362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	4313      	orrs	r3, r2
 8008368:	2200      	movs	r2, #0
 800836a:	9206      	str	r2, [sp, #24]
 800836c:	aa12      	add	r2, sp, #72	; 0x48
 800836e:	9205      	str	r2, [sp, #20]
 8008370:	aa11      	add	r2, sp, #68	; 0x44
 8008372:	9203      	str	r2, [sp, #12]
 8008374:	2223      	movs	r2, #35	; 0x23
 8008376:	a908      	add	r1, sp, #32
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	9301      	str	r3, [sp, #4]
 800837c:	6863      	ldr	r3, [r4, #4]
 800837e:	1852      	adds	r2, r2, r1
 8008380:	9202      	str	r2, [sp, #8]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	0038      	movs	r0, r7
 8008386:	002b      	movs	r3, r5
 8008388:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800838a:	9604      	str	r6, [sp, #16]
 800838c:	f7ff febe 	bl	800810c <__cvt>
 8008390:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008392:	0005      	movs	r5, r0
 8008394:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008396:	2b47      	cmp	r3, #71	; 0x47
 8008398:	d108      	bne.n	80083ac <_printf_float+0x14c>
 800839a:	1ccb      	adds	r3, r1, #3
 800839c:	db02      	blt.n	80083a4 <_printf_float+0x144>
 800839e:	6863      	ldr	r3, [r4, #4]
 80083a0:	4299      	cmp	r1, r3
 80083a2:	dd46      	ble.n	8008432 <_printf_float+0x1d2>
 80083a4:	0033      	movs	r3, r6
 80083a6:	3b02      	subs	r3, #2
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	001e      	movs	r6, r3
 80083ac:	2e65      	cmp	r6, #101	; 0x65
 80083ae:	d824      	bhi.n	80083fa <_printf_float+0x19a>
 80083b0:	0020      	movs	r0, r4
 80083b2:	0032      	movs	r2, r6
 80083b4:	3901      	subs	r1, #1
 80083b6:	3050      	adds	r0, #80	; 0x50
 80083b8:	9111      	str	r1, [sp, #68]	; 0x44
 80083ba:	f7ff ff0a 	bl	80081d2 <__exponent>
 80083be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083c0:	900a      	str	r0, [sp, #40]	; 0x28
 80083c2:	1813      	adds	r3, r2, r0
 80083c4:	6123      	str	r3, [r4, #16]
 80083c6:	2a01      	cmp	r2, #1
 80083c8:	dc02      	bgt.n	80083d0 <_printf_float+0x170>
 80083ca:	6822      	ldr	r2, [r4, #0]
 80083cc:	07d2      	lsls	r2, r2, #31
 80083ce:	d501      	bpl.n	80083d4 <_printf_float+0x174>
 80083d0:	3301      	adds	r3, #1
 80083d2:	6123      	str	r3, [r4, #16]
 80083d4:	2323      	movs	r3, #35	; 0x23
 80083d6:	aa08      	add	r2, sp, #32
 80083d8:	189b      	adds	r3, r3, r2
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d100      	bne.n	80083e2 <_printf_float+0x182>
 80083e0:	e791      	b.n	8008306 <_printf_float+0xa6>
 80083e2:	0023      	movs	r3, r4
 80083e4:	222d      	movs	r2, #45	; 0x2d
 80083e6:	3343      	adds	r3, #67	; 0x43
 80083e8:	701a      	strb	r2, [r3, #0]
 80083ea:	e78c      	b.n	8008306 <_printf_float+0xa6>
 80083ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083ee:	2a47      	cmp	r2, #71	; 0x47
 80083f0:	d1b6      	bne.n	8008360 <_printf_float+0x100>
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1b4      	bne.n	8008360 <_printf_float+0x100>
 80083f6:	3301      	adds	r3, #1
 80083f8:	e7b1      	b.n	800835e <_printf_float+0xfe>
 80083fa:	2e66      	cmp	r6, #102	; 0x66
 80083fc:	d11b      	bne.n	8008436 <_printf_float+0x1d6>
 80083fe:	6863      	ldr	r3, [r4, #4]
 8008400:	2900      	cmp	r1, #0
 8008402:	dd0d      	ble.n	8008420 <_printf_float+0x1c0>
 8008404:	6121      	str	r1, [r4, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <_printf_float+0x1b0>
 800840a:	6822      	ldr	r2, [r4, #0]
 800840c:	07d2      	lsls	r2, r2, #31
 800840e:	d502      	bpl.n	8008416 <_printf_float+0x1b6>
 8008410:	3301      	adds	r3, #1
 8008412:	1859      	adds	r1, r3, r1
 8008414:	6121      	str	r1, [r4, #16]
 8008416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008418:	65a3      	str	r3, [r4, #88]	; 0x58
 800841a:	2300      	movs	r3, #0
 800841c:	930a      	str	r3, [sp, #40]	; 0x28
 800841e:	e7d9      	b.n	80083d4 <_printf_float+0x174>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d103      	bne.n	800842c <_printf_float+0x1cc>
 8008424:	2201      	movs	r2, #1
 8008426:	6821      	ldr	r1, [r4, #0]
 8008428:	4211      	tst	r1, r2
 800842a:	d000      	beq.n	800842e <_printf_float+0x1ce>
 800842c:	1c9a      	adds	r2, r3, #2
 800842e:	6122      	str	r2, [r4, #16]
 8008430:	e7f1      	b.n	8008416 <_printf_float+0x1b6>
 8008432:	2367      	movs	r3, #103	; 0x67
 8008434:	001e      	movs	r6, r3
 8008436:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008438:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800843a:	4293      	cmp	r3, r2
 800843c:	db06      	blt.n	800844c <_printf_float+0x1ec>
 800843e:	6822      	ldr	r2, [r4, #0]
 8008440:	6123      	str	r3, [r4, #16]
 8008442:	07d2      	lsls	r2, r2, #31
 8008444:	d5e7      	bpl.n	8008416 <_printf_float+0x1b6>
 8008446:	3301      	adds	r3, #1
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	e7e4      	b.n	8008416 <_printf_float+0x1b6>
 800844c:	2101      	movs	r1, #1
 800844e:	2b00      	cmp	r3, #0
 8008450:	dc01      	bgt.n	8008456 <_printf_float+0x1f6>
 8008452:	1849      	adds	r1, r1, r1
 8008454:	1ac9      	subs	r1, r1, r3
 8008456:	1852      	adds	r2, r2, r1
 8008458:	e7e9      	b.n	800842e <_printf_float+0x1ce>
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	0553      	lsls	r3, r2, #21
 800845e:	d408      	bmi.n	8008472 <_printf_float+0x212>
 8008460:	6923      	ldr	r3, [r4, #16]
 8008462:	002a      	movs	r2, r5
 8008464:	0038      	movs	r0, r7
 8008466:	9908      	ldr	r1, [sp, #32]
 8008468:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800846a:	47a8      	blx	r5
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d129      	bne.n	80084c4 <_printf_float+0x264>
 8008470:	e754      	b.n	800831c <_printf_float+0xbc>
 8008472:	2e65      	cmp	r6, #101	; 0x65
 8008474:	d800      	bhi.n	8008478 <_printf_float+0x218>
 8008476:	e0ec      	b.n	8008652 <_printf_float+0x3f2>
 8008478:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800847a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800847c:	2200      	movs	r2, #0
 800847e:	2300      	movs	r3, #0
 8008480:	f7f7 ffe4 	bl	800044c <__aeabi_dcmpeq>
 8008484:	2800      	cmp	r0, #0
 8008486:	d034      	beq.n	80084f2 <_printf_float+0x292>
 8008488:	2301      	movs	r3, #1
 800848a:	0038      	movs	r0, r7
 800848c:	4a37      	ldr	r2, [pc, #220]	; (800856c <_printf_float+0x30c>)
 800848e:	9908      	ldr	r1, [sp, #32]
 8008490:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008492:	47a8      	blx	r5
 8008494:	1c43      	adds	r3, r0, #1
 8008496:	d100      	bne.n	800849a <_printf_float+0x23a>
 8008498:	e740      	b.n	800831c <_printf_float+0xbc>
 800849a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800849c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800849e:	4293      	cmp	r3, r2
 80084a0:	db02      	blt.n	80084a8 <_printf_float+0x248>
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	07db      	lsls	r3, r3, #31
 80084a6:	d50d      	bpl.n	80084c4 <_printf_float+0x264>
 80084a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80084aa:	0038      	movs	r0, r7
 80084ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084b0:	9908      	ldr	r1, [sp, #32]
 80084b2:	47a8      	blx	r5
 80084b4:	2500      	movs	r5, #0
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d100      	bne.n	80084bc <_printf_float+0x25c>
 80084ba:	e72f      	b.n	800831c <_printf_float+0xbc>
 80084bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084be:	3b01      	subs	r3, #1
 80084c0:	42ab      	cmp	r3, r5
 80084c2:	dc0a      	bgt.n	80084da <_printf_float+0x27a>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	079b      	lsls	r3, r3, #30
 80084c8:	d500      	bpl.n	80084cc <_printf_float+0x26c>
 80084ca:	e114      	b.n	80086f6 <_printf_float+0x496>
 80084cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80084ce:	68e0      	ldr	r0, [r4, #12]
 80084d0:	4298      	cmp	r0, r3
 80084d2:	db00      	blt.n	80084d6 <_printf_float+0x276>
 80084d4:	e724      	b.n	8008320 <_printf_float+0xc0>
 80084d6:	0018      	movs	r0, r3
 80084d8:	e722      	b.n	8008320 <_printf_float+0xc0>
 80084da:	0022      	movs	r2, r4
 80084dc:	2301      	movs	r3, #1
 80084de:	0038      	movs	r0, r7
 80084e0:	9908      	ldr	r1, [sp, #32]
 80084e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80084e4:	321a      	adds	r2, #26
 80084e6:	47b0      	blx	r6
 80084e8:	1c43      	adds	r3, r0, #1
 80084ea:	d100      	bne.n	80084ee <_printf_float+0x28e>
 80084ec:	e716      	b.n	800831c <_printf_float+0xbc>
 80084ee:	3501      	adds	r5, #1
 80084f0:	e7e4      	b.n	80084bc <_printf_float+0x25c>
 80084f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dc3b      	bgt.n	8008570 <_printf_float+0x310>
 80084f8:	2301      	movs	r3, #1
 80084fa:	0038      	movs	r0, r7
 80084fc:	4a1b      	ldr	r2, [pc, #108]	; (800856c <_printf_float+0x30c>)
 80084fe:	9908      	ldr	r1, [sp, #32]
 8008500:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008502:	47b0      	blx	r6
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d100      	bne.n	800850a <_printf_float+0x2aa>
 8008508:	e708      	b.n	800831c <_printf_float+0xbc>
 800850a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800850c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800850e:	4313      	orrs	r3, r2
 8008510:	d102      	bne.n	8008518 <_printf_float+0x2b8>
 8008512:	6823      	ldr	r3, [r4, #0]
 8008514:	07db      	lsls	r3, r3, #31
 8008516:	d5d5      	bpl.n	80084c4 <_printf_float+0x264>
 8008518:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800851a:	0038      	movs	r0, r7
 800851c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800851e:	9908      	ldr	r1, [sp, #32]
 8008520:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008522:	47b0      	blx	r6
 8008524:	1c43      	adds	r3, r0, #1
 8008526:	d100      	bne.n	800852a <_printf_float+0x2ca>
 8008528:	e6f8      	b.n	800831c <_printf_float+0xbc>
 800852a:	2300      	movs	r3, #0
 800852c:	930a      	str	r3, [sp, #40]	; 0x28
 800852e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008532:	425b      	negs	r3, r3
 8008534:	4293      	cmp	r3, r2
 8008536:	dc01      	bgt.n	800853c <_printf_float+0x2dc>
 8008538:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800853a:	e792      	b.n	8008462 <_printf_float+0x202>
 800853c:	0022      	movs	r2, r4
 800853e:	2301      	movs	r3, #1
 8008540:	0038      	movs	r0, r7
 8008542:	9908      	ldr	r1, [sp, #32]
 8008544:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008546:	321a      	adds	r2, #26
 8008548:	47b0      	blx	r6
 800854a:	1c43      	adds	r3, r0, #1
 800854c:	d100      	bne.n	8008550 <_printf_float+0x2f0>
 800854e:	e6e5      	b.n	800831c <_printf_float+0xbc>
 8008550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008552:	3301      	adds	r3, #1
 8008554:	e7ea      	b.n	800852c <_printf_float+0x2cc>
 8008556:	46c0      	nop			; (mov r8, r8)
 8008558:	7fefffff 	.word	0x7fefffff
 800855c:	0800b1ac 	.word	0x0800b1ac
 8008560:	0800b1b0 	.word	0x0800b1b0
 8008564:	0800b1b4 	.word	0x0800b1b4
 8008568:	0800b1b8 	.word	0x0800b1b8
 800856c:	0800b1bc 	.word	0x0800b1bc
 8008570:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008574:	920a      	str	r2, [sp, #40]	; 0x28
 8008576:	429a      	cmp	r2, r3
 8008578:	dd00      	ble.n	800857c <_printf_float+0x31c>
 800857a:	930a      	str	r3, [sp, #40]	; 0x28
 800857c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	dc3d      	bgt.n	80085fe <_printf_float+0x39e>
 8008582:	2300      	movs	r3, #0
 8008584:	930e      	str	r3, [sp, #56]	; 0x38
 8008586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008588:	43db      	mvns	r3, r3
 800858a:	17db      	asrs	r3, r3, #31
 800858c:	930f      	str	r3, [sp, #60]	; 0x3c
 800858e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008590:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008592:	930c      	str	r3, [sp, #48]	; 0x30
 8008594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008596:	4013      	ands	r3, r2
 8008598:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800859e:	4293      	cmp	r3, r2
 80085a0:	dc36      	bgt.n	8008610 <_printf_float+0x3b0>
 80085a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80085a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085a6:	4293      	cmp	r3, r2
 80085a8:	db40      	blt.n	800862c <_printf_float+0x3cc>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	07db      	lsls	r3, r3, #31
 80085ae:	d43d      	bmi.n	800862c <_printf_float+0x3cc>
 80085b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085b4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	1a52      	subs	r2, r2, r1
 80085ba:	920a      	str	r2, [sp, #40]	; 0x28
 80085bc:	429a      	cmp	r2, r3
 80085be:	dd00      	ble.n	80085c2 <_printf_float+0x362>
 80085c0:	930a      	str	r3, [sp, #40]	; 0x28
 80085c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	dc3a      	bgt.n	800863e <_printf_float+0x3de>
 80085c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085ca:	2500      	movs	r5, #0
 80085cc:	43db      	mvns	r3, r3
 80085ce:	17db      	asrs	r3, r3, #31
 80085d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80085d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80085d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085d8:	1a9b      	subs	r3, r3, r2
 80085da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085dc:	400a      	ands	r2, r1
 80085de:	1a9b      	subs	r3, r3, r2
 80085e0:	42ab      	cmp	r3, r5
 80085e2:	dc00      	bgt.n	80085e6 <_printf_float+0x386>
 80085e4:	e76e      	b.n	80084c4 <_printf_float+0x264>
 80085e6:	0022      	movs	r2, r4
 80085e8:	2301      	movs	r3, #1
 80085ea:	0038      	movs	r0, r7
 80085ec:	9908      	ldr	r1, [sp, #32]
 80085ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80085f0:	321a      	adds	r2, #26
 80085f2:	47b0      	blx	r6
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d100      	bne.n	80085fa <_printf_float+0x39a>
 80085f8:	e690      	b.n	800831c <_printf_float+0xbc>
 80085fa:	3501      	adds	r5, #1
 80085fc:	e7e9      	b.n	80085d2 <_printf_float+0x372>
 80085fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008600:	002a      	movs	r2, r5
 8008602:	0038      	movs	r0, r7
 8008604:	9908      	ldr	r1, [sp, #32]
 8008606:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008608:	47b0      	blx	r6
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	d1b9      	bne.n	8008582 <_printf_float+0x322>
 800860e:	e685      	b.n	800831c <_printf_float+0xbc>
 8008610:	0022      	movs	r2, r4
 8008612:	2301      	movs	r3, #1
 8008614:	0038      	movs	r0, r7
 8008616:	9908      	ldr	r1, [sp, #32]
 8008618:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800861a:	321a      	adds	r2, #26
 800861c:	47b0      	blx	r6
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	d100      	bne.n	8008624 <_printf_float+0x3c4>
 8008622:	e67b      	b.n	800831c <_printf_float+0xbc>
 8008624:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008626:	3301      	adds	r3, #1
 8008628:	930e      	str	r3, [sp, #56]	; 0x38
 800862a:	e7b0      	b.n	800858e <_printf_float+0x32e>
 800862c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800862e:	0038      	movs	r0, r7
 8008630:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008632:	9908      	ldr	r1, [sp, #32]
 8008634:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008636:	47b0      	blx	r6
 8008638:	1c43      	adds	r3, r0, #1
 800863a:	d1b9      	bne.n	80085b0 <_printf_float+0x350>
 800863c:	e66e      	b.n	800831c <_printf_float+0xbc>
 800863e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008640:	0038      	movs	r0, r7
 8008642:	18ea      	adds	r2, r5, r3
 8008644:	9908      	ldr	r1, [sp, #32]
 8008646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008648:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800864a:	47a8      	blx	r5
 800864c:	1c43      	adds	r3, r0, #1
 800864e:	d1bb      	bne.n	80085c8 <_printf_float+0x368>
 8008650:	e664      	b.n	800831c <_printf_float+0xbc>
 8008652:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008654:	2b01      	cmp	r3, #1
 8008656:	dc02      	bgt.n	800865e <_printf_float+0x3fe>
 8008658:	2301      	movs	r3, #1
 800865a:	421a      	tst	r2, r3
 800865c:	d038      	beq.n	80086d0 <_printf_float+0x470>
 800865e:	2301      	movs	r3, #1
 8008660:	002a      	movs	r2, r5
 8008662:	0038      	movs	r0, r7
 8008664:	9908      	ldr	r1, [sp, #32]
 8008666:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008668:	47b0      	blx	r6
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	d100      	bne.n	8008670 <_printf_float+0x410>
 800866e:	e655      	b.n	800831c <_printf_float+0xbc>
 8008670:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008672:	0038      	movs	r0, r7
 8008674:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008676:	9908      	ldr	r1, [sp, #32]
 8008678:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800867a:	47b0      	blx	r6
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d100      	bne.n	8008682 <_printf_float+0x422>
 8008680:	e64c      	b.n	800831c <_printf_float+0xbc>
 8008682:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008684:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008686:	2200      	movs	r2, #0
 8008688:	2300      	movs	r3, #0
 800868a:	f7f7 fedf 	bl	800044c <__aeabi_dcmpeq>
 800868e:	2800      	cmp	r0, #0
 8008690:	d11c      	bne.n	80086cc <_printf_float+0x46c>
 8008692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008694:	1c6a      	adds	r2, r5, #1
 8008696:	3b01      	subs	r3, #1
 8008698:	0038      	movs	r0, r7
 800869a:	9908      	ldr	r1, [sp, #32]
 800869c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800869e:	47a8      	blx	r5
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d10f      	bne.n	80086c4 <_printf_float+0x464>
 80086a4:	e63a      	b.n	800831c <_printf_float+0xbc>
 80086a6:	0022      	movs	r2, r4
 80086a8:	2301      	movs	r3, #1
 80086aa:	0038      	movs	r0, r7
 80086ac:	9908      	ldr	r1, [sp, #32]
 80086ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80086b0:	321a      	adds	r2, #26
 80086b2:	47b0      	blx	r6
 80086b4:	1c43      	adds	r3, r0, #1
 80086b6:	d100      	bne.n	80086ba <_printf_float+0x45a>
 80086b8:	e630      	b.n	800831c <_printf_float+0xbc>
 80086ba:	3501      	adds	r5, #1
 80086bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80086be:	3b01      	subs	r3, #1
 80086c0:	42ab      	cmp	r3, r5
 80086c2:	dcf0      	bgt.n	80086a6 <_printf_float+0x446>
 80086c4:	0022      	movs	r2, r4
 80086c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c8:	3250      	adds	r2, #80	; 0x50
 80086ca:	e6cb      	b.n	8008464 <_printf_float+0x204>
 80086cc:	2500      	movs	r5, #0
 80086ce:	e7f5      	b.n	80086bc <_printf_float+0x45c>
 80086d0:	002a      	movs	r2, r5
 80086d2:	e7e1      	b.n	8008698 <_printf_float+0x438>
 80086d4:	0022      	movs	r2, r4
 80086d6:	2301      	movs	r3, #1
 80086d8:	0038      	movs	r0, r7
 80086da:	9908      	ldr	r1, [sp, #32]
 80086dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80086de:	3219      	adds	r2, #25
 80086e0:	47b0      	blx	r6
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	d100      	bne.n	80086e8 <_printf_float+0x488>
 80086e6:	e619      	b.n	800831c <_printf_float+0xbc>
 80086e8:	3501      	adds	r5, #1
 80086ea:	68e3      	ldr	r3, [r4, #12]
 80086ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80086ee:	1a9b      	subs	r3, r3, r2
 80086f0:	42ab      	cmp	r3, r5
 80086f2:	dcef      	bgt.n	80086d4 <_printf_float+0x474>
 80086f4:	e6ea      	b.n	80084cc <_printf_float+0x26c>
 80086f6:	2500      	movs	r5, #0
 80086f8:	e7f7      	b.n	80086ea <_printf_float+0x48a>
 80086fa:	46c0      	nop			; (mov r8, r8)

080086fc <_printf_common>:
 80086fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086fe:	0015      	movs	r5, r2
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	688a      	ldr	r2, [r1, #8]
 8008704:	690b      	ldr	r3, [r1, #16]
 8008706:	000c      	movs	r4, r1
 8008708:	9000      	str	r0, [sp, #0]
 800870a:	4293      	cmp	r3, r2
 800870c:	da00      	bge.n	8008710 <_printf_common+0x14>
 800870e:	0013      	movs	r3, r2
 8008710:	0022      	movs	r2, r4
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	3243      	adds	r2, #67	; 0x43
 8008716:	7812      	ldrb	r2, [r2, #0]
 8008718:	2a00      	cmp	r2, #0
 800871a:	d001      	beq.n	8008720 <_printf_common+0x24>
 800871c:	3301      	adds	r3, #1
 800871e:	602b      	str	r3, [r5, #0]
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	069b      	lsls	r3, r3, #26
 8008724:	d502      	bpl.n	800872c <_printf_common+0x30>
 8008726:	682b      	ldr	r3, [r5, #0]
 8008728:	3302      	adds	r3, #2
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	6822      	ldr	r2, [r4, #0]
 800872e:	2306      	movs	r3, #6
 8008730:	0017      	movs	r7, r2
 8008732:	401f      	ands	r7, r3
 8008734:	421a      	tst	r2, r3
 8008736:	d027      	beq.n	8008788 <_printf_common+0x8c>
 8008738:	0023      	movs	r3, r4
 800873a:	3343      	adds	r3, #67	; 0x43
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	1e5a      	subs	r2, r3, #1
 8008740:	4193      	sbcs	r3, r2
 8008742:	6822      	ldr	r2, [r4, #0]
 8008744:	0692      	lsls	r2, r2, #26
 8008746:	d430      	bmi.n	80087aa <_printf_common+0xae>
 8008748:	0022      	movs	r2, r4
 800874a:	9901      	ldr	r1, [sp, #4]
 800874c:	9800      	ldr	r0, [sp, #0]
 800874e:	9e08      	ldr	r6, [sp, #32]
 8008750:	3243      	adds	r2, #67	; 0x43
 8008752:	47b0      	blx	r6
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d025      	beq.n	80087a4 <_printf_common+0xa8>
 8008758:	2306      	movs	r3, #6
 800875a:	6820      	ldr	r0, [r4, #0]
 800875c:	682a      	ldr	r2, [r5, #0]
 800875e:	68e1      	ldr	r1, [r4, #12]
 8008760:	2500      	movs	r5, #0
 8008762:	4003      	ands	r3, r0
 8008764:	2b04      	cmp	r3, #4
 8008766:	d103      	bne.n	8008770 <_printf_common+0x74>
 8008768:	1a8d      	subs	r5, r1, r2
 800876a:	43eb      	mvns	r3, r5
 800876c:	17db      	asrs	r3, r3, #31
 800876e:	401d      	ands	r5, r3
 8008770:	68a3      	ldr	r3, [r4, #8]
 8008772:	6922      	ldr	r2, [r4, #16]
 8008774:	4293      	cmp	r3, r2
 8008776:	dd01      	ble.n	800877c <_printf_common+0x80>
 8008778:	1a9b      	subs	r3, r3, r2
 800877a:	18ed      	adds	r5, r5, r3
 800877c:	2700      	movs	r7, #0
 800877e:	42bd      	cmp	r5, r7
 8008780:	d120      	bne.n	80087c4 <_printf_common+0xc8>
 8008782:	2000      	movs	r0, #0
 8008784:	e010      	b.n	80087a8 <_printf_common+0xac>
 8008786:	3701      	adds	r7, #1
 8008788:	68e3      	ldr	r3, [r4, #12]
 800878a:	682a      	ldr	r2, [r5, #0]
 800878c:	1a9b      	subs	r3, r3, r2
 800878e:	42bb      	cmp	r3, r7
 8008790:	ddd2      	ble.n	8008738 <_printf_common+0x3c>
 8008792:	0022      	movs	r2, r4
 8008794:	2301      	movs	r3, #1
 8008796:	9901      	ldr	r1, [sp, #4]
 8008798:	9800      	ldr	r0, [sp, #0]
 800879a:	9e08      	ldr	r6, [sp, #32]
 800879c:	3219      	adds	r2, #25
 800879e:	47b0      	blx	r6
 80087a0:	1c43      	adds	r3, r0, #1
 80087a2:	d1f0      	bne.n	8008786 <_printf_common+0x8a>
 80087a4:	2001      	movs	r0, #1
 80087a6:	4240      	negs	r0, r0
 80087a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80087aa:	2030      	movs	r0, #48	; 0x30
 80087ac:	18e1      	adds	r1, r4, r3
 80087ae:	3143      	adds	r1, #67	; 0x43
 80087b0:	7008      	strb	r0, [r1, #0]
 80087b2:	0021      	movs	r1, r4
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	3145      	adds	r1, #69	; 0x45
 80087b8:	7809      	ldrb	r1, [r1, #0]
 80087ba:	18a2      	adds	r2, r4, r2
 80087bc:	3243      	adds	r2, #67	; 0x43
 80087be:	3302      	adds	r3, #2
 80087c0:	7011      	strb	r1, [r2, #0]
 80087c2:	e7c1      	b.n	8008748 <_printf_common+0x4c>
 80087c4:	0022      	movs	r2, r4
 80087c6:	2301      	movs	r3, #1
 80087c8:	9901      	ldr	r1, [sp, #4]
 80087ca:	9800      	ldr	r0, [sp, #0]
 80087cc:	9e08      	ldr	r6, [sp, #32]
 80087ce:	321a      	adds	r2, #26
 80087d0:	47b0      	blx	r6
 80087d2:	1c43      	adds	r3, r0, #1
 80087d4:	d0e6      	beq.n	80087a4 <_printf_common+0xa8>
 80087d6:	3701      	adds	r7, #1
 80087d8:	e7d1      	b.n	800877e <_printf_common+0x82>
	...

080087dc <_printf_i>:
 80087dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087de:	b08b      	sub	sp, #44	; 0x2c
 80087e0:	9206      	str	r2, [sp, #24]
 80087e2:	000a      	movs	r2, r1
 80087e4:	3243      	adds	r2, #67	; 0x43
 80087e6:	9307      	str	r3, [sp, #28]
 80087e8:	9005      	str	r0, [sp, #20]
 80087ea:	9204      	str	r2, [sp, #16]
 80087ec:	7e0a      	ldrb	r2, [r1, #24]
 80087ee:	000c      	movs	r4, r1
 80087f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087f2:	2a78      	cmp	r2, #120	; 0x78
 80087f4:	d806      	bhi.n	8008804 <_printf_i+0x28>
 80087f6:	2a62      	cmp	r2, #98	; 0x62
 80087f8:	d808      	bhi.n	800880c <_printf_i+0x30>
 80087fa:	2a00      	cmp	r2, #0
 80087fc:	d100      	bne.n	8008800 <_printf_i+0x24>
 80087fe:	e0c0      	b.n	8008982 <_printf_i+0x1a6>
 8008800:	2a58      	cmp	r2, #88	; 0x58
 8008802:	d052      	beq.n	80088aa <_printf_i+0xce>
 8008804:	0026      	movs	r6, r4
 8008806:	3642      	adds	r6, #66	; 0x42
 8008808:	7032      	strb	r2, [r6, #0]
 800880a:	e022      	b.n	8008852 <_printf_i+0x76>
 800880c:	0010      	movs	r0, r2
 800880e:	3863      	subs	r0, #99	; 0x63
 8008810:	2815      	cmp	r0, #21
 8008812:	d8f7      	bhi.n	8008804 <_printf_i+0x28>
 8008814:	f7f7 fc8a 	bl	800012c <__gnu_thumb1_case_shi>
 8008818:	001f0016 	.word	0x001f0016
 800881c:	fff6fff6 	.word	0xfff6fff6
 8008820:	fff6fff6 	.word	0xfff6fff6
 8008824:	fff6001f 	.word	0xfff6001f
 8008828:	fff6fff6 	.word	0xfff6fff6
 800882c:	00a8fff6 	.word	0x00a8fff6
 8008830:	009a0036 	.word	0x009a0036
 8008834:	fff6fff6 	.word	0xfff6fff6
 8008838:	fff600b9 	.word	0xfff600b9
 800883c:	fff60036 	.word	0xfff60036
 8008840:	009efff6 	.word	0x009efff6
 8008844:	0026      	movs	r6, r4
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	3642      	adds	r6, #66	; 0x42
 800884a:	1d11      	adds	r1, r2, #4
 800884c:	6019      	str	r1, [r3, #0]
 800884e:	6813      	ldr	r3, [r2, #0]
 8008850:	7033      	strb	r3, [r6, #0]
 8008852:	2301      	movs	r3, #1
 8008854:	e0a7      	b.n	80089a6 <_printf_i+0x1ca>
 8008856:	6808      	ldr	r0, [r1, #0]
 8008858:	6819      	ldr	r1, [r3, #0]
 800885a:	1d0a      	adds	r2, r1, #4
 800885c:	0605      	lsls	r5, r0, #24
 800885e:	d50b      	bpl.n	8008878 <_printf_i+0x9c>
 8008860:	680d      	ldr	r5, [r1, #0]
 8008862:	601a      	str	r2, [r3, #0]
 8008864:	2d00      	cmp	r5, #0
 8008866:	da03      	bge.n	8008870 <_printf_i+0x94>
 8008868:	232d      	movs	r3, #45	; 0x2d
 800886a:	9a04      	ldr	r2, [sp, #16]
 800886c:	426d      	negs	r5, r5
 800886e:	7013      	strb	r3, [r2, #0]
 8008870:	4b61      	ldr	r3, [pc, #388]	; (80089f8 <_printf_i+0x21c>)
 8008872:	270a      	movs	r7, #10
 8008874:	9303      	str	r3, [sp, #12]
 8008876:	e032      	b.n	80088de <_printf_i+0x102>
 8008878:	680d      	ldr	r5, [r1, #0]
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	0641      	lsls	r1, r0, #25
 800887e:	d5f1      	bpl.n	8008864 <_printf_i+0x88>
 8008880:	b22d      	sxth	r5, r5
 8008882:	e7ef      	b.n	8008864 <_printf_i+0x88>
 8008884:	680d      	ldr	r5, [r1, #0]
 8008886:	6819      	ldr	r1, [r3, #0]
 8008888:	1d08      	adds	r0, r1, #4
 800888a:	6018      	str	r0, [r3, #0]
 800888c:	062e      	lsls	r6, r5, #24
 800888e:	d501      	bpl.n	8008894 <_printf_i+0xb8>
 8008890:	680d      	ldr	r5, [r1, #0]
 8008892:	e003      	b.n	800889c <_printf_i+0xc0>
 8008894:	066d      	lsls	r5, r5, #25
 8008896:	d5fb      	bpl.n	8008890 <_printf_i+0xb4>
 8008898:	680d      	ldr	r5, [r1, #0]
 800889a:	b2ad      	uxth	r5, r5
 800889c:	4b56      	ldr	r3, [pc, #344]	; (80089f8 <_printf_i+0x21c>)
 800889e:	270a      	movs	r7, #10
 80088a0:	9303      	str	r3, [sp, #12]
 80088a2:	2a6f      	cmp	r2, #111	; 0x6f
 80088a4:	d117      	bne.n	80088d6 <_printf_i+0xfa>
 80088a6:	2708      	movs	r7, #8
 80088a8:	e015      	b.n	80088d6 <_printf_i+0xfa>
 80088aa:	3145      	adds	r1, #69	; 0x45
 80088ac:	700a      	strb	r2, [r1, #0]
 80088ae:	4a52      	ldr	r2, [pc, #328]	; (80089f8 <_printf_i+0x21c>)
 80088b0:	9203      	str	r2, [sp, #12]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	6821      	ldr	r1, [r4, #0]
 80088b6:	ca20      	ldmia	r2!, {r5}
 80088b8:	601a      	str	r2, [r3, #0]
 80088ba:	0608      	lsls	r0, r1, #24
 80088bc:	d550      	bpl.n	8008960 <_printf_i+0x184>
 80088be:	07cb      	lsls	r3, r1, #31
 80088c0:	d502      	bpl.n	80088c8 <_printf_i+0xec>
 80088c2:	2320      	movs	r3, #32
 80088c4:	4319      	orrs	r1, r3
 80088c6:	6021      	str	r1, [r4, #0]
 80088c8:	2710      	movs	r7, #16
 80088ca:	2d00      	cmp	r5, #0
 80088cc:	d103      	bne.n	80088d6 <_printf_i+0xfa>
 80088ce:	2320      	movs	r3, #32
 80088d0:	6822      	ldr	r2, [r4, #0]
 80088d2:	439a      	bics	r2, r3
 80088d4:	6022      	str	r2, [r4, #0]
 80088d6:	0023      	movs	r3, r4
 80088d8:	2200      	movs	r2, #0
 80088da:	3343      	adds	r3, #67	; 0x43
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	6863      	ldr	r3, [r4, #4]
 80088e0:	60a3      	str	r3, [r4, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	db03      	blt.n	80088ee <_printf_i+0x112>
 80088e6:	2204      	movs	r2, #4
 80088e8:	6821      	ldr	r1, [r4, #0]
 80088ea:	4391      	bics	r1, r2
 80088ec:	6021      	str	r1, [r4, #0]
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	d102      	bne.n	80088f8 <_printf_i+0x11c>
 80088f2:	9e04      	ldr	r6, [sp, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d00c      	beq.n	8008912 <_printf_i+0x136>
 80088f8:	9e04      	ldr	r6, [sp, #16]
 80088fa:	0028      	movs	r0, r5
 80088fc:	0039      	movs	r1, r7
 80088fe:	f7f7 fca5 	bl	800024c <__aeabi_uidivmod>
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	3e01      	subs	r6, #1
 8008906:	5c5b      	ldrb	r3, [r3, r1]
 8008908:	7033      	strb	r3, [r6, #0]
 800890a:	002b      	movs	r3, r5
 800890c:	0005      	movs	r5, r0
 800890e:	429f      	cmp	r7, r3
 8008910:	d9f3      	bls.n	80088fa <_printf_i+0x11e>
 8008912:	2f08      	cmp	r7, #8
 8008914:	d109      	bne.n	800892a <_printf_i+0x14e>
 8008916:	6823      	ldr	r3, [r4, #0]
 8008918:	07db      	lsls	r3, r3, #31
 800891a:	d506      	bpl.n	800892a <_printf_i+0x14e>
 800891c:	6863      	ldr	r3, [r4, #4]
 800891e:	6922      	ldr	r2, [r4, #16]
 8008920:	4293      	cmp	r3, r2
 8008922:	dc02      	bgt.n	800892a <_printf_i+0x14e>
 8008924:	2330      	movs	r3, #48	; 0x30
 8008926:	3e01      	subs	r6, #1
 8008928:	7033      	strb	r3, [r6, #0]
 800892a:	9b04      	ldr	r3, [sp, #16]
 800892c:	1b9b      	subs	r3, r3, r6
 800892e:	6123      	str	r3, [r4, #16]
 8008930:	9b07      	ldr	r3, [sp, #28]
 8008932:	0021      	movs	r1, r4
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	9805      	ldr	r0, [sp, #20]
 8008938:	9b06      	ldr	r3, [sp, #24]
 800893a:	aa09      	add	r2, sp, #36	; 0x24
 800893c:	f7ff fede 	bl	80086fc <_printf_common>
 8008940:	1c43      	adds	r3, r0, #1
 8008942:	d135      	bne.n	80089b0 <_printf_i+0x1d4>
 8008944:	2001      	movs	r0, #1
 8008946:	4240      	negs	r0, r0
 8008948:	b00b      	add	sp, #44	; 0x2c
 800894a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800894c:	2220      	movs	r2, #32
 800894e:	6809      	ldr	r1, [r1, #0]
 8008950:	430a      	orrs	r2, r1
 8008952:	6022      	str	r2, [r4, #0]
 8008954:	0022      	movs	r2, r4
 8008956:	2178      	movs	r1, #120	; 0x78
 8008958:	3245      	adds	r2, #69	; 0x45
 800895a:	7011      	strb	r1, [r2, #0]
 800895c:	4a27      	ldr	r2, [pc, #156]	; (80089fc <_printf_i+0x220>)
 800895e:	e7a7      	b.n	80088b0 <_printf_i+0xd4>
 8008960:	0648      	lsls	r0, r1, #25
 8008962:	d5ac      	bpl.n	80088be <_printf_i+0xe2>
 8008964:	b2ad      	uxth	r5, r5
 8008966:	e7aa      	b.n	80088be <_printf_i+0xe2>
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	680d      	ldr	r5, [r1, #0]
 800896c:	1d10      	adds	r0, r2, #4
 800896e:	6949      	ldr	r1, [r1, #20]
 8008970:	6018      	str	r0, [r3, #0]
 8008972:	6813      	ldr	r3, [r2, #0]
 8008974:	062e      	lsls	r6, r5, #24
 8008976:	d501      	bpl.n	800897c <_printf_i+0x1a0>
 8008978:	6019      	str	r1, [r3, #0]
 800897a:	e002      	b.n	8008982 <_printf_i+0x1a6>
 800897c:	066d      	lsls	r5, r5, #25
 800897e:	d5fb      	bpl.n	8008978 <_printf_i+0x19c>
 8008980:	8019      	strh	r1, [r3, #0]
 8008982:	2300      	movs	r3, #0
 8008984:	9e04      	ldr	r6, [sp, #16]
 8008986:	6123      	str	r3, [r4, #16]
 8008988:	e7d2      	b.n	8008930 <_printf_i+0x154>
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	1d11      	adds	r1, r2, #4
 800898e:	6019      	str	r1, [r3, #0]
 8008990:	6816      	ldr	r6, [r2, #0]
 8008992:	2100      	movs	r1, #0
 8008994:	0030      	movs	r0, r6
 8008996:	6862      	ldr	r2, [r4, #4]
 8008998:	f000 ff0a 	bl	80097b0 <memchr>
 800899c:	2800      	cmp	r0, #0
 800899e:	d001      	beq.n	80089a4 <_printf_i+0x1c8>
 80089a0:	1b80      	subs	r0, r0, r6
 80089a2:	6060      	str	r0, [r4, #4]
 80089a4:	6863      	ldr	r3, [r4, #4]
 80089a6:	6123      	str	r3, [r4, #16]
 80089a8:	2300      	movs	r3, #0
 80089aa:	9a04      	ldr	r2, [sp, #16]
 80089ac:	7013      	strb	r3, [r2, #0]
 80089ae:	e7bf      	b.n	8008930 <_printf_i+0x154>
 80089b0:	6923      	ldr	r3, [r4, #16]
 80089b2:	0032      	movs	r2, r6
 80089b4:	9906      	ldr	r1, [sp, #24]
 80089b6:	9805      	ldr	r0, [sp, #20]
 80089b8:	9d07      	ldr	r5, [sp, #28]
 80089ba:	47a8      	blx	r5
 80089bc:	1c43      	adds	r3, r0, #1
 80089be:	d0c1      	beq.n	8008944 <_printf_i+0x168>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	079b      	lsls	r3, r3, #30
 80089c4:	d415      	bmi.n	80089f2 <_printf_i+0x216>
 80089c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089c8:	68e0      	ldr	r0, [r4, #12]
 80089ca:	4298      	cmp	r0, r3
 80089cc:	dabc      	bge.n	8008948 <_printf_i+0x16c>
 80089ce:	0018      	movs	r0, r3
 80089d0:	e7ba      	b.n	8008948 <_printf_i+0x16c>
 80089d2:	0022      	movs	r2, r4
 80089d4:	2301      	movs	r3, #1
 80089d6:	9906      	ldr	r1, [sp, #24]
 80089d8:	9805      	ldr	r0, [sp, #20]
 80089da:	9e07      	ldr	r6, [sp, #28]
 80089dc:	3219      	adds	r2, #25
 80089de:	47b0      	blx	r6
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d0af      	beq.n	8008944 <_printf_i+0x168>
 80089e4:	3501      	adds	r5, #1
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089ea:	1a9b      	subs	r3, r3, r2
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	dcf0      	bgt.n	80089d2 <_printf_i+0x1f6>
 80089f0:	e7e9      	b.n	80089c6 <_printf_i+0x1ea>
 80089f2:	2500      	movs	r5, #0
 80089f4:	e7f7      	b.n	80089e6 <_printf_i+0x20a>
 80089f6:	46c0      	nop			; (mov r8, r8)
 80089f8:	0800b1be 	.word	0x0800b1be
 80089fc:	0800b1cf 	.word	0x0800b1cf

08008a00 <siprintf>:
 8008a00:	b40e      	push	{r1, r2, r3}
 8008a02:	b500      	push	{lr}
 8008a04:	490b      	ldr	r1, [pc, #44]	; (8008a34 <siprintf+0x34>)
 8008a06:	b09c      	sub	sp, #112	; 0x70
 8008a08:	ab1d      	add	r3, sp, #116	; 0x74
 8008a0a:	9002      	str	r0, [sp, #8]
 8008a0c:	9006      	str	r0, [sp, #24]
 8008a0e:	9107      	str	r1, [sp, #28]
 8008a10:	9104      	str	r1, [sp, #16]
 8008a12:	4809      	ldr	r0, [pc, #36]	; (8008a38 <siprintf+0x38>)
 8008a14:	4909      	ldr	r1, [pc, #36]	; (8008a3c <siprintf+0x3c>)
 8008a16:	cb04      	ldmia	r3!, {r2}
 8008a18:	9105      	str	r1, [sp, #20]
 8008a1a:	6800      	ldr	r0, [r0, #0]
 8008a1c:	a902      	add	r1, sp, #8
 8008a1e:	9301      	str	r3, [sp, #4]
 8008a20:	f001 fb90 	bl	800a144 <_svfiprintf_r>
 8008a24:	2300      	movs	r3, #0
 8008a26:	9a02      	ldr	r2, [sp, #8]
 8008a28:	7013      	strb	r3, [r2, #0]
 8008a2a:	b01c      	add	sp, #112	; 0x70
 8008a2c:	bc08      	pop	{r3}
 8008a2e:	b003      	add	sp, #12
 8008a30:	4718      	bx	r3
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	7fffffff 	.word	0x7fffffff
 8008a38:	20000010 	.word	0x20000010
 8008a3c:	ffff0208 	.word	0xffff0208

08008a40 <quorem>:
 8008a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a42:	0006      	movs	r6, r0
 8008a44:	690d      	ldr	r5, [r1, #16]
 8008a46:	6933      	ldr	r3, [r6, #16]
 8008a48:	b087      	sub	sp, #28
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	9102      	str	r1, [sp, #8]
 8008a4e:	42ab      	cmp	r3, r5
 8008a50:	db6b      	blt.n	8008b2a <quorem+0xea>
 8008a52:	000b      	movs	r3, r1
 8008a54:	3d01      	subs	r5, #1
 8008a56:	00ac      	lsls	r4, r5, #2
 8008a58:	3314      	adds	r3, #20
 8008a5a:	9305      	str	r3, [sp, #20]
 8008a5c:	191b      	adds	r3, r3, r4
 8008a5e:	9303      	str	r3, [sp, #12]
 8008a60:	0033      	movs	r3, r6
 8008a62:	3314      	adds	r3, #20
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	191c      	adds	r4, r3, r4
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	6827      	ldr	r7, [r4, #0]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	0038      	movs	r0, r7
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	3301      	adds	r3, #1
 8008a74:	0019      	movs	r1, r3
 8008a76:	9304      	str	r3, [sp, #16]
 8008a78:	f7f7 fb62 	bl	8000140 <__udivsi3>
 8008a7c:	9b04      	ldr	r3, [sp, #16]
 8008a7e:	9000      	str	r0, [sp, #0]
 8008a80:	429f      	cmp	r7, r3
 8008a82:	d329      	bcc.n	8008ad8 <quorem+0x98>
 8008a84:	2300      	movs	r3, #0
 8008a86:	469c      	mov	ip, r3
 8008a88:	9801      	ldr	r0, [sp, #4]
 8008a8a:	9f05      	ldr	r7, [sp, #20]
 8008a8c:	9304      	str	r3, [sp, #16]
 8008a8e:	cf08      	ldmia	r7!, {r3}
 8008a90:	9a00      	ldr	r2, [sp, #0]
 8008a92:	b299      	uxth	r1, r3
 8008a94:	4351      	muls	r1, r2
 8008a96:	0c1b      	lsrs	r3, r3, #16
 8008a98:	4353      	muls	r3, r2
 8008a9a:	4461      	add	r1, ip
 8008a9c:	0c0a      	lsrs	r2, r1, #16
 8008a9e:	189b      	adds	r3, r3, r2
 8008aa0:	0c1a      	lsrs	r2, r3, #16
 8008aa2:	9305      	str	r3, [sp, #20]
 8008aa4:	6803      	ldr	r3, [r0, #0]
 8008aa6:	4694      	mov	ip, r2
 8008aa8:	b29a      	uxth	r2, r3
 8008aaa:	9b04      	ldr	r3, [sp, #16]
 8008aac:	b289      	uxth	r1, r1
 8008aae:	18d2      	adds	r2, r2, r3
 8008ab0:	6803      	ldr	r3, [r0, #0]
 8008ab2:	1a52      	subs	r2, r2, r1
 8008ab4:	0c19      	lsrs	r1, r3, #16
 8008ab6:	466b      	mov	r3, sp
 8008ab8:	8a9b      	ldrh	r3, [r3, #20]
 8008aba:	1acb      	subs	r3, r1, r3
 8008abc:	1411      	asrs	r1, r2, #16
 8008abe:	185b      	adds	r3, r3, r1
 8008ac0:	1419      	asrs	r1, r3, #16
 8008ac2:	b292      	uxth	r2, r2
 8008ac4:	041b      	lsls	r3, r3, #16
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	9104      	str	r1, [sp, #16]
 8008acc:	c004      	stmia	r0!, {r2}
 8008ace:	42bb      	cmp	r3, r7
 8008ad0:	d2dd      	bcs.n	8008a8e <quorem+0x4e>
 8008ad2:	6823      	ldr	r3, [r4, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d02e      	beq.n	8008b36 <quorem+0xf6>
 8008ad8:	0030      	movs	r0, r6
 8008ada:	9902      	ldr	r1, [sp, #8]
 8008adc:	f001 f902 	bl	8009ce4 <__mcmp>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	db21      	blt.n	8008b28 <quorem+0xe8>
 8008ae4:	0030      	movs	r0, r6
 8008ae6:	2400      	movs	r4, #0
 8008ae8:	9b00      	ldr	r3, [sp, #0]
 8008aea:	9902      	ldr	r1, [sp, #8]
 8008aec:	3301      	adds	r3, #1
 8008aee:	9300      	str	r3, [sp, #0]
 8008af0:	3014      	adds	r0, #20
 8008af2:	3114      	adds	r1, #20
 8008af4:	6802      	ldr	r2, [r0, #0]
 8008af6:	c908      	ldmia	r1!, {r3}
 8008af8:	b292      	uxth	r2, r2
 8008afa:	1914      	adds	r4, r2, r4
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	1aa2      	subs	r2, r4, r2
 8008b00:	6804      	ldr	r4, [r0, #0]
 8008b02:	0c1b      	lsrs	r3, r3, #16
 8008b04:	0c24      	lsrs	r4, r4, #16
 8008b06:	1ae3      	subs	r3, r4, r3
 8008b08:	1414      	asrs	r4, r2, #16
 8008b0a:	191b      	adds	r3, r3, r4
 8008b0c:	141c      	asrs	r4, r3, #16
 8008b0e:	b292      	uxth	r2, r2
 8008b10:	041b      	lsls	r3, r3, #16
 8008b12:	4313      	orrs	r3, r2
 8008b14:	c008      	stmia	r0!, {r3}
 8008b16:	9b03      	ldr	r3, [sp, #12]
 8008b18:	428b      	cmp	r3, r1
 8008b1a:	d2eb      	bcs.n	8008af4 <quorem+0xb4>
 8008b1c:	9a01      	ldr	r2, [sp, #4]
 8008b1e:	00ab      	lsls	r3, r5, #2
 8008b20:	18d3      	adds	r3, r2, r3
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	d010      	beq.n	8008b4a <quorem+0x10a>
 8008b28:	9800      	ldr	r0, [sp, #0]
 8008b2a:	b007      	add	sp, #28
 8008b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <quorem+0xfe>
 8008b34:	3d01      	subs	r5, #1
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	3c04      	subs	r4, #4
 8008b3a:	42a3      	cmp	r3, r4
 8008b3c:	d3f7      	bcc.n	8008b2e <quorem+0xee>
 8008b3e:	6135      	str	r5, [r6, #16]
 8008b40:	e7ca      	b.n	8008ad8 <quorem+0x98>
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	2a00      	cmp	r2, #0
 8008b46:	d104      	bne.n	8008b52 <quorem+0x112>
 8008b48:	3d01      	subs	r5, #1
 8008b4a:	9a01      	ldr	r2, [sp, #4]
 8008b4c:	3b04      	subs	r3, #4
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d3f7      	bcc.n	8008b42 <quorem+0x102>
 8008b52:	6135      	str	r5, [r6, #16]
 8008b54:	e7e8      	b.n	8008b28 <quorem+0xe8>
	...

08008b58 <_dtoa_r>:
 8008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b5a:	b09d      	sub	sp, #116	; 0x74
 8008b5c:	9202      	str	r2, [sp, #8]
 8008b5e:	9303      	str	r3, [sp, #12]
 8008b60:	9b02      	ldr	r3, [sp, #8]
 8008b62:	9c03      	ldr	r4, [sp, #12]
 8008b64:	930a      	str	r3, [sp, #40]	; 0x28
 8008b66:	940b      	str	r4, [sp, #44]	; 0x2c
 8008b68:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008b6a:	0007      	movs	r7, r0
 8008b6c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8008b6e:	2c00      	cmp	r4, #0
 8008b70:	d10e      	bne.n	8008b90 <_dtoa_r+0x38>
 8008b72:	2010      	movs	r0, #16
 8008b74:	f000 fe12 	bl	800979c <malloc>
 8008b78:	1e02      	subs	r2, r0, #0
 8008b7a:	6278      	str	r0, [r7, #36]	; 0x24
 8008b7c:	d104      	bne.n	8008b88 <_dtoa_r+0x30>
 8008b7e:	21ea      	movs	r1, #234	; 0xea
 8008b80:	4bc0      	ldr	r3, [pc, #768]	; (8008e84 <_dtoa_r+0x32c>)
 8008b82:	48c1      	ldr	r0, [pc, #772]	; (8008e88 <_dtoa_r+0x330>)
 8008b84:	f001 fbf0 	bl	800a368 <__assert_func>
 8008b88:	6044      	str	r4, [r0, #4]
 8008b8a:	6084      	str	r4, [r0, #8]
 8008b8c:	6004      	str	r4, [r0, #0]
 8008b8e:	60c4      	str	r4, [r0, #12]
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	6819      	ldr	r1, [r3, #0]
 8008b94:	2900      	cmp	r1, #0
 8008b96:	d00a      	beq.n	8008bae <_dtoa_r+0x56>
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	4093      	lsls	r3, r2
 8008b9e:	604a      	str	r2, [r1, #4]
 8008ba0:	608b      	str	r3, [r1, #8]
 8008ba2:	0038      	movs	r0, r7
 8008ba4:	f000 fe5c 	bl	8009860 <_Bfree>
 8008ba8:	2200      	movs	r2, #0
 8008baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	9b03      	ldr	r3, [sp, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	da21      	bge.n	8008bf8 <_dtoa_r+0xa0>
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	085b      	lsrs	r3, r3, #1
 8008bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bc0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008bc2:	4bb2      	ldr	r3, [pc, #712]	; (8008e8c <_dtoa_r+0x334>)
 8008bc4:	002a      	movs	r2, r5
 8008bc6:	9318      	str	r3, [sp, #96]	; 0x60
 8008bc8:	401a      	ands	r2, r3
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d117      	bne.n	8008bfe <_dtoa_r+0xa6>
 8008bce:	4bb0      	ldr	r3, [pc, #704]	; (8008e90 <_dtoa_r+0x338>)
 8008bd0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008bd2:	0328      	lsls	r0, r5, #12
 8008bd4:	6013      	str	r3, [r2, #0]
 8008bd6:	9b02      	ldr	r3, [sp, #8]
 8008bd8:	0b00      	lsrs	r0, r0, #12
 8008bda:	4318      	orrs	r0, r3
 8008bdc:	d101      	bne.n	8008be2 <_dtoa_r+0x8a>
 8008bde:	f000 fdc3 	bl	8009768 <_dtoa_r+0xc10>
 8008be2:	48ac      	ldr	r0, [pc, #688]	; (8008e94 <_dtoa_r+0x33c>)
 8008be4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008be6:	9005      	str	r0, [sp, #20]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <_dtoa_r+0x9a>
 8008bec:	4baa      	ldr	r3, [pc, #680]	; (8008e98 <_dtoa_r+0x340>)
 8008bee:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	9805      	ldr	r0, [sp, #20]
 8008bf4:	b01d      	add	sp, #116	; 0x74
 8008bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	e7e0      	b.n	8008bc0 <_dtoa_r+0x68>
 8008bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008c02:	9312      	str	r3, [sp, #72]	; 0x48
 8008c04:	9413      	str	r4, [sp, #76]	; 0x4c
 8008c06:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c08:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f7f7 fc1d 	bl	800044c <__aeabi_dcmpeq>
 8008c12:	1e04      	subs	r4, r0, #0
 8008c14:	d00b      	beq.n	8008c2e <_dtoa_r+0xd6>
 8008c16:	2301      	movs	r3, #1
 8008c18:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	4b9f      	ldr	r3, [pc, #636]	; (8008e9c <_dtoa_r+0x344>)
 8008c1e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	d0e5      	beq.n	8008bf2 <_dtoa_r+0x9a>
 8008c26:	4a9e      	ldr	r2, [pc, #632]	; (8008ea0 <_dtoa_r+0x348>)
 8008c28:	9926      	ldr	r1, [sp, #152]	; 0x98
 8008c2a:	600a      	str	r2, [r1, #0]
 8008c2c:	e7e1      	b.n	8008bf2 <_dtoa_r+0x9a>
 8008c2e:	ab1a      	add	r3, sp, #104	; 0x68
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	ab1b      	add	r3, sp, #108	; 0x6c
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	0038      	movs	r0, r7
 8008c38:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c3c:	f001 f906 	bl	8009e4c <__d2b>
 8008c40:	006e      	lsls	r6, r5, #1
 8008c42:	9004      	str	r0, [sp, #16]
 8008c44:	0d76      	lsrs	r6, r6, #21
 8008c46:	d100      	bne.n	8008c4a <_dtoa_r+0xf2>
 8008c48:	e07c      	b.n	8008d44 <_dtoa_r+0x1ec>
 8008c4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008c4c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008c4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008c50:	4a94      	ldr	r2, [pc, #592]	; (8008ea4 <_dtoa_r+0x34c>)
 8008c52:	031b      	lsls	r3, r3, #12
 8008c54:	0b1b      	lsrs	r3, r3, #12
 8008c56:	431a      	orrs	r2, r3
 8008c58:	0011      	movs	r1, r2
 8008c5a:	4b93      	ldr	r3, [pc, #588]	; (8008ea8 <_dtoa_r+0x350>)
 8008c5c:	9416      	str	r4, [sp, #88]	; 0x58
 8008c5e:	18f6      	adds	r6, r6, r3
 8008c60:	2200      	movs	r2, #0
 8008c62:	4b92      	ldr	r3, [pc, #584]	; (8008eac <_dtoa_r+0x354>)
 8008c64:	f7f8 ff2e 	bl	8001ac4 <__aeabi_dsub>
 8008c68:	4a91      	ldr	r2, [pc, #580]	; (8008eb0 <_dtoa_r+0x358>)
 8008c6a:	4b92      	ldr	r3, [pc, #584]	; (8008eb4 <_dtoa_r+0x35c>)
 8008c6c:	f7f8 fcbe 	bl	80015ec <__aeabi_dmul>
 8008c70:	4a91      	ldr	r2, [pc, #580]	; (8008eb8 <_dtoa_r+0x360>)
 8008c72:	4b92      	ldr	r3, [pc, #584]	; (8008ebc <_dtoa_r+0x364>)
 8008c74:	f7f7 fd4a 	bl	800070c <__aeabi_dadd>
 8008c78:	0004      	movs	r4, r0
 8008c7a:	0030      	movs	r0, r6
 8008c7c:	000d      	movs	r5, r1
 8008c7e:	f7f9 fb07 	bl	8002290 <__aeabi_i2d>
 8008c82:	4a8f      	ldr	r2, [pc, #572]	; (8008ec0 <_dtoa_r+0x368>)
 8008c84:	4b8f      	ldr	r3, [pc, #572]	; (8008ec4 <_dtoa_r+0x36c>)
 8008c86:	f7f8 fcb1 	bl	80015ec <__aeabi_dmul>
 8008c8a:	0002      	movs	r2, r0
 8008c8c:	000b      	movs	r3, r1
 8008c8e:	0020      	movs	r0, r4
 8008c90:	0029      	movs	r1, r5
 8008c92:	f7f7 fd3b 	bl	800070c <__aeabi_dadd>
 8008c96:	0004      	movs	r4, r0
 8008c98:	000d      	movs	r5, r1
 8008c9a:	f7f9 fac3 	bl	8002224 <__aeabi_d2iz>
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	9002      	str	r0, [sp, #8]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	0020      	movs	r0, r4
 8008ca6:	0029      	movs	r1, r5
 8008ca8:	f7f7 fbd6 	bl	8000458 <__aeabi_dcmplt>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d00b      	beq.n	8008cc8 <_dtoa_r+0x170>
 8008cb0:	9802      	ldr	r0, [sp, #8]
 8008cb2:	f7f9 faed 	bl	8002290 <__aeabi_i2d>
 8008cb6:	002b      	movs	r3, r5
 8008cb8:	0022      	movs	r2, r4
 8008cba:	f7f7 fbc7 	bl	800044c <__aeabi_dcmpeq>
 8008cbe:	4243      	negs	r3, r0
 8008cc0:	4158      	adcs	r0, r3
 8008cc2:	9b02      	ldr	r3, [sp, #8]
 8008cc4:	1a1b      	subs	r3, r3, r0
 8008cc6:	9302      	str	r3, [sp, #8]
 8008cc8:	2301      	movs	r3, #1
 8008cca:	9315      	str	r3, [sp, #84]	; 0x54
 8008ccc:	9b02      	ldr	r3, [sp, #8]
 8008cce:	2b16      	cmp	r3, #22
 8008cd0:	d80f      	bhi.n	8008cf2 <_dtoa_r+0x19a>
 8008cd2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008cd4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008cd6:	00da      	lsls	r2, r3, #3
 8008cd8:	4b7b      	ldr	r3, [pc, #492]	; (8008ec8 <_dtoa_r+0x370>)
 8008cda:	189b      	adds	r3, r3, r2
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f7f7 fbba 	bl	8000458 <__aeabi_dcmplt>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d049      	beq.n	8008d7c <_dtoa_r+0x224>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	9302      	str	r3, [sp, #8]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9315      	str	r3, [sp, #84]	; 0x54
 8008cf2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008cf4:	1b9e      	subs	r6, r3, r6
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9308      	str	r3, [sp, #32]
 8008cfa:	0033      	movs	r3, r6
 8008cfc:	3b01      	subs	r3, #1
 8008cfe:	930d      	str	r3, [sp, #52]	; 0x34
 8008d00:	d504      	bpl.n	8008d0c <_dtoa_r+0x1b4>
 8008d02:	2301      	movs	r3, #1
 8008d04:	1b9b      	subs	r3, r3, r6
 8008d06:	9308      	str	r3, [sp, #32]
 8008d08:	2300      	movs	r3, #0
 8008d0a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d0c:	9b02      	ldr	r3, [sp, #8]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	db36      	blt.n	8008d80 <_dtoa_r+0x228>
 8008d12:	9a02      	ldr	r2, [sp, #8]
 8008d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d16:	4694      	mov	ip, r2
 8008d18:	4463      	add	r3, ip
 8008d1a:	930d      	str	r3, [sp, #52]	; 0x34
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	9214      	str	r2, [sp, #80]	; 0x50
 8008d20:	930e      	str	r3, [sp, #56]	; 0x38
 8008d22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d24:	2401      	movs	r4, #1
 8008d26:	2b09      	cmp	r3, #9
 8008d28:	d862      	bhi.n	8008df0 <_dtoa_r+0x298>
 8008d2a:	2b05      	cmp	r3, #5
 8008d2c:	dd02      	ble.n	8008d34 <_dtoa_r+0x1dc>
 8008d2e:	2400      	movs	r4, #0
 8008d30:	3b04      	subs	r3, #4
 8008d32:	9322      	str	r3, [sp, #136]	; 0x88
 8008d34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d36:	1e98      	subs	r0, r3, #2
 8008d38:	2803      	cmp	r0, #3
 8008d3a:	d862      	bhi.n	8008e02 <_dtoa_r+0x2aa>
 8008d3c:	f7f7 f9ec 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008d40:	56343629 	.word	0x56343629
 8008d44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008d46:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8008d48:	189e      	adds	r6, r3, r2
 8008d4a:	4b60      	ldr	r3, [pc, #384]	; (8008ecc <_dtoa_r+0x374>)
 8008d4c:	18f2      	adds	r2, r6, r3
 8008d4e:	2a20      	cmp	r2, #32
 8008d50:	dd0f      	ble.n	8008d72 <_dtoa_r+0x21a>
 8008d52:	2340      	movs	r3, #64	; 0x40
 8008d54:	1a9b      	subs	r3, r3, r2
 8008d56:	409d      	lsls	r5, r3
 8008d58:	4b5d      	ldr	r3, [pc, #372]	; (8008ed0 <_dtoa_r+0x378>)
 8008d5a:	9802      	ldr	r0, [sp, #8]
 8008d5c:	18f3      	adds	r3, r6, r3
 8008d5e:	40d8      	lsrs	r0, r3
 8008d60:	4328      	orrs	r0, r5
 8008d62:	f7f9 fac5 	bl	80022f0 <__aeabi_ui2d>
 8008d66:	2301      	movs	r3, #1
 8008d68:	4c5a      	ldr	r4, [pc, #360]	; (8008ed4 <_dtoa_r+0x37c>)
 8008d6a:	3e01      	subs	r6, #1
 8008d6c:	1909      	adds	r1, r1, r4
 8008d6e:	9316      	str	r3, [sp, #88]	; 0x58
 8008d70:	e776      	b.n	8008c60 <_dtoa_r+0x108>
 8008d72:	2320      	movs	r3, #32
 8008d74:	9802      	ldr	r0, [sp, #8]
 8008d76:	1a9b      	subs	r3, r3, r2
 8008d78:	4098      	lsls	r0, r3
 8008d7a:	e7f2      	b.n	8008d62 <_dtoa_r+0x20a>
 8008d7c:	9015      	str	r0, [sp, #84]	; 0x54
 8008d7e:	e7b8      	b.n	8008cf2 <_dtoa_r+0x19a>
 8008d80:	9b08      	ldr	r3, [sp, #32]
 8008d82:	9a02      	ldr	r2, [sp, #8]
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	9308      	str	r3, [sp, #32]
 8008d88:	4253      	negs	r3, r2
 8008d8a:	930e      	str	r3, [sp, #56]	; 0x38
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9314      	str	r3, [sp, #80]	; 0x50
 8008d90:	e7c7      	b.n	8008d22 <_dtoa_r+0x1ca>
 8008d92:	2300      	movs	r3, #0
 8008d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	dc36      	bgt.n	8008e0a <_dtoa_r+0x2b2>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	001a      	movs	r2, r3
 8008da0:	930c      	str	r3, [sp, #48]	; 0x30
 8008da2:	9306      	str	r3, [sp, #24]
 8008da4:	9223      	str	r2, [sp, #140]	; 0x8c
 8008da6:	e00d      	b.n	8008dc4 <_dtoa_r+0x26c>
 8008da8:	2301      	movs	r3, #1
 8008daa:	e7f3      	b.n	8008d94 <_dtoa_r+0x23c>
 8008dac:	2300      	movs	r3, #0
 8008dae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008db0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008db2:	4694      	mov	ip, r2
 8008db4:	9b02      	ldr	r3, [sp, #8]
 8008db6:	4463      	add	r3, ip
 8008db8:	930c      	str	r3, [sp, #48]	; 0x30
 8008dba:	3301      	adds	r3, #1
 8008dbc:	9306      	str	r3, [sp, #24]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	dc00      	bgt.n	8008dc4 <_dtoa_r+0x26c>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008dc8:	6042      	str	r2, [r0, #4]
 8008dca:	3204      	adds	r2, #4
 8008dcc:	0015      	movs	r5, r2
 8008dce:	3514      	adds	r5, #20
 8008dd0:	6841      	ldr	r1, [r0, #4]
 8008dd2:	429d      	cmp	r5, r3
 8008dd4:	d91d      	bls.n	8008e12 <_dtoa_r+0x2ba>
 8008dd6:	0038      	movs	r0, r7
 8008dd8:	f000 fcfe 	bl	80097d8 <_Balloc>
 8008ddc:	9005      	str	r0, [sp, #20]
 8008dde:	2800      	cmp	r0, #0
 8008de0:	d11b      	bne.n	8008e1a <_dtoa_r+0x2c2>
 8008de2:	21d5      	movs	r1, #213	; 0xd5
 8008de4:	0002      	movs	r2, r0
 8008de6:	4b3c      	ldr	r3, [pc, #240]	; (8008ed8 <_dtoa_r+0x380>)
 8008de8:	0049      	lsls	r1, r1, #1
 8008dea:	e6ca      	b.n	8008b82 <_dtoa_r+0x2a>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e7de      	b.n	8008dae <_dtoa_r+0x256>
 8008df0:	2300      	movs	r3, #0
 8008df2:	940f      	str	r4, [sp, #60]	; 0x3c
 8008df4:	9322      	str	r3, [sp, #136]	; 0x88
 8008df6:	3b01      	subs	r3, #1
 8008df8:	930c      	str	r3, [sp, #48]	; 0x30
 8008dfa:	9306      	str	r3, [sp, #24]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	3313      	adds	r3, #19
 8008e00:	e7d0      	b.n	8008da4 <_dtoa_r+0x24c>
 8008e02:	2301      	movs	r3, #1
 8008e04:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e06:	3b02      	subs	r3, #2
 8008e08:	e7f6      	b.n	8008df8 <_dtoa_r+0x2a0>
 8008e0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e0c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e0e:	9306      	str	r3, [sp, #24]
 8008e10:	e7d8      	b.n	8008dc4 <_dtoa_r+0x26c>
 8008e12:	3101      	adds	r1, #1
 8008e14:	6041      	str	r1, [r0, #4]
 8008e16:	0052      	lsls	r2, r2, #1
 8008e18:	e7d8      	b.n	8008dcc <_dtoa_r+0x274>
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	9a05      	ldr	r2, [sp, #20]
 8008e1e:	601a      	str	r2, [r3, #0]
 8008e20:	9b06      	ldr	r3, [sp, #24]
 8008e22:	2b0e      	cmp	r3, #14
 8008e24:	d900      	bls.n	8008e28 <_dtoa_r+0x2d0>
 8008e26:	e0eb      	b.n	8009000 <_dtoa_r+0x4a8>
 8008e28:	2c00      	cmp	r4, #0
 8008e2a:	d100      	bne.n	8008e2e <_dtoa_r+0x2d6>
 8008e2c:	e0e8      	b.n	8009000 <_dtoa_r+0x4a8>
 8008e2e:	9b02      	ldr	r3, [sp, #8]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	dd68      	ble.n	8008f06 <_dtoa_r+0x3ae>
 8008e34:	001a      	movs	r2, r3
 8008e36:	210f      	movs	r1, #15
 8008e38:	4b23      	ldr	r3, [pc, #140]	; (8008ec8 <_dtoa_r+0x370>)
 8008e3a:	400a      	ands	r2, r1
 8008e3c:	00d2      	lsls	r2, r2, #3
 8008e3e:	189b      	adds	r3, r3, r2
 8008e40:	681d      	ldr	r5, [r3, #0]
 8008e42:	685e      	ldr	r6, [r3, #4]
 8008e44:	9b02      	ldr	r3, [sp, #8]
 8008e46:	111c      	asrs	r4, r3, #4
 8008e48:	2302      	movs	r3, #2
 8008e4a:	9310      	str	r3, [sp, #64]	; 0x40
 8008e4c:	9b02      	ldr	r3, [sp, #8]
 8008e4e:	05db      	lsls	r3, r3, #23
 8008e50:	d50b      	bpl.n	8008e6a <_dtoa_r+0x312>
 8008e52:	4b22      	ldr	r3, [pc, #136]	; (8008edc <_dtoa_r+0x384>)
 8008e54:	400c      	ands	r4, r1
 8008e56:	6a1a      	ldr	r2, [r3, #32]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008e5c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008e5e:	f7f7 ffbf 	bl	8000de0 <__aeabi_ddiv>
 8008e62:	2303      	movs	r3, #3
 8008e64:	900a      	str	r0, [sp, #40]	; 0x28
 8008e66:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e68:	9310      	str	r3, [sp, #64]	; 0x40
 8008e6a:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <_dtoa_r+0x384>)
 8008e6c:	9307      	str	r3, [sp, #28]
 8008e6e:	2c00      	cmp	r4, #0
 8008e70:	d136      	bne.n	8008ee0 <_dtoa_r+0x388>
 8008e72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008e74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008e76:	002a      	movs	r2, r5
 8008e78:	0033      	movs	r3, r6
 8008e7a:	f7f7 ffb1 	bl	8000de0 <__aeabi_ddiv>
 8008e7e:	900a      	str	r0, [sp, #40]	; 0x28
 8008e80:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e82:	e05c      	b.n	8008f3e <_dtoa_r+0x3e6>
 8008e84:	0800b1ed 	.word	0x0800b1ed
 8008e88:	0800b204 	.word	0x0800b204
 8008e8c:	7ff00000 	.word	0x7ff00000
 8008e90:	0000270f 	.word	0x0000270f
 8008e94:	0800b1e9 	.word	0x0800b1e9
 8008e98:	0800b1ec 	.word	0x0800b1ec
 8008e9c:	0800b1bc 	.word	0x0800b1bc
 8008ea0:	0800b1bd 	.word	0x0800b1bd
 8008ea4:	3ff00000 	.word	0x3ff00000
 8008ea8:	fffffc01 	.word	0xfffffc01
 8008eac:	3ff80000 	.word	0x3ff80000
 8008eb0:	636f4361 	.word	0x636f4361
 8008eb4:	3fd287a7 	.word	0x3fd287a7
 8008eb8:	8b60c8b3 	.word	0x8b60c8b3
 8008ebc:	3fc68a28 	.word	0x3fc68a28
 8008ec0:	509f79fb 	.word	0x509f79fb
 8008ec4:	3fd34413 	.word	0x3fd34413
 8008ec8:	0800b300 	.word	0x0800b300
 8008ecc:	00000432 	.word	0x00000432
 8008ed0:	00000412 	.word	0x00000412
 8008ed4:	fe100000 	.word	0xfe100000
 8008ed8:	0800b263 	.word	0x0800b263
 8008edc:	0800b2d8 	.word	0x0800b2d8
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	421c      	tst	r4, r3
 8008ee4:	d00b      	beq.n	8008efe <_dtoa_r+0x3a6>
 8008ee6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ee8:	0028      	movs	r0, r5
 8008eea:	3301      	adds	r3, #1
 8008eec:	9310      	str	r3, [sp, #64]	; 0x40
 8008eee:	9b07      	ldr	r3, [sp, #28]
 8008ef0:	0031      	movs	r1, r6
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	f7f8 fb79 	bl	80015ec <__aeabi_dmul>
 8008efa:	0005      	movs	r5, r0
 8008efc:	000e      	movs	r6, r1
 8008efe:	9b07      	ldr	r3, [sp, #28]
 8008f00:	1064      	asrs	r4, r4, #1
 8008f02:	3308      	adds	r3, #8
 8008f04:	e7b2      	b.n	8008e6c <_dtoa_r+0x314>
 8008f06:	2302      	movs	r3, #2
 8008f08:	9310      	str	r3, [sp, #64]	; 0x40
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d016      	beq.n	8008f3e <_dtoa_r+0x3e6>
 8008f10:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008f12:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008f14:	425c      	negs	r4, r3
 8008f16:	230f      	movs	r3, #15
 8008f18:	4ab5      	ldr	r2, [pc, #724]	; (80091f0 <_dtoa_r+0x698>)
 8008f1a:	4023      	ands	r3, r4
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	18d3      	adds	r3, r2, r3
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f7f8 fb62 	bl	80015ec <__aeabi_dmul>
 8008f28:	2601      	movs	r6, #1
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	900a      	str	r0, [sp, #40]	; 0x28
 8008f2e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008f30:	4db0      	ldr	r5, [pc, #704]	; (80091f4 <_dtoa_r+0x69c>)
 8008f32:	1124      	asrs	r4, r4, #4
 8008f34:	2c00      	cmp	r4, #0
 8008f36:	d000      	beq.n	8008f3a <_dtoa_r+0x3e2>
 8008f38:	e094      	b.n	8009064 <_dtoa_r+0x50c>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d19f      	bne.n	8008e7e <_dtoa_r+0x326>
 8008f3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d100      	bne.n	8008f46 <_dtoa_r+0x3ee>
 8008f44:	e09b      	b.n	800907e <_dtoa_r+0x526>
 8008f46:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f48:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	0020      	movs	r0, r4
 8008f4e:	0029      	movs	r1, r5
 8008f50:	4ba9      	ldr	r3, [pc, #676]	; (80091f8 <_dtoa_r+0x6a0>)
 8008f52:	f7f7 fa81 	bl	8000458 <__aeabi_dcmplt>
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d100      	bne.n	8008f5c <_dtoa_r+0x404>
 8008f5a:	e090      	b.n	800907e <_dtoa_r+0x526>
 8008f5c:	9b06      	ldr	r3, [sp, #24]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d100      	bne.n	8008f64 <_dtoa_r+0x40c>
 8008f62:	e08c      	b.n	800907e <_dtoa_r+0x526>
 8008f64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	dd46      	ble.n	8008ff8 <_dtoa_r+0x4a0>
 8008f6a:	9b02      	ldr	r3, [sp, #8]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	0020      	movs	r0, r4
 8008f70:	0029      	movs	r1, r5
 8008f72:	1e5e      	subs	r6, r3, #1
 8008f74:	4ba1      	ldr	r3, [pc, #644]	; (80091fc <_dtoa_r+0x6a4>)
 8008f76:	f7f8 fb39 	bl	80015ec <__aeabi_dmul>
 8008f7a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f7c:	900a      	str	r0, [sp, #40]	; 0x28
 8008f7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008f80:	3301      	adds	r3, #1
 8008f82:	9310      	str	r3, [sp, #64]	; 0x40
 8008f84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008f88:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008f8a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8008f8c:	9307      	str	r3, [sp, #28]
 8008f8e:	f7f9 f97f 	bl	8002290 <__aeabi_i2d>
 8008f92:	0022      	movs	r2, r4
 8008f94:	002b      	movs	r3, r5
 8008f96:	f7f8 fb29 	bl	80015ec <__aeabi_dmul>
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4b98      	ldr	r3, [pc, #608]	; (8009200 <_dtoa_r+0x6a8>)
 8008f9e:	f7f7 fbb5 	bl	800070c <__aeabi_dadd>
 8008fa2:	9010      	str	r0, [sp, #64]	; 0x40
 8008fa4:	9111      	str	r1, [sp, #68]	; 0x44
 8008fa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008fa8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008faa:	920a      	str	r2, [sp, #40]	; 0x28
 8008fac:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fae:	4a95      	ldr	r2, [pc, #596]	; (8009204 <_dtoa_r+0x6ac>)
 8008fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008fb2:	4694      	mov	ip, r2
 8008fb4:	4463      	add	r3, ip
 8008fb6:	9317      	str	r3, [sp, #92]	; 0x5c
 8008fb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fba:	9b07      	ldr	r3, [sp, #28]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d161      	bne.n	8009084 <_dtoa_r+0x52c>
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	0020      	movs	r0, r4
 8008fc4:	0029      	movs	r1, r5
 8008fc6:	4b90      	ldr	r3, [pc, #576]	; (8009208 <_dtoa_r+0x6b0>)
 8008fc8:	f7f8 fd7c 	bl	8001ac4 <__aeabi_dsub>
 8008fcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fd0:	0004      	movs	r4, r0
 8008fd2:	000d      	movs	r5, r1
 8008fd4:	f7f7 fa54 	bl	8000480 <__aeabi_dcmpgt>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d000      	beq.n	8008fde <_dtoa_r+0x486>
 8008fdc:	e2b5      	b.n	800954a <_dtoa_r+0x9f2>
 8008fde:	488b      	ldr	r0, [pc, #556]	; (800920c <_dtoa_r+0x6b4>)
 8008fe0:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008fe2:	4684      	mov	ip, r0
 8008fe4:	4461      	add	r1, ip
 8008fe6:	000b      	movs	r3, r1
 8008fe8:	0020      	movs	r0, r4
 8008fea:	0029      	movs	r1, r5
 8008fec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fee:	f7f7 fa33 	bl	8000458 <__aeabi_dcmplt>
 8008ff2:	2800      	cmp	r0, #0
 8008ff4:	d000      	beq.n	8008ff8 <_dtoa_r+0x4a0>
 8008ff6:	e2a5      	b.n	8009544 <_dtoa_r+0x9ec>
 8008ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008ffa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8008ffc:	930a      	str	r3, [sp, #40]	; 0x28
 8008ffe:	940b      	str	r4, [sp, #44]	; 0x2c
 8009000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009002:	2b00      	cmp	r3, #0
 8009004:	da00      	bge.n	8009008 <_dtoa_r+0x4b0>
 8009006:	e171      	b.n	80092ec <_dtoa_r+0x794>
 8009008:	9a02      	ldr	r2, [sp, #8]
 800900a:	2a0e      	cmp	r2, #14
 800900c:	dd00      	ble.n	8009010 <_dtoa_r+0x4b8>
 800900e:	e16d      	b.n	80092ec <_dtoa_r+0x794>
 8009010:	4b77      	ldr	r3, [pc, #476]	; (80091f0 <_dtoa_r+0x698>)
 8009012:	00d2      	lsls	r2, r2, #3
 8009014:	189b      	adds	r3, r3, r2
 8009016:	685c      	ldr	r4, [r3, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	9308      	str	r3, [sp, #32]
 800901c:	9409      	str	r4, [sp, #36]	; 0x24
 800901e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009020:	2b00      	cmp	r3, #0
 8009022:	db00      	blt.n	8009026 <_dtoa_r+0x4ce>
 8009024:	e0f6      	b.n	8009214 <_dtoa_r+0x6bc>
 8009026:	9b06      	ldr	r3, [sp, #24]
 8009028:	2b00      	cmp	r3, #0
 800902a:	dd00      	ble.n	800902e <_dtoa_r+0x4d6>
 800902c:	e0f2      	b.n	8009214 <_dtoa_r+0x6bc>
 800902e:	d000      	beq.n	8009032 <_dtoa_r+0x4da>
 8009030:	e288      	b.n	8009544 <_dtoa_r+0x9ec>
 8009032:	9808      	ldr	r0, [sp, #32]
 8009034:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009036:	2200      	movs	r2, #0
 8009038:	4b73      	ldr	r3, [pc, #460]	; (8009208 <_dtoa_r+0x6b0>)
 800903a:	f7f8 fad7 	bl	80015ec <__aeabi_dmul>
 800903e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009042:	f7f7 fa27 	bl	8000494 <__aeabi_dcmpge>
 8009046:	9e06      	ldr	r6, [sp, #24]
 8009048:	0035      	movs	r5, r6
 800904a:	2800      	cmp	r0, #0
 800904c:	d000      	beq.n	8009050 <_dtoa_r+0x4f8>
 800904e:	e25f      	b.n	8009510 <_dtoa_r+0x9b8>
 8009050:	9b05      	ldr	r3, [sp, #20]
 8009052:	9a05      	ldr	r2, [sp, #20]
 8009054:	3301      	adds	r3, #1
 8009056:	9307      	str	r3, [sp, #28]
 8009058:	2331      	movs	r3, #49	; 0x31
 800905a:	7013      	strb	r3, [r2, #0]
 800905c:	9b02      	ldr	r3, [sp, #8]
 800905e:	3301      	adds	r3, #1
 8009060:	9302      	str	r3, [sp, #8]
 8009062:	e25a      	b.n	800951a <_dtoa_r+0x9c2>
 8009064:	4234      	tst	r4, r6
 8009066:	d007      	beq.n	8009078 <_dtoa_r+0x520>
 8009068:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800906a:	3301      	adds	r3, #1
 800906c:	9310      	str	r3, [sp, #64]	; 0x40
 800906e:	682a      	ldr	r2, [r5, #0]
 8009070:	686b      	ldr	r3, [r5, #4]
 8009072:	f7f8 fabb 	bl	80015ec <__aeabi_dmul>
 8009076:	0033      	movs	r3, r6
 8009078:	1064      	asrs	r4, r4, #1
 800907a:	3508      	adds	r5, #8
 800907c:	e75a      	b.n	8008f34 <_dtoa_r+0x3dc>
 800907e:	9e02      	ldr	r6, [sp, #8]
 8009080:	9b06      	ldr	r3, [sp, #24]
 8009082:	e780      	b.n	8008f86 <_dtoa_r+0x42e>
 8009084:	9b07      	ldr	r3, [sp, #28]
 8009086:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009088:	1e5a      	subs	r2, r3, #1
 800908a:	4b59      	ldr	r3, [pc, #356]	; (80091f0 <_dtoa_r+0x698>)
 800908c:	00d2      	lsls	r2, r2, #3
 800908e:	189b      	adds	r3, r3, r2
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2900      	cmp	r1, #0
 8009096:	d051      	beq.n	800913c <_dtoa_r+0x5e4>
 8009098:	2000      	movs	r0, #0
 800909a:	495d      	ldr	r1, [pc, #372]	; (8009210 <_dtoa_r+0x6b8>)
 800909c:	f7f7 fea0 	bl	8000de0 <__aeabi_ddiv>
 80090a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090a4:	f7f8 fd0e 	bl	8001ac4 <__aeabi_dsub>
 80090a8:	9a05      	ldr	r2, [sp, #20]
 80090aa:	9b05      	ldr	r3, [sp, #20]
 80090ac:	4694      	mov	ip, r2
 80090ae:	9310      	str	r3, [sp, #64]	; 0x40
 80090b0:	9b07      	ldr	r3, [sp, #28]
 80090b2:	900a      	str	r0, [sp, #40]	; 0x28
 80090b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80090b6:	4463      	add	r3, ip
 80090b8:	9319      	str	r3, [sp, #100]	; 0x64
 80090ba:	0029      	movs	r1, r5
 80090bc:	0020      	movs	r0, r4
 80090be:	f7f9 f8b1 	bl	8002224 <__aeabi_d2iz>
 80090c2:	9017      	str	r0, [sp, #92]	; 0x5c
 80090c4:	f7f9 f8e4 	bl	8002290 <__aeabi_i2d>
 80090c8:	0002      	movs	r2, r0
 80090ca:	000b      	movs	r3, r1
 80090cc:	0020      	movs	r0, r4
 80090ce:	0029      	movs	r1, r5
 80090d0:	f7f8 fcf8 	bl	8001ac4 <__aeabi_dsub>
 80090d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80090d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80090d8:	3301      	adds	r3, #1
 80090da:	9307      	str	r3, [sp, #28]
 80090dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090de:	0004      	movs	r4, r0
 80090e0:	3330      	adds	r3, #48	; 0x30
 80090e2:	7013      	strb	r3, [r2, #0]
 80090e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090e8:	000d      	movs	r5, r1
 80090ea:	f7f7 f9b5 	bl	8000458 <__aeabi_dcmplt>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d175      	bne.n	80091de <_dtoa_r+0x686>
 80090f2:	0022      	movs	r2, r4
 80090f4:	002b      	movs	r3, r5
 80090f6:	2000      	movs	r0, #0
 80090f8:	493f      	ldr	r1, [pc, #252]	; (80091f8 <_dtoa_r+0x6a0>)
 80090fa:	f7f8 fce3 	bl	8001ac4 <__aeabi_dsub>
 80090fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009102:	f7f7 f9a9 	bl	8000458 <__aeabi_dcmplt>
 8009106:	2800      	cmp	r0, #0
 8009108:	d000      	beq.n	800910c <_dtoa_r+0x5b4>
 800910a:	e0d1      	b.n	80092b0 <_dtoa_r+0x758>
 800910c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800910e:	9a07      	ldr	r2, [sp, #28]
 8009110:	4293      	cmp	r3, r2
 8009112:	d100      	bne.n	8009116 <_dtoa_r+0x5be>
 8009114:	e770      	b.n	8008ff8 <_dtoa_r+0x4a0>
 8009116:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009118:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800911a:	2200      	movs	r2, #0
 800911c:	4b37      	ldr	r3, [pc, #220]	; (80091fc <_dtoa_r+0x6a4>)
 800911e:	f7f8 fa65 	bl	80015ec <__aeabi_dmul>
 8009122:	4b36      	ldr	r3, [pc, #216]	; (80091fc <_dtoa_r+0x6a4>)
 8009124:	900a      	str	r0, [sp, #40]	; 0x28
 8009126:	910b      	str	r1, [sp, #44]	; 0x2c
 8009128:	2200      	movs	r2, #0
 800912a:	0020      	movs	r0, r4
 800912c:	0029      	movs	r1, r5
 800912e:	f7f8 fa5d 	bl	80015ec <__aeabi_dmul>
 8009132:	9b07      	ldr	r3, [sp, #28]
 8009134:	0004      	movs	r4, r0
 8009136:	000d      	movs	r5, r1
 8009138:	9310      	str	r3, [sp, #64]	; 0x40
 800913a:	e7be      	b.n	80090ba <_dtoa_r+0x562>
 800913c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800913e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009140:	f7f8 fa54 	bl	80015ec <__aeabi_dmul>
 8009144:	9a05      	ldr	r2, [sp, #20]
 8009146:	9b05      	ldr	r3, [sp, #20]
 8009148:	4694      	mov	ip, r2
 800914a:	930a      	str	r3, [sp, #40]	; 0x28
 800914c:	9b07      	ldr	r3, [sp, #28]
 800914e:	9010      	str	r0, [sp, #64]	; 0x40
 8009150:	9111      	str	r1, [sp, #68]	; 0x44
 8009152:	4463      	add	r3, ip
 8009154:	9319      	str	r3, [sp, #100]	; 0x64
 8009156:	0029      	movs	r1, r5
 8009158:	0020      	movs	r0, r4
 800915a:	f7f9 f863 	bl	8002224 <__aeabi_d2iz>
 800915e:	9017      	str	r0, [sp, #92]	; 0x5c
 8009160:	f7f9 f896 	bl	8002290 <__aeabi_i2d>
 8009164:	0002      	movs	r2, r0
 8009166:	000b      	movs	r3, r1
 8009168:	0020      	movs	r0, r4
 800916a:	0029      	movs	r1, r5
 800916c:	f7f8 fcaa 	bl	8001ac4 <__aeabi_dsub>
 8009170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009172:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009174:	3330      	adds	r3, #48	; 0x30
 8009176:	7013      	strb	r3, [r2, #0]
 8009178:	0013      	movs	r3, r2
 800917a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800917c:	3301      	adds	r3, #1
 800917e:	0004      	movs	r4, r0
 8009180:	000d      	movs	r5, r1
 8009182:	930a      	str	r3, [sp, #40]	; 0x28
 8009184:	4293      	cmp	r3, r2
 8009186:	d12c      	bne.n	80091e2 <_dtoa_r+0x68a>
 8009188:	9810      	ldr	r0, [sp, #64]	; 0x40
 800918a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800918c:	9a05      	ldr	r2, [sp, #20]
 800918e:	9b07      	ldr	r3, [sp, #28]
 8009190:	4694      	mov	ip, r2
 8009192:	4463      	add	r3, ip
 8009194:	2200      	movs	r2, #0
 8009196:	9307      	str	r3, [sp, #28]
 8009198:	4b1d      	ldr	r3, [pc, #116]	; (8009210 <_dtoa_r+0x6b8>)
 800919a:	f7f7 fab7 	bl	800070c <__aeabi_dadd>
 800919e:	0002      	movs	r2, r0
 80091a0:	000b      	movs	r3, r1
 80091a2:	0020      	movs	r0, r4
 80091a4:	0029      	movs	r1, r5
 80091a6:	f7f7 f96b 	bl	8000480 <__aeabi_dcmpgt>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d000      	beq.n	80091b0 <_dtoa_r+0x658>
 80091ae:	e07f      	b.n	80092b0 <_dtoa_r+0x758>
 80091b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091b4:	2000      	movs	r0, #0
 80091b6:	4916      	ldr	r1, [pc, #88]	; (8009210 <_dtoa_r+0x6b8>)
 80091b8:	f7f8 fc84 	bl	8001ac4 <__aeabi_dsub>
 80091bc:	0002      	movs	r2, r0
 80091be:	000b      	movs	r3, r1
 80091c0:	0020      	movs	r0, r4
 80091c2:	0029      	movs	r1, r5
 80091c4:	f7f7 f948 	bl	8000458 <__aeabi_dcmplt>
 80091c8:	2800      	cmp	r0, #0
 80091ca:	d100      	bne.n	80091ce <_dtoa_r+0x676>
 80091cc:	e714      	b.n	8008ff8 <_dtoa_r+0x4a0>
 80091ce:	9b07      	ldr	r3, [sp, #28]
 80091d0:	001a      	movs	r2, r3
 80091d2:	3a01      	subs	r2, #1
 80091d4:	9207      	str	r2, [sp, #28]
 80091d6:	7812      	ldrb	r2, [r2, #0]
 80091d8:	2a30      	cmp	r2, #48	; 0x30
 80091da:	d0f8      	beq.n	80091ce <_dtoa_r+0x676>
 80091dc:	9307      	str	r3, [sp, #28]
 80091de:	9602      	str	r6, [sp, #8]
 80091e0:	e054      	b.n	800928c <_dtoa_r+0x734>
 80091e2:	2200      	movs	r2, #0
 80091e4:	4b05      	ldr	r3, [pc, #20]	; (80091fc <_dtoa_r+0x6a4>)
 80091e6:	f7f8 fa01 	bl	80015ec <__aeabi_dmul>
 80091ea:	0004      	movs	r4, r0
 80091ec:	000d      	movs	r5, r1
 80091ee:	e7b2      	b.n	8009156 <_dtoa_r+0x5fe>
 80091f0:	0800b300 	.word	0x0800b300
 80091f4:	0800b2d8 	.word	0x0800b2d8
 80091f8:	3ff00000 	.word	0x3ff00000
 80091fc:	40240000 	.word	0x40240000
 8009200:	401c0000 	.word	0x401c0000
 8009204:	fcc00000 	.word	0xfcc00000
 8009208:	40140000 	.word	0x40140000
 800920c:	7cc00000 	.word	0x7cc00000
 8009210:	3fe00000 	.word	0x3fe00000
 8009214:	9b06      	ldr	r3, [sp, #24]
 8009216:	9e05      	ldr	r6, [sp, #20]
 8009218:	3b01      	subs	r3, #1
 800921a:	199b      	adds	r3, r3, r6
 800921c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800921e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009220:	930a      	str	r3, [sp, #40]	; 0x28
 8009222:	9a08      	ldr	r2, [sp, #32]
 8009224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009226:	0020      	movs	r0, r4
 8009228:	0029      	movs	r1, r5
 800922a:	f7f7 fdd9 	bl	8000de0 <__aeabi_ddiv>
 800922e:	f7f8 fff9 	bl	8002224 <__aeabi_d2iz>
 8009232:	9006      	str	r0, [sp, #24]
 8009234:	f7f9 f82c 	bl	8002290 <__aeabi_i2d>
 8009238:	9a08      	ldr	r2, [sp, #32]
 800923a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800923c:	f7f8 f9d6 	bl	80015ec <__aeabi_dmul>
 8009240:	0002      	movs	r2, r0
 8009242:	000b      	movs	r3, r1
 8009244:	0020      	movs	r0, r4
 8009246:	0029      	movs	r1, r5
 8009248:	f7f8 fc3c 	bl	8001ac4 <__aeabi_dsub>
 800924c:	0033      	movs	r3, r6
 800924e:	9a06      	ldr	r2, [sp, #24]
 8009250:	3601      	adds	r6, #1
 8009252:	3230      	adds	r2, #48	; 0x30
 8009254:	701a      	strb	r2, [r3, #0]
 8009256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009258:	9607      	str	r6, [sp, #28]
 800925a:	429a      	cmp	r2, r3
 800925c:	d139      	bne.n	80092d2 <_dtoa_r+0x77a>
 800925e:	0002      	movs	r2, r0
 8009260:	000b      	movs	r3, r1
 8009262:	f7f7 fa53 	bl	800070c <__aeabi_dadd>
 8009266:	9a08      	ldr	r2, [sp, #32]
 8009268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800926a:	0004      	movs	r4, r0
 800926c:	000d      	movs	r5, r1
 800926e:	f7f7 f907 	bl	8000480 <__aeabi_dcmpgt>
 8009272:	2800      	cmp	r0, #0
 8009274:	d11b      	bne.n	80092ae <_dtoa_r+0x756>
 8009276:	9a08      	ldr	r2, [sp, #32]
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	0020      	movs	r0, r4
 800927c:	0029      	movs	r1, r5
 800927e:	f7f7 f8e5 	bl	800044c <__aeabi_dcmpeq>
 8009282:	2800      	cmp	r0, #0
 8009284:	d002      	beq.n	800928c <_dtoa_r+0x734>
 8009286:	9b06      	ldr	r3, [sp, #24]
 8009288:	07db      	lsls	r3, r3, #31
 800928a:	d410      	bmi.n	80092ae <_dtoa_r+0x756>
 800928c:	0038      	movs	r0, r7
 800928e:	9904      	ldr	r1, [sp, #16]
 8009290:	f000 fae6 	bl	8009860 <_Bfree>
 8009294:	2300      	movs	r3, #0
 8009296:	9a07      	ldr	r2, [sp, #28]
 8009298:	9802      	ldr	r0, [sp, #8]
 800929a:	7013      	strb	r3, [r2, #0]
 800929c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800929e:	3001      	adds	r0, #1
 80092a0:	6018      	str	r0, [r3, #0]
 80092a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d100      	bne.n	80092aa <_dtoa_r+0x752>
 80092a8:	e4a3      	b.n	8008bf2 <_dtoa_r+0x9a>
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	e4a1      	b.n	8008bf2 <_dtoa_r+0x9a>
 80092ae:	9e02      	ldr	r6, [sp, #8]
 80092b0:	9b07      	ldr	r3, [sp, #28]
 80092b2:	9307      	str	r3, [sp, #28]
 80092b4:	3b01      	subs	r3, #1
 80092b6:	781a      	ldrb	r2, [r3, #0]
 80092b8:	2a39      	cmp	r2, #57	; 0x39
 80092ba:	d106      	bne.n	80092ca <_dtoa_r+0x772>
 80092bc:	9a05      	ldr	r2, [sp, #20]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d1f7      	bne.n	80092b2 <_dtoa_r+0x75a>
 80092c2:	2230      	movs	r2, #48	; 0x30
 80092c4:	9905      	ldr	r1, [sp, #20]
 80092c6:	3601      	adds	r6, #1
 80092c8:	700a      	strb	r2, [r1, #0]
 80092ca:	781a      	ldrb	r2, [r3, #0]
 80092cc:	3201      	adds	r2, #1
 80092ce:	701a      	strb	r2, [r3, #0]
 80092d0:	e785      	b.n	80091de <_dtoa_r+0x686>
 80092d2:	2200      	movs	r2, #0
 80092d4:	4bad      	ldr	r3, [pc, #692]	; (800958c <_dtoa_r+0xa34>)
 80092d6:	f7f8 f989 	bl	80015ec <__aeabi_dmul>
 80092da:	2200      	movs	r2, #0
 80092dc:	2300      	movs	r3, #0
 80092de:	0004      	movs	r4, r0
 80092e0:	000d      	movs	r5, r1
 80092e2:	f7f7 f8b3 	bl	800044c <__aeabi_dcmpeq>
 80092e6:	2800      	cmp	r0, #0
 80092e8:	d09b      	beq.n	8009222 <_dtoa_r+0x6ca>
 80092ea:	e7cf      	b.n	800928c <_dtoa_r+0x734>
 80092ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092ee:	2a00      	cmp	r2, #0
 80092f0:	d100      	bne.n	80092f4 <_dtoa_r+0x79c>
 80092f2:	e082      	b.n	80093fa <_dtoa_r+0x8a2>
 80092f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80092f6:	2a01      	cmp	r2, #1
 80092f8:	dc66      	bgt.n	80093c8 <_dtoa_r+0x870>
 80092fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80092fc:	2a00      	cmp	r2, #0
 80092fe:	d05f      	beq.n	80093c0 <_dtoa_r+0x868>
 8009300:	4aa3      	ldr	r2, [pc, #652]	; (8009590 <_dtoa_r+0xa38>)
 8009302:	189b      	adds	r3, r3, r2
 8009304:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8009306:	9c08      	ldr	r4, [sp, #32]
 8009308:	9a08      	ldr	r2, [sp, #32]
 800930a:	2101      	movs	r1, #1
 800930c:	18d2      	adds	r2, r2, r3
 800930e:	9208      	str	r2, [sp, #32]
 8009310:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009312:	0038      	movs	r0, r7
 8009314:	18d3      	adds	r3, r2, r3
 8009316:	930d      	str	r3, [sp, #52]	; 0x34
 8009318:	f000 fb52 	bl	80099c0 <__i2b>
 800931c:	0005      	movs	r5, r0
 800931e:	2c00      	cmp	r4, #0
 8009320:	dd0e      	ble.n	8009340 <_dtoa_r+0x7e8>
 8009322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009324:	2b00      	cmp	r3, #0
 8009326:	dd0b      	ble.n	8009340 <_dtoa_r+0x7e8>
 8009328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800932a:	0023      	movs	r3, r4
 800932c:	4294      	cmp	r4, r2
 800932e:	dd00      	ble.n	8009332 <_dtoa_r+0x7da>
 8009330:	0013      	movs	r3, r2
 8009332:	9a08      	ldr	r2, [sp, #32]
 8009334:	1ae4      	subs	r4, r4, r3
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	9208      	str	r2, [sp, #32]
 800933a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800933c:	1ad3      	subs	r3, r2, r3
 800933e:	930d      	str	r3, [sp, #52]	; 0x34
 8009340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009342:	2b00      	cmp	r3, #0
 8009344:	d01f      	beq.n	8009386 <_dtoa_r+0x82e>
 8009346:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009348:	2b00      	cmp	r3, #0
 800934a:	d05a      	beq.n	8009402 <_dtoa_r+0x8aa>
 800934c:	2e00      	cmp	r6, #0
 800934e:	dd11      	ble.n	8009374 <_dtoa_r+0x81c>
 8009350:	0029      	movs	r1, r5
 8009352:	0032      	movs	r2, r6
 8009354:	0038      	movs	r0, r7
 8009356:	f000 fbf9 	bl	8009b4c <__pow5mult>
 800935a:	9a04      	ldr	r2, [sp, #16]
 800935c:	0001      	movs	r1, r0
 800935e:	0005      	movs	r5, r0
 8009360:	0038      	movs	r0, r7
 8009362:	f000 fb43 	bl	80099ec <__multiply>
 8009366:	9904      	ldr	r1, [sp, #16]
 8009368:	9007      	str	r0, [sp, #28]
 800936a:	0038      	movs	r0, r7
 800936c:	f000 fa78 	bl	8009860 <_Bfree>
 8009370:	9b07      	ldr	r3, [sp, #28]
 8009372:	9304      	str	r3, [sp, #16]
 8009374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009376:	1b9a      	subs	r2, r3, r6
 8009378:	42b3      	cmp	r3, r6
 800937a:	d004      	beq.n	8009386 <_dtoa_r+0x82e>
 800937c:	0038      	movs	r0, r7
 800937e:	9904      	ldr	r1, [sp, #16]
 8009380:	f000 fbe4 	bl	8009b4c <__pow5mult>
 8009384:	9004      	str	r0, [sp, #16]
 8009386:	2101      	movs	r1, #1
 8009388:	0038      	movs	r0, r7
 800938a:	f000 fb19 	bl	80099c0 <__i2b>
 800938e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009390:	0006      	movs	r6, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	dd37      	ble.n	8009406 <_dtoa_r+0x8ae>
 8009396:	001a      	movs	r2, r3
 8009398:	0001      	movs	r1, r0
 800939a:	0038      	movs	r0, r7
 800939c:	f000 fbd6 	bl	8009b4c <__pow5mult>
 80093a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093a2:	0006      	movs	r6, r0
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	dd33      	ble.n	8009410 <_dtoa_r+0x8b8>
 80093a8:	2300      	movs	r3, #0
 80093aa:	9307      	str	r3, [sp, #28]
 80093ac:	6933      	ldr	r3, [r6, #16]
 80093ae:	3303      	adds	r3, #3
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	18f3      	adds	r3, r6, r3
 80093b4:	6858      	ldr	r0, [r3, #4]
 80093b6:	f000 fabb 	bl	8009930 <__hi0bits>
 80093ba:	2320      	movs	r3, #32
 80093bc:	1a18      	subs	r0, r3, r0
 80093be:	e03f      	b.n	8009440 <_dtoa_r+0x8e8>
 80093c0:	2336      	movs	r3, #54	; 0x36
 80093c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80093c4:	1a9b      	subs	r3, r3, r2
 80093c6:	e79d      	b.n	8009304 <_dtoa_r+0x7ac>
 80093c8:	9b06      	ldr	r3, [sp, #24]
 80093ca:	1e5e      	subs	r6, r3, #1
 80093cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093ce:	42b3      	cmp	r3, r6
 80093d0:	db08      	blt.n	80093e4 <_dtoa_r+0x88c>
 80093d2:	1b9e      	subs	r6, r3, r6
 80093d4:	9b06      	ldr	r3, [sp, #24]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	da0c      	bge.n	80093f4 <_dtoa_r+0x89c>
 80093da:	9b08      	ldr	r3, [sp, #32]
 80093dc:	9a06      	ldr	r2, [sp, #24]
 80093de:	1a9c      	subs	r4, r3, r2
 80093e0:	2300      	movs	r3, #0
 80093e2:	e791      	b.n	8009308 <_dtoa_r+0x7b0>
 80093e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093e8:	1af3      	subs	r3, r6, r3
 80093ea:	18d3      	adds	r3, r2, r3
 80093ec:	960e      	str	r6, [sp, #56]	; 0x38
 80093ee:	9314      	str	r3, [sp, #80]	; 0x50
 80093f0:	2600      	movs	r6, #0
 80093f2:	e7ef      	b.n	80093d4 <_dtoa_r+0x87c>
 80093f4:	9c08      	ldr	r4, [sp, #32]
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	e786      	b.n	8009308 <_dtoa_r+0x7b0>
 80093fa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80093fc:	9c08      	ldr	r4, [sp, #32]
 80093fe:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009400:	e78d      	b.n	800931e <_dtoa_r+0x7c6>
 8009402:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009404:	e7ba      	b.n	800937c <_dtoa_r+0x824>
 8009406:	2300      	movs	r3, #0
 8009408:	9307      	str	r3, [sp, #28]
 800940a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800940c:	2b01      	cmp	r3, #1
 800940e:	dc13      	bgt.n	8009438 <_dtoa_r+0x8e0>
 8009410:	2300      	movs	r3, #0
 8009412:	9307      	str	r3, [sp, #28]
 8009414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10e      	bne.n	8009438 <_dtoa_r+0x8e0>
 800941a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800941c:	031b      	lsls	r3, r3, #12
 800941e:	d10b      	bne.n	8009438 <_dtoa_r+0x8e0>
 8009420:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009422:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009424:	4213      	tst	r3, r2
 8009426:	d007      	beq.n	8009438 <_dtoa_r+0x8e0>
 8009428:	9b08      	ldr	r3, [sp, #32]
 800942a:	3301      	adds	r3, #1
 800942c:	9308      	str	r3, [sp, #32]
 800942e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009430:	3301      	adds	r3, #1
 8009432:	930d      	str	r3, [sp, #52]	; 0x34
 8009434:	2301      	movs	r3, #1
 8009436:	9307      	str	r3, [sp, #28]
 8009438:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800943a:	2001      	movs	r0, #1
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1b5      	bne.n	80093ac <_dtoa_r+0x854>
 8009440:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009442:	221f      	movs	r2, #31
 8009444:	1818      	adds	r0, r3, r0
 8009446:	0003      	movs	r3, r0
 8009448:	4013      	ands	r3, r2
 800944a:	4210      	tst	r0, r2
 800944c:	d046      	beq.n	80094dc <_dtoa_r+0x984>
 800944e:	3201      	adds	r2, #1
 8009450:	1ad2      	subs	r2, r2, r3
 8009452:	2a04      	cmp	r2, #4
 8009454:	dd3f      	ble.n	80094d6 <_dtoa_r+0x97e>
 8009456:	221c      	movs	r2, #28
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	9a08      	ldr	r2, [sp, #32]
 800945c:	18e4      	adds	r4, r4, r3
 800945e:	18d2      	adds	r2, r2, r3
 8009460:	9208      	str	r2, [sp, #32]
 8009462:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009464:	18d3      	adds	r3, r2, r3
 8009466:	930d      	str	r3, [sp, #52]	; 0x34
 8009468:	9b08      	ldr	r3, [sp, #32]
 800946a:	2b00      	cmp	r3, #0
 800946c:	dd05      	ble.n	800947a <_dtoa_r+0x922>
 800946e:	001a      	movs	r2, r3
 8009470:	0038      	movs	r0, r7
 8009472:	9904      	ldr	r1, [sp, #16]
 8009474:	f000 fbc6 	bl	8009c04 <__lshift>
 8009478:	9004      	str	r0, [sp, #16]
 800947a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800947c:	2b00      	cmp	r3, #0
 800947e:	dd05      	ble.n	800948c <_dtoa_r+0x934>
 8009480:	0031      	movs	r1, r6
 8009482:	001a      	movs	r2, r3
 8009484:	0038      	movs	r0, r7
 8009486:	f000 fbbd 	bl	8009c04 <__lshift>
 800948a:	0006      	movs	r6, r0
 800948c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800948e:	2b00      	cmp	r3, #0
 8009490:	d026      	beq.n	80094e0 <_dtoa_r+0x988>
 8009492:	0031      	movs	r1, r6
 8009494:	9804      	ldr	r0, [sp, #16]
 8009496:	f000 fc25 	bl	8009ce4 <__mcmp>
 800949a:	2800      	cmp	r0, #0
 800949c:	da20      	bge.n	80094e0 <_dtoa_r+0x988>
 800949e:	9b02      	ldr	r3, [sp, #8]
 80094a0:	220a      	movs	r2, #10
 80094a2:	3b01      	subs	r3, #1
 80094a4:	9302      	str	r3, [sp, #8]
 80094a6:	0038      	movs	r0, r7
 80094a8:	2300      	movs	r3, #0
 80094aa:	9904      	ldr	r1, [sp, #16]
 80094ac:	f000 f9fc 	bl	80098a8 <__multadd>
 80094b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094b2:	9004      	str	r0, [sp, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d100      	bne.n	80094ba <_dtoa_r+0x962>
 80094b8:	e160      	b.n	800977c <_dtoa_r+0xc24>
 80094ba:	2300      	movs	r3, #0
 80094bc:	0029      	movs	r1, r5
 80094be:	220a      	movs	r2, #10
 80094c0:	0038      	movs	r0, r7
 80094c2:	f000 f9f1 	bl	80098a8 <__multadd>
 80094c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094c8:	0005      	movs	r5, r0
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	dc47      	bgt.n	800955e <_dtoa_r+0xa06>
 80094ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	dc0d      	bgt.n	80094f0 <_dtoa_r+0x998>
 80094d4:	e043      	b.n	800955e <_dtoa_r+0xa06>
 80094d6:	2a04      	cmp	r2, #4
 80094d8:	d0c6      	beq.n	8009468 <_dtoa_r+0x910>
 80094da:	0013      	movs	r3, r2
 80094dc:	331c      	adds	r3, #28
 80094de:	e7bc      	b.n	800945a <_dtoa_r+0x902>
 80094e0:	9b06      	ldr	r3, [sp, #24]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	dc35      	bgt.n	8009552 <_dtoa_r+0x9fa>
 80094e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	dd32      	ble.n	8009552 <_dtoa_r+0x9fa>
 80094ec:	9b06      	ldr	r3, [sp, #24]
 80094ee:	930c      	str	r3, [sp, #48]	; 0x30
 80094f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10c      	bne.n	8009510 <_dtoa_r+0x9b8>
 80094f6:	0031      	movs	r1, r6
 80094f8:	2205      	movs	r2, #5
 80094fa:	0038      	movs	r0, r7
 80094fc:	f000 f9d4 	bl	80098a8 <__multadd>
 8009500:	0006      	movs	r6, r0
 8009502:	0001      	movs	r1, r0
 8009504:	9804      	ldr	r0, [sp, #16]
 8009506:	f000 fbed 	bl	8009ce4 <__mcmp>
 800950a:	2800      	cmp	r0, #0
 800950c:	dd00      	ble.n	8009510 <_dtoa_r+0x9b8>
 800950e:	e59f      	b.n	8009050 <_dtoa_r+0x4f8>
 8009510:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009512:	43db      	mvns	r3, r3
 8009514:	9302      	str	r3, [sp, #8]
 8009516:	9b05      	ldr	r3, [sp, #20]
 8009518:	9307      	str	r3, [sp, #28]
 800951a:	2400      	movs	r4, #0
 800951c:	0031      	movs	r1, r6
 800951e:	0038      	movs	r0, r7
 8009520:	f000 f99e 	bl	8009860 <_Bfree>
 8009524:	2d00      	cmp	r5, #0
 8009526:	d100      	bne.n	800952a <_dtoa_r+0x9d2>
 8009528:	e6b0      	b.n	800928c <_dtoa_r+0x734>
 800952a:	2c00      	cmp	r4, #0
 800952c:	d005      	beq.n	800953a <_dtoa_r+0x9e2>
 800952e:	42ac      	cmp	r4, r5
 8009530:	d003      	beq.n	800953a <_dtoa_r+0x9e2>
 8009532:	0021      	movs	r1, r4
 8009534:	0038      	movs	r0, r7
 8009536:	f000 f993 	bl	8009860 <_Bfree>
 800953a:	0029      	movs	r1, r5
 800953c:	0038      	movs	r0, r7
 800953e:	f000 f98f 	bl	8009860 <_Bfree>
 8009542:	e6a3      	b.n	800928c <_dtoa_r+0x734>
 8009544:	2600      	movs	r6, #0
 8009546:	0035      	movs	r5, r6
 8009548:	e7e2      	b.n	8009510 <_dtoa_r+0x9b8>
 800954a:	9602      	str	r6, [sp, #8]
 800954c:	9e07      	ldr	r6, [sp, #28]
 800954e:	0035      	movs	r5, r6
 8009550:	e57e      	b.n	8009050 <_dtoa_r+0x4f8>
 8009552:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009554:	2b00      	cmp	r3, #0
 8009556:	d100      	bne.n	800955a <_dtoa_r+0xa02>
 8009558:	e0c8      	b.n	80096ec <_dtoa_r+0xb94>
 800955a:	9b06      	ldr	r3, [sp, #24]
 800955c:	930c      	str	r3, [sp, #48]	; 0x30
 800955e:	2c00      	cmp	r4, #0
 8009560:	dd05      	ble.n	800956e <_dtoa_r+0xa16>
 8009562:	0029      	movs	r1, r5
 8009564:	0022      	movs	r2, r4
 8009566:	0038      	movs	r0, r7
 8009568:	f000 fb4c 	bl	8009c04 <__lshift>
 800956c:	0005      	movs	r5, r0
 800956e:	9b07      	ldr	r3, [sp, #28]
 8009570:	0028      	movs	r0, r5
 8009572:	2b00      	cmp	r3, #0
 8009574:	d01f      	beq.n	80095b6 <_dtoa_r+0xa5e>
 8009576:	0038      	movs	r0, r7
 8009578:	6869      	ldr	r1, [r5, #4]
 800957a:	f000 f92d 	bl	80097d8 <_Balloc>
 800957e:	1e04      	subs	r4, r0, #0
 8009580:	d10c      	bne.n	800959c <_dtoa_r+0xa44>
 8009582:	0002      	movs	r2, r0
 8009584:	4b03      	ldr	r3, [pc, #12]	; (8009594 <_dtoa_r+0xa3c>)
 8009586:	4904      	ldr	r1, [pc, #16]	; (8009598 <_dtoa_r+0xa40>)
 8009588:	f7ff fafb 	bl	8008b82 <_dtoa_r+0x2a>
 800958c:	40240000 	.word	0x40240000
 8009590:	00000433 	.word	0x00000433
 8009594:	0800b263 	.word	0x0800b263
 8009598:	000002ea 	.word	0x000002ea
 800959c:	0029      	movs	r1, r5
 800959e:	692b      	ldr	r3, [r5, #16]
 80095a0:	310c      	adds	r1, #12
 80095a2:	1c9a      	adds	r2, r3, #2
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	300c      	adds	r0, #12
 80095a8:	f000 f90d 	bl	80097c6 <memcpy>
 80095ac:	2201      	movs	r2, #1
 80095ae:	0021      	movs	r1, r4
 80095b0:	0038      	movs	r0, r7
 80095b2:	f000 fb27 	bl	8009c04 <__lshift>
 80095b6:	002c      	movs	r4, r5
 80095b8:	0005      	movs	r5, r0
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	9308      	str	r3, [sp, #32]
 80095be:	0031      	movs	r1, r6
 80095c0:	9804      	ldr	r0, [sp, #16]
 80095c2:	f7ff fa3d 	bl	8008a40 <quorem>
 80095c6:	0003      	movs	r3, r0
 80095c8:	0021      	movs	r1, r4
 80095ca:	3330      	adds	r3, #48	; 0x30
 80095cc:	900e      	str	r0, [sp, #56]	; 0x38
 80095ce:	9804      	ldr	r0, [sp, #16]
 80095d0:	9306      	str	r3, [sp, #24]
 80095d2:	f000 fb87 	bl	8009ce4 <__mcmp>
 80095d6:	002a      	movs	r2, r5
 80095d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80095da:	0031      	movs	r1, r6
 80095dc:	0038      	movs	r0, r7
 80095de:	f000 fb9d 	bl	8009d1c <__mdiff>
 80095e2:	68c3      	ldr	r3, [r0, #12]
 80095e4:	9007      	str	r0, [sp, #28]
 80095e6:	9310      	str	r3, [sp, #64]	; 0x40
 80095e8:	2301      	movs	r3, #1
 80095ea:	930d      	str	r3, [sp, #52]	; 0x34
 80095ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d104      	bne.n	80095fc <_dtoa_r+0xaa4>
 80095f2:	0001      	movs	r1, r0
 80095f4:	9804      	ldr	r0, [sp, #16]
 80095f6:	f000 fb75 	bl	8009ce4 <__mcmp>
 80095fa:	900d      	str	r0, [sp, #52]	; 0x34
 80095fc:	0038      	movs	r0, r7
 80095fe:	9907      	ldr	r1, [sp, #28]
 8009600:	f000 f92e 	bl	8009860 <_Bfree>
 8009604:	2301      	movs	r3, #1
 8009606:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009608:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800960a:	4018      	ands	r0, r3
 800960c:	9b08      	ldr	r3, [sp, #32]
 800960e:	3301      	adds	r3, #1
 8009610:	9307      	str	r3, [sp, #28]
 8009612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009614:	4313      	orrs	r3, r2
 8009616:	4303      	orrs	r3, r0
 8009618:	d10c      	bne.n	8009634 <_dtoa_r+0xadc>
 800961a:	9b06      	ldr	r3, [sp, #24]
 800961c:	2b39      	cmp	r3, #57	; 0x39
 800961e:	d025      	beq.n	800966c <_dtoa_r+0xb14>
 8009620:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009622:	2b00      	cmp	r3, #0
 8009624:	dd02      	ble.n	800962c <_dtoa_r+0xad4>
 8009626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009628:	3331      	adds	r3, #49	; 0x31
 800962a:	9306      	str	r3, [sp, #24]
 800962c:	9b08      	ldr	r3, [sp, #32]
 800962e:	9a06      	ldr	r2, [sp, #24]
 8009630:	701a      	strb	r2, [r3, #0]
 8009632:	e773      	b.n	800951c <_dtoa_r+0x9c4>
 8009634:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009636:	2b00      	cmp	r3, #0
 8009638:	db03      	blt.n	8009642 <_dtoa_r+0xaea>
 800963a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800963c:	4313      	orrs	r3, r2
 800963e:	4303      	orrs	r3, r0
 8009640:	d11f      	bne.n	8009682 <_dtoa_r+0xb2a>
 8009642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009644:	2b00      	cmp	r3, #0
 8009646:	ddf1      	ble.n	800962c <_dtoa_r+0xad4>
 8009648:	9904      	ldr	r1, [sp, #16]
 800964a:	2201      	movs	r2, #1
 800964c:	0038      	movs	r0, r7
 800964e:	f000 fad9 	bl	8009c04 <__lshift>
 8009652:	0031      	movs	r1, r6
 8009654:	9004      	str	r0, [sp, #16]
 8009656:	f000 fb45 	bl	8009ce4 <__mcmp>
 800965a:	2800      	cmp	r0, #0
 800965c:	dc03      	bgt.n	8009666 <_dtoa_r+0xb0e>
 800965e:	d1e5      	bne.n	800962c <_dtoa_r+0xad4>
 8009660:	9b06      	ldr	r3, [sp, #24]
 8009662:	07db      	lsls	r3, r3, #31
 8009664:	d5e2      	bpl.n	800962c <_dtoa_r+0xad4>
 8009666:	9b06      	ldr	r3, [sp, #24]
 8009668:	2b39      	cmp	r3, #57	; 0x39
 800966a:	d1dc      	bne.n	8009626 <_dtoa_r+0xace>
 800966c:	2339      	movs	r3, #57	; 0x39
 800966e:	9a08      	ldr	r2, [sp, #32]
 8009670:	7013      	strb	r3, [r2, #0]
 8009672:	9b07      	ldr	r3, [sp, #28]
 8009674:	9307      	str	r3, [sp, #28]
 8009676:	3b01      	subs	r3, #1
 8009678:	781a      	ldrb	r2, [r3, #0]
 800967a:	2a39      	cmp	r2, #57	; 0x39
 800967c:	d06c      	beq.n	8009758 <_dtoa_r+0xc00>
 800967e:	3201      	adds	r2, #1
 8009680:	e7d6      	b.n	8009630 <_dtoa_r+0xad8>
 8009682:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009684:	2b00      	cmp	r3, #0
 8009686:	dd07      	ble.n	8009698 <_dtoa_r+0xb40>
 8009688:	9b06      	ldr	r3, [sp, #24]
 800968a:	2b39      	cmp	r3, #57	; 0x39
 800968c:	d0ee      	beq.n	800966c <_dtoa_r+0xb14>
 800968e:	9b06      	ldr	r3, [sp, #24]
 8009690:	9a08      	ldr	r2, [sp, #32]
 8009692:	3301      	adds	r3, #1
 8009694:	7013      	strb	r3, [r2, #0]
 8009696:	e741      	b.n	800951c <_dtoa_r+0x9c4>
 8009698:	9b08      	ldr	r3, [sp, #32]
 800969a:	9a06      	ldr	r2, [sp, #24]
 800969c:	701a      	strb	r2, [r3, #0]
 800969e:	2301      	movs	r3, #1
 80096a0:	9a05      	ldr	r2, [sp, #20]
 80096a2:	1a9b      	subs	r3, r3, r2
 80096a4:	9a08      	ldr	r2, [sp, #32]
 80096a6:	189b      	adds	r3, r3, r2
 80096a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d03e      	beq.n	800972c <_dtoa_r+0xbd4>
 80096ae:	2300      	movs	r3, #0
 80096b0:	220a      	movs	r2, #10
 80096b2:	9904      	ldr	r1, [sp, #16]
 80096b4:	0038      	movs	r0, r7
 80096b6:	f000 f8f7 	bl	80098a8 <__multadd>
 80096ba:	2300      	movs	r3, #0
 80096bc:	9004      	str	r0, [sp, #16]
 80096be:	220a      	movs	r2, #10
 80096c0:	0021      	movs	r1, r4
 80096c2:	0038      	movs	r0, r7
 80096c4:	42ac      	cmp	r4, r5
 80096c6:	d106      	bne.n	80096d6 <_dtoa_r+0xb7e>
 80096c8:	f000 f8ee 	bl	80098a8 <__multadd>
 80096cc:	0004      	movs	r4, r0
 80096ce:	0005      	movs	r5, r0
 80096d0:	9b07      	ldr	r3, [sp, #28]
 80096d2:	9308      	str	r3, [sp, #32]
 80096d4:	e773      	b.n	80095be <_dtoa_r+0xa66>
 80096d6:	f000 f8e7 	bl	80098a8 <__multadd>
 80096da:	0029      	movs	r1, r5
 80096dc:	0004      	movs	r4, r0
 80096de:	2300      	movs	r3, #0
 80096e0:	220a      	movs	r2, #10
 80096e2:	0038      	movs	r0, r7
 80096e4:	f000 f8e0 	bl	80098a8 <__multadd>
 80096e8:	0005      	movs	r5, r0
 80096ea:	e7f1      	b.n	80096d0 <_dtoa_r+0xb78>
 80096ec:	9b06      	ldr	r3, [sp, #24]
 80096ee:	930c      	str	r3, [sp, #48]	; 0x30
 80096f0:	2400      	movs	r4, #0
 80096f2:	0031      	movs	r1, r6
 80096f4:	9804      	ldr	r0, [sp, #16]
 80096f6:	f7ff f9a3 	bl	8008a40 <quorem>
 80096fa:	9b05      	ldr	r3, [sp, #20]
 80096fc:	3030      	adds	r0, #48	; 0x30
 80096fe:	5518      	strb	r0, [r3, r4]
 8009700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009702:	3401      	adds	r4, #1
 8009704:	9006      	str	r0, [sp, #24]
 8009706:	42a3      	cmp	r3, r4
 8009708:	dd07      	ble.n	800971a <_dtoa_r+0xbc2>
 800970a:	2300      	movs	r3, #0
 800970c:	220a      	movs	r2, #10
 800970e:	0038      	movs	r0, r7
 8009710:	9904      	ldr	r1, [sp, #16]
 8009712:	f000 f8c9 	bl	80098a8 <__multadd>
 8009716:	9004      	str	r0, [sp, #16]
 8009718:	e7eb      	b.n	80096f2 <_dtoa_r+0xb9a>
 800971a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800971c:	2001      	movs	r0, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	dd00      	ble.n	8009724 <_dtoa_r+0xbcc>
 8009722:	0018      	movs	r0, r3
 8009724:	2400      	movs	r4, #0
 8009726:	9b05      	ldr	r3, [sp, #20]
 8009728:	181b      	adds	r3, r3, r0
 800972a:	9307      	str	r3, [sp, #28]
 800972c:	9904      	ldr	r1, [sp, #16]
 800972e:	2201      	movs	r2, #1
 8009730:	0038      	movs	r0, r7
 8009732:	f000 fa67 	bl	8009c04 <__lshift>
 8009736:	0031      	movs	r1, r6
 8009738:	9004      	str	r0, [sp, #16]
 800973a:	f000 fad3 	bl	8009ce4 <__mcmp>
 800973e:	2800      	cmp	r0, #0
 8009740:	dc97      	bgt.n	8009672 <_dtoa_r+0xb1a>
 8009742:	d102      	bne.n	800974a <_dtoa_r+0xbf2>
 8009744:	9b06      	ldr	r3, [sp, #24]
 8009746:	07db      	lsls	r3, r3, #31
 8009748:	d493      	bmi.n	8009672 <_dtoa_r+0xb1a>
 800974a:	9b07      	ldr	r3, [sp, #28]
 800974c:	9307      	str	r3, [sp, #28]
 800974e:	3b01      	subs	r3, #1
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	2a30      	cmp	r2, #48	; 0x30
 8009754:	d0fa      	beq.n	800974c <_dtoa_r+0xbf4>
 8009756:	e6e1      	b.n	800951c <_dtoa_r+0x9c4>
 8009758:	9a05      	ldr	r2, [sp, #20]
 800975a:	429a      	cmp	r2, r3
 800975c:	d18a      	bne.n	8009674 <_dtoa_r+0xb1c>
 800975e:	9b02      	ldr	r3, [sp, #8]
 8009760:	3301      	adds	r3, #1
 8009762:	9302      	str	r3, [sp, #8]
 8009764:	2331      	movs	r3, #49	; 0x31
 8009766:	e795      	b.n	8009694 <_dtoa_r+0xb3c>
 8009768:	4b08      	ldr	r3, [pc, #32]	; (800978c <_dtoa_r+0xc34>)
 800976a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800976c:	9305      	str	r3, [sp, #20]
 800976e:	4b08      	ldr	r3, [pc, #32]	; (8009790 <_dtoa_r+0xc38>)
 8009770:	2a00      	cmp	r2, #0
 8009772:	d001      	beq.n	8009778 <_dtoa_r+0xc20>
 8009774:	f7ff fa3b 	bl	8008bee <_dtoa_r+0x96>
 8009778:	f7ff fa3b 	bl	8008bf2 <_dtoa_r+0x9a>
 800977c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800977e:	2b00      	cmp	r3, #0
 8009780:	dcb6      	bgt.n	80096f0 <_dtoa_r+0xb98>
 8009782:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009784:	2b02      	cmp	r3, #2
 8009786:	dd00      	ble.n	800978a <_dtoa_r+0xc32>
 8009788:	e6b2      	b.n	80094f0 <_dtoa_r+0x998>
 800978a:	e7b1      	b.n	80096f0 <_dtoa_r+0xb98>
 800978c:	0800b1e0 	.word	0x0800b1e0
 8009790:	0800b1e8 	.word	0x0800b1e8

08009794 <_localeconv_r>:
 8009794:	4800      	ldr	r0, [pc, #0]	; (8009798 <_localeconv_r+0x4>)
 8009796:	4770      	bx	lr
 8009798:	20000164 	.word	0x20000164

0800979c <malloc>:
 800979c:	b510      	push	{r4, lr}
 800979e:	4b03      	ldr	r3, [pc, #12]	; (80097ac <malloc+0x10>)
 80097a0:	0001      	movs	r1, r0
 80097a2:	6818      	ldr	r0, [r3, #0]
 80097a4:	f000 fc0e 	bl	8009fc4 <_malloc_r>
 80097a8:	bd10      	pop	{r4, pc}
 80097aa:	46c0      	nop			; (mov r8, r8)
 80097ac:	20000010 	.word	0x20000010

080097b0 <memchr>:
 80097b0:	b2c9      	uxtb	r1, r1
 80097b2:	1882      	adds	r2, r0, r2
 80097b4:	4290      	cmp	r0, r2
 80097b6:	d101      	bne.n	80097bc <memchr+0xc>
 80097b8:	2000      	movs	r0, #0
 80097ba:	4770      	bx	lr
 80097bc:	7803      	ldrb	r3, [r0, #0]
 80097be:	428b      	cmp	r3, r1
 80097c0:	d0fb      	beq.n	80097ba <memchr+0xa>
 80097c2:	3001      	adds	r0, #1
 80097c4:	e7f6      	b.n	80097b4 <memchr+0x4>

080097c6 <memcpy>:
 80097c6:	2300      	movs	r3, #0
 80097c8:	b510      	push	{r4, lr}
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d100      	bne.n	80097d0 <memcpy+0xa>
 80097ce:	bd10      	pop	{r4, pc}
 80097d0:	5ccc      	ldrb	r4, [r1, r3]
 80097d2:	54c4      	strb	r4, [r0, r3]
 80097d4:	3301      	adds	r3, #1
 80097d6:	e7f8      	b.n	80097ca <memcpy+0x4>

080097d8 <_Balloc>:
 80097d8:	b570      	push	{r4, r5, r6, lr}
 80097da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097dc:	0006      	movs	r6, r0
 80097de:	000c      	movs	r4, r1
 80097e0:	2d00      	cmp	r5, #0
 80097e2:	d10e      	bne.n	8009802 <_Balloc+0x2a>
 80097e4:	2010      	movs	r0, #16
 80097e6:	f7ff ffd9 	bl	800979c <malloc>
 80097ea:	1e02      	subs	r2, r0, #0
 80097ec:	6270      	str	r0, [r6, #36]	; 0x24
 80097ee:	d104      	bne.n	80097fa <_Balloc+0x22>
 80097f0:	2166      	movs	r1, #102	; 0x66
 80097f2:	4b19      	ldr	r3, [pc, #100]	; (8009858 <_Balloc+0x80>)
 80097f4:	4819      	ldr	r0, [pc, #100]	; (800985c <_Balloc+0x84>)
 80097f6:	f000 fdb7 	bl	800a368 <__assert_func>
 80097fa:	6045      	str	r5, [r0, #4]
 80097fc:	6085      	str	r5, [r0, #8]
 80097fe:	6005      	str	r5, [r0, #0]
 8009800:	60c5      	str	r5, [r0, #12]
 8009802:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8009804:	68eb      	ldr	r3, [r5, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d013      	beq.n	8009832 <_Balloc+0x5a>
 800980a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800980c:	00a2      	lsls	r2, r4, #2
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	189b      	adds	r3, r3, r2
 8009812:	6818      	ldr	r0, [r3, #0]
 8009814:	2800      	cmp	r0, #0
 8009816:	d118      	bne.n	800984a <_Balloc+0x72>
 8009818:	2101      	movs	r1, #1
 800981a:	000d      	movs	r5, r1
 800981c:	40a5      	lsls	r5, r4
 800981e:	1d6a      	adds	r2, r5, #5
 8009820:	0030      	movs	r0, r6
 8009822:	0092      	lsls	r2, r2, #2
 8009824:	f000 fb76 	bl	8009f14 <_calloc_r>
 8009828:	2800      	cmp	r0, #0
 800982a:	d00c      	beq.n	8009846 <_Balloc+0x6e>
 800982c:	6044      	str	r4, [r0, #4]
 800982e:	6085      	str	r5, [r0, #8]
 8009830:	e00d      	b.n	800984e <_Balloc+0x76>
 8009832:	2221      	movs	r2, #33	; 0x21
 8009834:	2104      	movs	r1, #4
 8009836:	0030      	movs	r0, r6
 8009838:	f000 fb6c 	bl	8009f14 <_calloc_r>
 800983c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800983e:	60e8      	str	r0, [r5, #12]
 8009840:	68db      	ldr	r3, [r3, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e1      	bne.n	800980a <_Balloc+0x32>
 8009846:	2000      	movs	r0, #0
 8009848:	bd70      	pop	{r4, r5, r6, pc}
 800984a:	6802      	ldr	r2, [r0, #0]
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	2300      	movs	r3, #0
 8009850:	6103      	str	r3, [r0, #16]
 8009852:	60c3      	str	r3, [r0, #12]
 8009854:	e7f8      	b.n	8009848 <_Balloc+0x70>
 8009856:	46c0      	nop			; (mov r8, r8)
 8009858:	0800b1ed 	.word	0x0800b1ed
 800985c:	0800b274 	.word	0x0800b274

08009860 <_Bfree>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009864:	0005      	movs	r5, r0
 8009866:	000c      	movs	r4, r1
 8009868:	2e00      	cmp	r6, #0
 800986a:	d10e      	bne.n	800988a <_Bfree+0x2a>
 800986c:	2010      	movs	r0, #16
 800986e:	f7ff ff95 	bl	800979c <malloc>
 8009872:	1e02      	subs	r2, r0, #0
 8009874:	6268      	str	r0, [r5, #36]	; 0x24
 8009876:	d104      	bne.n	8009882 <_Bfree+0x22>
 8009878:	218a      	movs	r1, #138	; 0x8a
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <_Bfree+0x40>)
 800987c:	4809      	ldr	r0, [pc, #36]	; (80098a4 <_Bfree+0x44>)
 800987e:	f000 fd73 	bl	800a368 <__assert_func>
 8009882:	6046      	str	r6, [r0, #4]
 8009884:	6086      	str	r6, [r0, #8]
 8009886:	6006      	str	r6, [r0, #0]
 8009888:	60c6      	str	r6, [r0, #12]
 800988a:	2c00      	cmp	r4, #0
 800988c:	d007      	beq.n	800989e <_Bfree+0x3e>
 800988e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009890:	6862      	ldr	r2, [r4, #4]
 8009892:	68db      	ldr	r3, [r3, #12]
 8009894:	0092      	lsls	r2, r2, #2
 8009896:	189b      	adds	r3, r3, r2
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	6022      	str	r2, [r4, #0]
 800989c:	601c      	str	r4, [r3, #0]
 800989e:	bd70      	pop	{r4, r5, r6, pc}
 80098a0:	0800b1ed 	.word	0x0800b1ed
 80098a4:	0800b274 	.word	0x0800b274

080098a8 <__multadd>:
 80098a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098aa:	000e      	movs	r6, r1
 80098ac:	9001      	str	r0, [sp, #4]
 80098ae:	000c      	movs	r4, r1
 80098b0:	001d      	movs	r5, r3
 80098b2:	2000      	movs	r0, #0
 80098b4:	690f      	ldr	r7, [r1, #16]
 80098b6:	3614      	adds	r6, #20
 80098b8:	6833      	ldr	r3, [r6, #0]
 80098ba:	3001      	adds	r0, #1
 80098bc:	b299      	uxth	r1, r3
 80098be:	4351      	muls	r1, r2
 80098c0:	0c1b      	lsrs	r3, r3, #16
 80098c2:	4353      	muls	r3, r2
 80098c4:	1949      	adds	r1, r1, r5
 80098c6:	0c0d      	lsrs	r5, r1, #16
 80098c8:	195b      	adds	r3, r3, r5
 80098ca:	0c1d      	lsrs	r5, r3, #16
 80098cc:	b289      	uxth	r1, r1
 80098ce:	041b      	lsls	r3, r3, #16
 80098d0:	185b      	adds	r3, r3, r1
 80098d2:	c608      	stmia	r6!, {r3}
 80098d4:	4287      	cmp	r7, r0
 80098d6:	dcef      	bgt.n	80098b8 <__multadd+0x10>
 80098d8:	2d00      	cmp	r5, #0
 80098da:	d022      	beq.n	8009922 <__multadd+0x7a>
 80098dc:	68a3      	ldr	r3, [r4, #8]
 80098de:	42bb      	cmp	r3, r7
 80098e0:	dc19      	bgt.n	8009916 <__multadd+0x6e>
 80098e2:	6863      	ldr	r3, [r4, #4]
 80098e4:	9801      	ldr	r0, [sp, #4]
 80098e6:	1c59      	adds	r1, r3, #1
 80098e8:	f7ff ff76 	bl	80097d8 <_Balloc>
 80098ec:	1e06      	subs	r6, r0, #0
 80098ee:	d105      	bne.n	80098fc <__multadd+0x54>
 80098f0:	0002      	movs	r2, r0
 80098f2:	21b5      	movs	r1, #181	; 0xb5
 80098f4:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <__multadd+0x80>)
 80098f6:	480d      	ldr	r0, [pc, #52]	; (800992c <__multadd+0x84>)
 80098f8:	f000 fd36 	bl	800a368 <__assert_func>
 80098fc:	0021      	movs	r1, r4
 80098fe:	6923      	ldr	r3, [r4, #16]
 8009900:	310c      	adds	r1, #12
 8009902:	1c9a      	adds	r2, r3, #2
 8009904:	0092      	lsls	r2, r2, #2
 8009906:	300c      	adds	r0, #12
 8009908:	f7ff ff5d 	bl	80097c6 <memcpy>
 800990c:	0021      	movs	r1, r4
 800990e:	9801      	ldr	r0, [sp, #4]
 8009910:	f7ff ffa6 	bl	8009860 <_Bfree>
 8009914:	0034      	movs	r4, r6
 8009916:	1d3b      	adds	r3, r7, #4
 8009918:	009b      	lsls	r3, r3, #2
 800991a:	18e3      	adds	r3, r4, r3
 800991c:	605d      	str	r5, [r3, #4]
 800991e:	1c7b      	adds	r3, r7, #1
 8009920:	6123      	str	r3, [r4, #16]
 8009922:	0020      	movs	r0, r4
 8009924:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009926:	46c0      	nop			; (mov r8, r8)
 8009928:	0800b263 	.word	0x0800b263
 800992c:	0800b274 	.word	0x0800b274

08009930 <__hi0bits>:
 8009930:	0003      	movs	r3, r0
 8009932:	0c02      	lsrs	r2, r0, #16
 8009934:	2000      	movs	r0, #0
 8009936:	4282      	cmp	r2, r0
 8009938:	d101      	bne.n	800993e <__hi0bits+0xe>
 800993a:	041b      	lsls	r3, r3, #16
 800993c:	3010      	adds	r0, #16
 800993e:	0e1a      	lsrs	r2, r3, #24
 8009940:	d101      	bne.n	8009946 <__hi0bits+0x16>
 8009942:	3008      	adds	r0, #8
 8009944:	021b      	lsls	r3, r3, #8
 8009946:	0f1a      	lsrs	r2, r3, #28
 8009948:	d101      	bne.n	800994e <__hi0bits+0x1e>
 800994a:	3004      	adds	r0, #4
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	0f9a      	lsrs	r2, r3, #30
 8009950:	d101      	bne.n	8009956 <__hi0bits+0x26>
 8009952:	3002      	adds	r0, #2
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	db03      	blt.n	8009962 <__hi0bits+0x32>
 800995a:	3001      	adds	r0, #1
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	d400      	bmi.n	8009962 <__hi0bits+0x32>
 8009960:	2020      	movs	r0, #32
 8009962:	4770      	bx	lr

08009964 <__lo0bits>:
 8009964:	6803      	ldr	r3, [r0, #0]
 8009966:	0002      	movs	r2, r0
 8009968:	2107      	movs	r1, #7
 800996a:	0018      	movs	r0, r3
 800996c:	4008      	ands	r0, r1
 800996e:	420b      	tst	r3, r1
 8009970:	d00d      	beq.n	800998e <__lo0bits+0x2a>
 8009972:	3906      	subs	r1, #6
 8009974:	2000      	movs	r0, #0
 8009976:	420b      	tst	r3, r1
 8009978:	d105      	bne.n	8009986 <__lo0bits+0x22>
 800997a:	3002      	adds	r0, #2
 800997c:	4203      	tst	r3, r0
 800997e:	d003      	beq.n	8009988 <__lo0bits+0x24>
 8009980:	40cb      	lsrs	r3, r1
 8009982:	0008      	movs	r0, r1
 8009984:	6013      	str	r3, [r2, #0]
 8009986:	4770      	bx	lr
 8009988:	089b      	lsrs	r3, r3, #2
 800998a:	6013      	str	r3, [r2, #0]
 800998c:	e7fb      	b.n	8009986 <__lo0bits+0x22>
 800998e:	b299      	uxth	r1, r3
 8009990:	2900      	cmp	r1, #0
 8009992:	d101      	bne.n	8009998 <__lo0bits+0x34>
 8009994:	2010      	movs	r0, #16
 8009996:	0c1b      	lsrs	r3, r3, #16
 8009998:	b2d9      	uxtb	r1, r3
 800999a:	2900      	cmp	r1, #0
 800999c:	d101      	bne.n	80099a2 <__lo0bits+0x3e>
 800999e:	3008      	adds	r0, #8
 80099a0:	0a1b      	lsrs	r3, r3, #8
 80099a2:	0719      	lsls	r1, r3, #28
 80099a4:	d101      	bne.n	80099aa <__lo0bits+0x46>
 80099a6:	3004      	adds	r0, #4
 80099a8:	091b      	lsrs	r3, r3, #4
 80099aa:	0799      	lsls	r1, r3, #30
 80099ac:	d101      	bne.n	80099b2 <__lo0bits+0x4e>
 80099ae:	3002      	adds	r0, #2
 80099b0:	089b      	lsrs	r3, r3, #2
 80099b2:	07d9      	lsls	r1, r3, #31
 80099b4:	d4e9      	bmi.n	800998a <__lo0bits+0x26>
 80099b6:	3001      	adds	r0, #1
 80099b8:	085b      	lsrs	r3, r3, #1
 80099ba:	d1e6      	bne.n	800998a <__lo0bits+0x26>
 80099bc:	2020      	movs	r0, #32
 80099be:	e7e2      	b.n	8009986 <__lo0bits+0x22>

080099c0 <__i2b>:
 80099c0:	b510      	push	{r4, lr}
 80099c2:	000c      	movs	r4, r1
 80099c4:	2101      	movs	r1, #1
 80099c6:	f7ff ff07 	bl	80097d8 <_Balloc>
 80099ca:	2800      	cmp	r0, #0
 80099cc:	d106      	bne.n	80099dc <__i2b+0x1c>
 80099ce:	21a0      	movs	r1, #160	; 0xa0
 80099d0:	0002      	movs	r2, r0
 80099d2:	4b04      	ldr	r3, [pc, #16]	; (80099e4 <__i2b+0x24>)
 80099d4:	4804      	ldr	r0, [pc, #16]	; (80099e8 <__i2b+0x28>)
 80099d6:	0049      	lsls	r1, r1, #1
 80099d8:	f000 fcc6 	bl	800a368 <__assert_func>
 80099dc:	2301      	movs	r3, #1
 80099de:	6144      	str	r4, [r0, #20]
 80099e0:	6103      	str	r3, [r0, #16]
 80099e2:	bd10      	pop	{r4, pc}
 80099e4:	0800b263 	.word	0x0800b263
 80099e8:	0800b274 	.word	0x0800b274

080099ec <__multiply>:
 80099ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099ee:	690b      	ldr	r3, [r1, #16]
 80099f0:	0014      	movs	r4, r2
 80099f2:	6912      	ldr	r2, [r2, #16]
 80099f4:	000d      	movs	r5, r1
 80099f6:	b089      	sub	sp, #36	; 0x24
 80099f8:	4293      	cmp	r3, r2
 80099fa:	da01      	bge.n	8009a00 <__multiply+0x14>
 80099fc:	0025      	movs	r5, r4
 80099fe:	000c      	movs	r4, r1
 8009a00:	692f      	ldr	r7, [r5, #16]
 8009a02:	6926      	ldr	r6, [r4, #16]
 8009a04:	6869      	ldr	r1, [r5, #4]
 8009a06:	19bb      	adds	r3, r7, r6
 8009a08:	9302      	str	r3, [sp, #8]
 8009a0a:	68ab      	ldr	r3, [r5, #8]
 8009a0c:	19ba      	adds	r2, r7, r6
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	da00      	bge.n	8009a14 <__multiply+0x28>
 8009a12:	3101      	adds	r1, #1
 8009a14:	f7ff fee0 	bl	80097d8 <_Balloc>
 8009a18:	9001      	str	r0, [sp, #4]
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d106      	bne.n	8009a2c <__multiply+0x40>
 8009a1e:	215e      	movs	r1, #94	; 0x5e
 8009a20:	0002      	movs	r2, r0
 8009a22:	4b48      	ldr	r3, [pc, #288]	; (8009b44 <__multiply+0x158>)
 8009a24:	4848      	ldr	r0, [pc, #288]	; (8009b48 <__multiply+0x15c>)
 8009a26:	31ff      	adds	r1, #255	; 0xff
 8009a28:	f000 fc9e 	bl	800a368 <__assert_func>
 8009a2c:	9b01      	ldr	r3, [sp, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	3314      	adds	r3, #20
 8009a32:	469c      	mov	ip, r3
 8009a34:	19bb      	adds	r3, r7, r6
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4463      	add	r3, ip
 8009a3a:	9303      	str	r3, [sp, #12]
 8009a3c:	4663      	mov	r3, ip
 8009a3e:	9903      	ldr	r1, [sp, #12]
 8009a40:	428b      	cmp	r3, r1
 8009a42:	d32c      	bcc.n	8009a9e <__multiply+0xb2>
 8009a44:	002b      	movs	r3, r5
 8009a46:	0022      	movs	r2, r4
 8009a48:	3314      	adds	r3, #20
 8009a4a:	00bf      	lsls	r7, r7, #2
 8009a4c:	3214      	adds	r2, #20
 8009a4e:	9306      	str	r3, [sp, #24]
 8009a50:	00b6      	lsls	r6, r6, #2
 8009a52:	19db      	adds	r3, r3, r7
 8009a54:	9304      	str	r3, [sp, #16]
 8009a56:	1993      	adds	r3, r2, r6
 8009a58:	9307      	str	r3, [sp, #28]
 8009a5a:	2304      	movs	r3, #4
 8009a5c:	9305      	str	r3, [sp, #20]
 8009a5e:	002b      	movs	r3, r5
 8009a60:	9904      	ldr	r1, [sp, #16]
 8009a62:	3315      	adds	r3, #21
 8009a64:	9200      	str	r2, [sp, #0]
 8009a66:	4299      	cmp	r1, r3
 8009a68:	d305      	bcc.n	8009a76 <__multiply+0x8a>
 8009a6a:	1b4b      	subs	r3, r1, r5
 8009a6c:	3b15      	subs	r3, #21
 8009a6e:	089b      	lsrs	r3, r3, #2
 8009a70:	3301      	adds	r3, #1
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	9305      	str	r3, [sp, #20]
 8009a76:	9b07      	ldr	r3, [sp, #28]
 8009a78:	9a00      	ldr	r2, [sp, #0]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d311      	bcc.n	8009aa2 <__multiply+0xb6>
 8009a7e:	9b02      	ldr	r3, [sp, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	dd06      	ble.n	8009a92 <__multiply+0xa6>
 8009a84:	9b03      	ldr	r3, [sp, #12]
 8009a86:	3b04      	subs	r3, #4
 8009a88:	9303      	str	r3, [sp, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d054      	beq.n	8009b3c <__multiply+0x150>
 8009a92:	9b01      	ldr	r3, [sp, #4]
 8009a94:	9a02      	ldr	r2, [sp, #8]
 8009a96:	0018      	movs	r0, r3
 8009a98:	611a      	str	r2, [r3, #16]
 8009a9a:	b009      	add	sp, #36	; 0x24
 8009a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a9e:	c304      	stmia	r3!, {r2}
 8009aa0:	e7cd      	b.n	8009a3e <__multiply+0x52>
 8009aa2:	9b00      	ldr	r3, [sp, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	b298      	uxth	r0, r3
 8009aa8:	2800      	cmp	r0, #0
 8009aaa:	d01c      	beq.n	8009ae6 <__multiply+0xfa>
 8009aac:	4667      	mov	r7, ip
 8009aae:	2400      	movs	r4, #0
 8009ab0:	9e06      	ldr	r6, [sp, #24]
 8009ab2:	ce02      	ldmia	r6!, {r1}
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	b28b      	uxth	r3, r1
 8009ab8:	4343      	muls	r3, r0
 8009aba:	0c09      	lsrs	r1, r1, #16
 8009abc:	4341      	muls	r1, r0
 8009abe:	b292      	uxth	r2, r2
 8009ac0:	189b      	adds	r3, r3, r2
 8009ac2:	191b      	adds	r3, r3, r4
 8009ac4:	000c      	movs	r4, r1
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	0c11      	lsrs	r1, r2, #16
 8009aca:	1861      	adds	r1, r4, r1
 8009acc:	0c1c      	lsrs	r4, r3, #16
 8009ace:	1909      	adds	r1, r1, r4
 8009ad0:	0c0c      	lsrs	r4, r1, #16
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	0409      	lsls	r1, r1, #16
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	c708      	stmia	r7!, {r3}
 8009ada:	9b04      	ldr	r3, [sp, #16]
 8009adc:	42b3      	cmp	r3, r6
 8009ade:	d8e8      	bhi.n	8009ab2 <__multiply+0xc6>
 8009ae0:	4663      	mov	r3, ip
 8009ae2:	9a05      	ldr	r2, [sp, #20]
 8009ae4:	509c      	str	r4, [r3, r2]
 8009ae6:	9b00      	ldr	r3, [sp, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	0c1e      	lsrs	r6, r3, #16
 8009aec:	d020      	beq.n	8009b30 <__multiply+0x144>
 8009aee:	4663      	mov	r3, ip
 8009af0:	002c      	movs	r4, r5
 8009af2:	4660      	mov	r0, ip
 8009af4:	2700      	movs	r7, #0
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	3414      	adds	r4, #20
 8009afa:	6822      	ldr	r2, [r4, #0]
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	b291      	uxth	r1, r2
 8009b00:	4371      	muls	r1, r6
 8009b02:	6802      	ldr	r2, [r0, #0]
 8009b04:	0c12      	lsrs	r2, r2, #16
 8009b06:	1889      	adds	r1, r1, r2
 8009b08:	19cf      	adds	r7, r1, r7
 8009b0a:	0439      	lsls	r1, r7, #16
 8009b0c:	430b      	orrs	r3, r1
 8009b0e:	6003      	str	r3, [r0, #0]
 8009b10:	cc02      	ldmia	r4!, {r1}
 8009b12:	6843      	ldr	r3, [r0, #4]
 8009b14:	0c09      	lsrs	r1, r1, #16
 8009b16:	4371      	muls	r1, r6
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	0c3f      	lsrs	r7, r7, #16
 8009b1c:	18cb      	adds	r3, r1, r3
 8009b1e:	9a04      	ldr	r2, [sp, #16]
 8009b20:	19db      	adds	r3, r3, r7
 8009b22:	0c1f      	lsrs	r7, r3, #16
 8009b24:	3004      	adds	r0, #4
 8009b26:	42a2      	cmp	r2, r4
 8009b28:	d8e7      	bhi.n	8009afa <__multiply+0x10e>
 8009b2a:	4662      	mov	r2, ip
 8009b2c:	9905      	ldr	r1, [sp, #20]
 8009b2e:	5053      	str	r3, [r2, r1]
 8009b30:	9b00      	ldr	r3, [sp, #0]
 8009b32:	3304      	adds	r3, #4
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	2304      	movs	r3, #4
 8009b38:	449c      	add	ip, r3
 8009b3a:	e79c      	b.n	8009a76 <__multiply+0x8a>
 8009b3c:	9b02      	ldr	r3, [sp, #8]
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	9302      	str	r3, [sp, #8]
 8009b42:	e79c      	b.n	8009a7e <__multiply+0x92>
 8009b44:	0800b263 	.word	0x0800b263
 8009b48:	0800b274 	.word	0x0800b274

08009b4c <__pow5mult>:
 8009b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b4e:	2303      	movs	r3, #3
 8009b50:	0015      	movs	r5, r2
 8009b52:	0007      	movs	r7, r0
 8009b54:	000e      	movs	r6, r1
 8009b56:	401a      	ands	r2, r3
 8009b58:	421d      	tst	r5, r3
 8009b5a:	d008      	beq.n	8009b6e <__pow5mult+0x22>
 8009b5c:	4925      	ldr	r1, [pc, #148]	; (8009bf4 <__pow5mult+0xa8>)
 8009b5e:	3a01      	subs	r2, #1
 8009b60:	0092      	lsls	r2, r2, #2
 8009b62:	5852      	ldr	r2, [r2, r1]
 8009b64:	2300      	movs	r3, #0
 8009b66:	0031      	movs	r1, r6
 8009b68:	f7ff fe9e 	bl	80098a8 <__multadd>
 8009b6c:	0006      	movs	r6, r0
 8009b6e:	10ad      	asrs	r5, r5, #2
 8009b70:	d03d      	beq.n	8009bee <__pow5mult+0xa2>
 8009b72:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8009b74:	2c00      	cmp	r4, #0
 8009b76:	d10f      	bne.n	8009b98 <__pow5mult+0x4c>
 8009b78:	2010      	movs	r0, #16
 8009b7a:	f7ff fe0f 	bl	800979c <malloc>
 8009b7e:	1e02      	subs	r2, r0, #0
 8009b80:	6278      	str	r0, [r7, #36]	; 0x24
 8009b82:	d105      	bne.n	8009b90 <__pow5mult+0x44>
 8009b84:	21d7      	movs	r1, #215	; 0xd7
 8009b86:	4b1c      	ldr	r3, [pc, #112]	; (8009bf8 <__pow5mult+0xac>)
 8009b88:	481c      	ldr	r0, [pc, #112]	; (8009bfc <__pow5mult+0xb0>)
 8009b8a:	0049      	lsls	r1, r1, #1
 8009b8c:	f000 fbec 	bl	800a368 <__assert_func>
 8009b90:	6044      	str	r4, [r0, #4]
 8009b92:	6084      	str	r4, [r0, #8]
 8009b94:	6004      	str	r4, [r0, #0]
 8009b96:	60c4      	str	r4, [r0, #12]
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	689c      	ldr	r4, [r3, #8]
 8009b9c:	9301      	str	r3, [sp, #4]
 8009b9e:	2c00      	cmp	r4, #0
 8009ba0:	d108      	bne.n	8009bb4 <__pow5mult+0x68>
 8009ba2:	0038      	movs	r0, r7
 8009ba4:	4916      	ldr	r1, [pc, #88]	; (8009c00 <__pow5mult+0xb4>)
 8009ba6:	f7ff ff0b 	bl	80099c0 <__i2b>
 8009baa:	9b01      	ldr	r3, [sp, #4]
 8009bac:	0004      	movs	r4, r0
 8009bae:	6098      	str	r0, [r3, #8]
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	6003      	str	r3, [r0, #0]
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	421d      	tst	r5, r3
 8009bb8:	d00a      	beq.n	8009bd0 <__pow5mult+0x84>
 8009bba:	0031      	movs	r1, r6
 8009bbc:	0022      	movs	r2, r4
 8009bbe:	0038      	movs	r0, r7
 8009bc0:	f7ff ff14 	bl	80099ec <__multiply>
 8009bc4:	0031      	movs	r1, r6
 8009bc6:	9001      	str	r0, [sp, #4]
 8009bc8:	0038      	movs	r0, r7
 8009bca:	f7ff fe49 	bl	8009860 <_Bfree>
 8009bce:	9e01      	ldr	r6, [sp, #4]
 8009bd0:	106d      	asrs	r5, r5, #1
 8009bd2:	d00c      	beq.n	8009bee <__pow5mult+0xa2>
 8009bd4:	6820      	ldr	r0, [r4, #0]
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d107      	bne.n	8009bea <__pow5mult+0x9e>
 8009bda:	0022      	movs	r2, r4
 8009bdc:	0021      	movs	r1, r4
 8009bde:	0038      	movs	r0, r7
 8009be0:	f7ff ff04 	bl	80099ec <__multiply>
 8009be4:	2300      	movs	r3, #0
 8009be6:	6020      	str	r0, [r4, #0]
 8009be8:	6003      	str	r3, [r0, #0]
 8009bea:	0004      	movs	r4, r0
 8009bec:	e7e2      	b.n	8009bb4 <__pow5mult+0x68>
 8009bee:	0030      	movs	r0, r6
 8009bf0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009bf2:	46c0      	nop			; (mov r8, r8)
 8009bf4:	0800b3c8 	.word	0x0800b3c8
 8009bf8:	0800b1ed 	.word	0x0800b1ed
 8009bfc:	0800b274 	.word	0x0800b274
 8009c00:	00000271 	.word	0x00000271

08009c04 <__lshift>:
 8009c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c06:	000c      	movs	r4, r1
 8009c08:	0017      	movs	r7, r2
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	1155      	asrs	r5, r2, #5
 8009c0e:	b087      	sub	sp, #28
 8009c10:	18eb      	adds	r3, r5, r3
 8009c12:	9302      	str	r3, [sp, #8]
 8009c14:	3301      	adds	r3, #1
 8009c16:	9301      	str	r3, [sp, #4]
 8009c18:	6849      	ldr	r1, [r1, #4]
 8009c1a:	68a3      	ldr	r3, [r4, #8]
 8009c1c:	9004      	str	r0, [sp, #16]
 8009c1e:	9a01      	ldr	r2, [sp, #4]
 8009c20:	4293      	cmp	r3, r2
 8009c22:	db11      	blt.n	8009c48 <__lshift+0x44>
 8009c24:	9804      	ldr	r0, [sp, #16]
 8009c26:	f7ff fdd7 	bl	80097d8 <_Balloc>
 8009c2a:	0002      	movs	r2, r0
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	3214      	adds	r2, #20
 8009c30:	0006      	movs	r6, r0
 8009c32:	0011      	movs	r1, r2
 8009c34:	9203      	str	r2, [sp, #12]
 8009c36:	4298      	cmp	r0, r3
 8009c38:	d10d      	bne.n	8009c56 <__lshift+0x52>
 8009c3a:	21da      	movs	r1, #218	; 0xda
 8009c3c:	0002      	movs	r2, r0
 8009c3e:	4b27      	ldr	r3, [pc, #156]	; (8009cdc <__lshift+0xd8>)
 8009c40:	4827      	ldr	r0, [pc, #156]	; (8009ce0 <__lshift+0xdc>)
 8009c42:	31ff      	adds	r1, #255	; 0xff
 8009c44:	f000 fb90 	bl	800a368 <__assert_func>
 8009c48:	3101      	adds	r1, #1
 8009c4a:	005b      	lsls	r3, r3, #1
 8009c4c:	e7e7      	b.n	8009c1e <__lshift+0x1a>
 8009c4e:	2200      	movs	r2, #0
 8009c50:	0098      	lsls	r0, r3, #2
 8009c52:	500a      	str	r2, [r1, r0]
 8009c54:	3301      	adds	r3, #1
 8009c56:	42ab      	cmp	r3, r5
 8009c58:	dbf9      	blt.n	8009c4e <__lshift+0x4a>
 8009c5a:	43eb      	mvns	r3, r5
 8009c5c:	17db      	asrs	r3, r3, #31
 8009c5e:	401d      	ands	r5, r3
 8009c60:	9b03      	ldr	r3, [sp, #12]
 8009c62:	00ad      	lsls	r5, r5, #2
 8009c64:	211f      	movs	r1, #31
 8009c66:	0038      	movs	r0, r7
 8009c68:	195d      	adds	r5, r3, r5
 8009c6a:	0023      	movs	r3, r4
 8009c6c:	6922      	ldr	r2, [r4, #16]
 8009c6e:	3314      	adds	r3, #20
 8009c70:	0092      	lsls	r2, r2, #2
 8009c72:	4008      	ands	r0, r1
 8009c74:	4684      	mov	ip, r0
 8009c76:	189a      	adds	r2, r3, r2
 8009c78:	420f      	tst	r7, r1
 8009c7a:	d02a      	beq.n	8009cd2 <__lshift+0xce>
 8009c7c:	3101      	adds	r1, #1
 8009c7e:	1a09      	subs	r1, r1, r0
 8009c80:	9105      	str	r1, [sp, #20]
 8009c82:	2100      	movs	r1, #0
 8009c84:	9503      	str	r5, [sp, #12]
 8009c86:	4667      	mov	r7, ip
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	40b8      	lsls	r0, r7
 8009c8c:	4301      	orrs	r1, r0
 8009c8e:	9803      	ldr	r0, [sp, #12]
 8009c90:	c002      	stmia	r0!, {r1}
 8009c92:	cb02      	ldmia	r3!, {r1}
 8009c94:	9003      	str	r0, [sp, #12]
 8009c96:	9805      	ldr	r0, [sp, #20]
 8009c98:	40c1      	lsrs	r1, r0
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d8f3      	bhi.n	8009c86 <__lshift+0x82>
 8009c9e:	0020      	movs	r0, r4
 8009ca0:	3015      	adds	r0, #21
 8009ca2:	2304      	movs	r3, #4
 8009ca4:	4282      	cmp	r2, r0
 8009ca6:	d304      	bcc.n	8009cb2 <__lshift+0xae>
 8009ca8:	1b13      	subs	r3, r2, r4
 8009caa:	3b15      	subs	r3, #21
 8009cac:	089b      	lsrs	r3, r3, #2
 8009cae:	3301      	adds	r3, #1
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	50e9      	str	r1, [r5, r3]
 8009cb4:	2900      	cmp	r1, #0
 8009cb6:	d002      	beq.n	8009cbe <__lshift+0xba>
 8009cb8:	9b02      	ldr	r3, [sp, #8]
 8009cba:	3302      	adds	r3, #2
 8009cbc:	9301      	str	r3, [sp, #4]
 8009cbe:	9b01      	ldr	r3, [sp, #4]
 8009cc0:	9804      	ldr	r0, [sp, #16]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	0021      	movs	r1, r4
 8009cc6:	6133      	str	r3, [r6, #16]
 8009cc8:	f7ff fdca 	bl	8009860 <_Bfree>
 8009ccc:	0030      	movs	r0, r6
 8009cce:	b007      	add	sp, #28
 8009cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cd2:	cb02      	ldmia	r3!, {r1}
 8009cd4:	c502      	stmia	r5!, {r1}
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d8fb      	bhi.n	8009cd2 <__lshift+0xce>
 8009cda:	e7f0      	b.n	8009cbe <__lshift+0xba>
 8009cdc:	0800b263 	.word	0x0800b263
 8009ce0:	0800b274 	.word	0x0800b274

08009ce4 <__mcmp>:
 8009ce4:	6902      	ldr	r2, [r0, #16]
 8009ce6:	690b      	ldr	r3, [r1, #16]
 8009ce8:	b530      	push	{r4, r5, lr}
 8009cea:	0004      	movs	r4, r0
 8009cec:	1ad0      	subs	r0, r2, r3
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d10d      	bne.n	8009d0e <__mcmp+0x2a>
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	3414      	adds	r4, #20
 8009cf6:	3114      	adds	r1, #20
 8009cf8:	18e2      	adds	r2, r4, r3
 8009cfa:	18c9      	adds	r1, r1, r3
 8009cfc:	3a04      	subs	r2, #4
 8009cfe:	3904      	subs	r1, #4
 8009d00:	6815      	ldr	r5, [r2, #0]
 8009d02:	680b      	ldr	r3, [r1, #0]
 8009d04:	429d      	cmp	r5, r3
 8009d06:	d003      	beq.n	8009d10 <__mcmp+0x2c>
 8009d08:	2001      	movs	r0, #1
 8009d0a:	429d      	cmp	r5, r3
 8009d0c:	d303      	bcc.n	8009d16 <__mcmp+0x32>
 8009d0e:	bd30      	pop	{r4, r5, pc}
 8009d10:	4294      	cmp	r4, r2
 8009d12:	d3f3      	bcc.n	8009cfc <__mcmp+0x18>
 8009d14:	e7fb      	b.n	8009d0e <__mcmp+0x2a>
 8009d16:	4240      	negs	r0, r0
 8009d18:	e7f9      	b.n	8009d0e <__mcmp+0x2a>
	...

08009d1c <__mdiff>:
 8009d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d1e:	000e      	movs	r6, r1
 8009d20:	0007      	movs	r7, r0
 8009d22:	0011      	movs	r1, r2
 8009d24:	0030      	movs	r0, r6
 8009d26:	b087      	sub	sp, #28
 8009d28:	0014      	movs	r4, r2
 8009d2a:	f7ff ffdb 	bl	8009ce4 <__mcmp>
 8009d2e:	1e05      	subs	r5, r0, #0
 8009d30:	d110      	bne.n	8009d54 <__mdiff+0x38>
 8009d32:	0001      	movs	r1, r0
 8009d34:	0038      	movs	r0, r7
 8009d36:	f7ff fd4f 	bl	80097d8 <_Balloc>
 8009d3a:	1e02      	subs	r2, r0, #0
 8009d3c:	d104      	bne.n	8009d48 <__mdiff+0x2c>
 8009d3e:	4b40      	ldr	r3, [pc, #256]	; (8009e40 <__mdiff+0x124>)
 8009d40:	4940      	ldr	r1, [pc, #256]	; (8009e44 <__mdiff+0x128>)
 8009d42:	4841      	ldr	r0, [pc, #260]	; (8009e48 <__mdiff+0x12c>)
 8009d44:	f000 fb10 	bl	800a368 <__assert_func>
 8009d48:	2301      	movs	r3, #1
 8009d4a:	6145      	str	r5, [r0, #20]
 8009d4c:	6103      	str	r3, [r0, #16]
 8009d4e:	0010      	movs	r0, r2
 8009d50:	b007      	add	sp, #28
 8009d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d54:	2301      	movs	r3, #1
 8009d56:	9301      	str	r3, [sp, #4]
 8009d58:	2800      	cmp	r0, #0
 8009d5a:	db04      	blt.n	8009d66 <__mdiff+0x4a>
 8009d5c:	0023      	movs	r3, r4
 8009d5e:	0034      	movs	r4, r6
 8009d60:	001e      	movs	r6, r3
 8009d62:	2300      	movs	r3, #0
 8009d64:	9301      	str	r3, [sp, #4]
 8009d66:	0038      	movs	r0, r7
 8009d68:	6861      	ldr	r1, [r4, #4]
 8009d6a:	f7ff fd35 	bl	80097d8 <_Balloc>
 8009d6e:	1e02      	subs	r2, r0, #0
 8009d70:	d103      	bne.n	8009d7a <__mdiff+0x5e>
 8009d72:	2190      	movs	r1, #144	; 0x90
 8009d74:	4b32      	ldr	r3, [pc, #200]	; (8009e40 <__mdiff+0x124>)
 8009d76:	0089      	lsls	r1, r1, #2
 8009d78:	e7e3      	b.n	8009d42 <__mdiff+0x26>
 8009d7a:	9b01      	ldr	r3, [sp, #4]
 8009d7c:	2700      	movs	r7, #0
 8009d7e:	60c3      	str	r3, [r0, #12]
 8009d80:	6920      	ldr	r0, [r4, #16]
 8009d82:	3414      	adds	r4, #20
 8009d84:	9401      	str	r4, [sp, #4]
 8009d86:	9b01      	ldr	r3, [sp, #4]
 8009d88:	0084      	lsls	r4, r0, #2
 8009d8a:	191b      	adds	r3, r3, r4
 8009d8c:	0034      	movs	r4, r6
 8009d8e:	9302      	str	r3, [sp, #8]
 8009d90:	6933      	ldr	r3, [r6, #16]
 8009d92:	3414      	adds	r4, #20
 8009d94:	0099      	lsls	r1, r3, #2
 8009d96:	1863      	adds	r3, r4, r1
 8009d98:	9303      	str	r3, [sp, #12]
 8009d9a:	0013      	movs	r3, r2
 8009d9c:	3314      	adds	r3, #20
 8009d9e:	469c      	mov	ip, r3
 8009da0:	9305      	str	r3, [sp, #20]
 8009da2:	9b01      	ldr	r3, [sp, #4]
 8009da4:	9304      	str	r3, [sp, #16]
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	cc02      	ldmia	r4!, {r1}
 8009daa:	cb20      	ldmia	r3!, {r5}
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	b2ab      	uxth	r3, r5
 8009db0:	19df      	adds	r7, r3, r7
 8009db2:	b28b      	uxth	r3, r1
 8009db4:	1afb      	subs	r3, r7, r3
 8009db6:	0c2d      	lsrs	r5, r5, #16
 8009db8:	0c09      	lsrs	r1, r1, #16
 8009dba:	1a69      	subs	r1, r5, r1
 8009dbc:	141d      	asrs	r5, r3, #16
 8009dbe:	1949      	adds	r1, r1, r5
 8009dc0:	140f      	asrs	r7, r1, #16
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	0409      	lsls	r1, r1, #16
 8009dc6:	430b      	orrs	r3, r1
 8009dc8:	4661      	mov	r1, ip
 8009dca:	c108      	stmia	r1!, {r3}
 8009dcc:	9b03      	ldr	r3, [sp, #12]
 8009dce:	468c      	mov	ip, r1
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	d8e8      	bhi.n	8009da6 <__mdiff+0x8a>
 8009dd4:	0031      	movs	r1, r6
 8009dd6:	9c03      	ldr	r4, [sp, #12]
 8009dd8:	3115      	adds	r1, #21
 8009dda:	2304      	movs	r3, #4
 8009ddc:	428c      	cmp	r4, r1
 8009dde:	d304      	bcc.n	8009dea <__mdiff+0xce>
 8009de0:	1ba3      	subs	r3, r4, r6
 8009de2:	3b15      	subs	r3, #21
 8009de4:	089b      	lsrs	r3, r3, #2
 8009de6:	3301      	adds	r3, #1
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	9901      	ldr	r1, [sp, #4]
 8009dec:	18cc      	adds	r4, r1, r3
 8009dee:	9905      	ldr	r1, [sp, #20]
 8009df0:	0026      	movs	r6, r4
 8009df2:	18cb      	adds	r3, r1, r3
 8009df4:	469c      	mov	ip, r3
 8009df6:	9902      	ldr	r1, [sp, #8]
 8009df8:	428e      	cmp	r6, r1
 8009dfa:	d310      	bcc.n	8009e1e <__mdiff+0x102>
 8009dfc:	9e02      	ldr	r6, [sp, #8]
 8009dfe:	1ee5      	subs	r5, r4, #3
 8009e00:	2100      	movs	r1, #0
 8009e02:	42ae      	cmp	r6, r5
 8009e04:	d304      	bcc.n	8009e10 <__mdiff+0xf4>
 8009e06:	0031      	movs	r1, r6
 8009e08:	3103      	adds	r1, #3
 8009e0a:	1b09      	subs	r1, r1, r4
 8009e0c:	0889      	lsrs	r1, r1, #2
 8009e0e:	0089      	lsls	r1, r1, #2
 8009e10:	185b      	adds	r3, r3, r1
 8009e12:	3b04      	subs	r3, #4
 8009e14:	6819      	ldr	r1, [r3, #0]
 8009e16:	2900      	cmp	r1, #0
 8009e18:	d00f      	beq.n	8009e3a <__mdiff+0x11e>
 8009e1a:	6110      	str	r0, [r2, #16]
 8009e1c:	e797      	b.n	8009d4e <__mdiff+0x32>
 8009e1e:	ce02      	ldmia	r6!, {r1}
 8009e20:	b28d      	uxth	r5, r1
 8009e22:	19ed      	adds	r5, r5, r7
 8009e24:	0c0f      	lsrs	r7, r1, #16
 8009e26:	1429      	asrs	r1, r5, #16
 8009e28:	1879      	adds	r1, r7, r1
 8009e2a:	140f      	asrs	r7, r1, #16
 8009e2c:	b2ad      	uxth	r5, r5
 8009e2e:	0409      	lsls	r1, r1, #16
 8009e30:	430d      	orrs	r5, r1
 8009e32:	4661      	mov	r1, ip
 8009e34:	c120      	stmia	r1!, {r5}
 8009e36:	468c      	mov	ip, r1
 8009e38:	e7dd      	b.n	8009df6 <__mdiff+0xda>
 8009e3a:	3801      	subs	r0, #1
 8009e3c:	e7e9      	b.n	8009e12 <__mdiff+0xf6>
 8009e3e:	46c0      	nop			; (mov r8, r8)
 8009e40:	0800b263 	.word	0x0800b263
 8009e44:	00000232 	.word	0x00000232
 8009e48:	0800b274 	.word	0x0800b274

08009e4c <__d2b>:
 8009e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e4e:	2101      	movs	r1, #1
 8009e50:	0014      	movs	r4, r2
 8009e52:	001e      	movs	r6, r3
 8009e54:	9f08      	ldr	r7, [sp, #32]
 8009e56:	f7ff fcbf 	bl	80097d8 <_Balloc>
 8009e5a:	1e05      	subs	r5, r0, #0
 8009e5c:	d105      	bne.n	8009e6a <__d2b+0x1e>
 8009e5e:	0002      	movs	r2, r0
 8009e60:	4b26      	ldr	r3, [pc, #152]	; (8009efc <__d2b+0xb0>)
 8009e62:	4927      	ldr	r1, [pc, #156]	; (8009f00 <__d2b+0xb4>)
 8009e64:	4827      	ldr	r0, [pc, #156]	; (8009f04 <__d2b+0xb8>)
 8009e66:	f000 fa7f 	bl	800a368 <__assert_func>
 8009e6a:	0333      	lsls	r3, r6, #12
 8009e6c:	0076      	lsls	r6, r6, #1
 8009e6e:	0b1b      	lsrs	r3, r3, #12
 8009e70:	0d76      	lsrs	r6, r6, #21
 8009e72:	d124      	bne.n	8009ebe <__d2b+0x72>
 8009e74:	9301      	str	r3, [sp, #4]
 8009e76:	2c00      	cmp	r4, #0
 8009e78:	d027      	beq.n	8009eca <__d2b+0x7e>
 8009e7a:	4668      	mov	r0, sp
 8009e7c:	9400      	str	r4, [sp, #0]
 8009e7e:	f7ff fd71 	bl	8009964 <__lo0bits>
 8009e82:	9c00      	ldr	r4, [sp, #0]
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d01e      	beq.n	8009ec6 <__d2b+0x7a>
 8009e88:	9b01      	ldr	r3, [sp, #4]
 8009e8a:	2120      	movs	r1, #32
 8009e8c:	001a      	movs	r2, r3
 8009e8e:	1a09      	subs	r1, r1, r0
 8009e90:	408a      	lsls	r2, r1
 8009e92:	40c3      	lsrs	r3, r0
 8009e94:	4322      	orrs	r2, r4
 8009e96:	616a      	str	r2, [r5, #20]
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	9c01      	ldr	r4, [sp, #4]
 8009e9c:	61ac      	str	r4, [r5, #24]
 8009e9e:	1e63      	subs	r3, r4, #1
 8009ea0:	419c      	sbcs	r4, r3
 8009ea2:	3401      	adds	r4, #1
 8009ea4:	612c      	str	r4, [r5, #16]
 8009ea6:	2e00      	cmp	r6, #0
 8009ea8:	d018      	beq.n	8009edc <__d2b+0x90>
 8009eaa:	4b17      	ldr	r3, [pc, #92]	; (8009f08 <__d2b+0xbc>)
 8009eac:	18f6      	adds	r6, r6, r3
 8009eae:	2335      	movs	r3, #53	; 0x35
 8009eb0:	1836      	adds	r6, r6, r0
 8009eb2:	1a18      	subs	r0, r3, r0
 8009eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eb6:	603e      	str	r6, [r7, #0]
 8009eb8:	6018      	str	r0, [r3, #0]
 8009eba:	0028      	movs	r0, r5
 8009ebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009ebe:	2280      	movs	r2, #128	; 0x80
 8009ec0:	0352      	lsls	r2, r2, #13
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	e7d6      	b.n	8009e74 <__d2b+0x28>
 8009ec6:	616c      	str	r4, [r5, #20]
 8009ec8:	e7e7      	b.n	8009e9a <__d2b+0x4e>
 8009eca:	a801      	add	r0, sp, #4
 8009ecc:	f7ff fd4a 	bl	8009964 <__lo0bits>
 8009ed0:	2401      	movs	r4, #1
 8009ed2:	9b01      	ldr	r3, [sp, #4]
 8009ed4:	612c      	str	r4, [r5, #16]
 8009ed6:	616b      	str	r3, [r5, #20]
 8009ed8:	3020      	adds	r0, #32
 8009eda:	e7e4      	b.n	8009ea6 <__d2b+0x5a>
 8009edc:	4b0b      	ldr	r3, [pc, #44]	; (8009f0c <__d2b+0xc0>)
 8009ede:	18c0      	adds	r0, r0, r3
 8009ee0:	4b0b      	ldr	r3, [pc, #44]	; (8009f10 <__d2b+0xc4>)
 8009ee2:	6038      	str	r0, [r7, #0]
 8009ee4:	18e3      	adds	r3, r4, r3
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	18eb      	adds	r3, r5, r3
 8009eea:	6958      	ldr	r0, [r3, #20]
 8009eec:	f7ff fd20 	bl	8009930 <__hi0bits>
 8009ef0:	0164      	lsls	r4, r4, #5
 8009ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef4:	1a24      	subs	r4, r4, r0
 8009ef6:	601c      	str	r4, [r3, #0]
 8009ef8:	e7df      	b.n	8009eba <__d2b+0x6e>
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	0800b263 	.word	0x0800b263
 8009f00:	0000030a 	.word	0x0000030a
 8009f04:	0800b274 	.word	0x0800b274
 8009f08:	fffffbcd 	.word	0xfffffbcd
 8009f0c:	fffffbce 	.word	0xfffffbce
 8009f10:	3fffffff 	.word	0x3fffffff

08009f14 <_calloc_r>:
 8009f14:	434a      	muls	r2, r1
 8009f16:	b570      	push	{r4, r5, r6, lr}
 8009f18:	0011      	movs	r1, r2
 8009f1a:	0015      	movs	r5, r2
 8009f1c:	f000 f852 	bl	8009fc4 <_malloc_r>
 8009f20:	1e04      	subs	r4, r0, #0
 8009f22:	d003      	beq.n	8009f2c <_calloc_r+0x18>
 8009f24:	002a      	movs	r2, r5
 8009f26:	2100      	movs	r1, #0
 8009f28:	f7fe f8e8 	bl	80080fc <memset>
 8009f2c:	0020      	movs	r0, r4
 8009f2e:	bd70      	pop	{r4, r5, r6, pc}

08009f30 <_free_r>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	0005      	movs	r5, r0
 8009f34:	2900      	cmp	r1, #0
 8009f36:	d010      	beq.n	8009f5a <_free_r+0x2a>
 8009f38:	1f0c      	subs	r4, r1, #4
 8009f3a:	6823      	ldr	r3, [r4, #0]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	da00      	bge.n	8009f42 <_free_r+0x12>
 8009f40:	18e4      	adds	r4, r4, r3
 8009f42:	0028      	movs	r0, r5
 8009f44:	f000 fa64 	bl	800a410 <__malloc_lock>
 8009f48:	4a1d      	ldr	r2, [pc, #116]	; (8009fc0 <_free_r+0x90>)
 8009f4a:	6813      	ldr	r3, [r2, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d105      	bne.n	8009f5c <_free_r+0x2c>
 8009f50:	6063      	str	r3, [r4, #4]
 8009f52:	6014      	str	r4, [r2, #0]
 8009f54:	0028      	movs	r0, r5
 8009f56:	f000 fa63 	bl	800a420 <__malloc_unlock>
 8009f5a:	bd70      	pop	{r4, r5, r6, pc}
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	d908      	bls.n	8009f72 <_free_r+0x42>
 8009f60:	6821      	ldr	r1, [r4, #0]
 8009f62:	1860      	adds	r0, r4, r1
 8009f64:	4283      	cmp	r3, r0
 8009f66:	d1f3      	bne.n	8009f50 <_free_r+0x20>
 8009f68:	6818      	ldr	r0, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	1841      	adds	r1, r0, r1
 8009f6e:	6021      	str	r1, [r4, #0]
 8009f70:	e7ee      	b.n	8009f50 <_free_r+0x20>
 8009f72:	001a      	movs	r2, r3
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <_free_r+0x4e>
 8009f7a:	42a3      	cmp	r3, r4
 8009f7c:	d9f9      	bls.n	8009f72 <_free_r+0x42>
 8009f7e:	6811      	ldr	r1, [r2, #0]
 8009f80:	1850      	adds	r0, r2, r1
 8009f82:	42a0      	cmp	r0, r4
 8009f84:	d10b      	bne.n	8009f9e <_free_r+0x6e>
 8009f86:	6820      	ldr	r0, [r4, #0]
 8009f88:	1809      	adds	r1, r1, r0
 8009f8a:	1850      	adds	r0, r2, r1
 8009f8c:	6011      	str	r1, [r2, #0]
 8009f8e:	4283      	cmp	r3, r0
 8009f90:	d1e0      	bne.n	8009f54 <_free_r+0x24>
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	1841      	adds	r1, r0, r1
 8009f98:	6011      	str	r1, [r2, #0]
 8009f9a:	6053      	str	r3, [r2, #4]
 8009f9c:	e7da      	b.n	8009f54 <_free_r+0x24>
 8009f9e:	42a0      	cmp	r0, r4
 8009fa0:	d902      	bls.n	8009fa8 <_free_r+0x78>
 8009fa2:	230c      	movs	r3, #12
 8009fa4:	602b      	str	r3, [r5, #0]
 8009fa6:	e7d5      	b.n	8009f54 <_free_r+0x24>
 8009fa8:	6821      	ldr	r1, [r4, #0]
 8009faa:	1860      	adds	r0, r4, r1
 8009fac:	4283      	cmp	r3, r0
 8009fae:	d103      	bne.n	8009fb8 <_free_r+0x88>
 8009fb0:	6818      	ldr	r0, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	1841      	adds	r1, r0, r1
 8009fb6:	6021      	str	r1, [r4, #0]
 8009fb8:	6063      	str	r3, [r4, #4]
 8009fba:	6054      	str	r4, [r2, #4]
 8009fbc:	e7ca      	b.n	8009f54 <_free_r+0x24>
 8009fbe:	46c0      	nop			; (mov r8, r8)
 8009fc0:	2000026c 	.word	0x2000026c

08009fc4 <_malloc_r>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	1ccd      	adds	r5, r1, #3
 8009fca:	439d      	bics	r5, r3
 8009fcc:	3508      	adds	r5, #8
 8009fce:	0006      	movs	r6, r0
 8009fd0:	2d0c      	cmp	r5, #12
 8009fd2:	d21f      	bcs.n	800a014 <_malloc_r+0x50>
 8009fd4:	250c      	movs	r5, #12
 8009fd6:	42a9      	cmp	r1, r5
 8009fd8:	d81e      	bhi.n	800a018 <_malloc_r+0x54>
 8009fda:	0030      	movs	r0, r6
 8009fdc:	f000 fa18 	bl	800a410 <__malloc_lock>
 8009fe0:	4925      	ldr	r1, [pc, #148]	; (800a078 <_malloc_r+0xb4>)
 8009fe2:	680a      	ldr	r2, [r1, #0]
 8009fe4:	0014      	movs	r4, r2
 8009fe6:	2c00      	cmp	r4, #0
 8009fe8:	d11a      	bne.n	800a020 <_malloc_r+0x5c>
 8009fea:	4f24      	ldr	r7, [pc, #144]	; (800a07c <_malloc_r+0xb8>)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d104      	bne.n	8009ffc <_malloc_r+0x38>
 8009ff2:	0021      	movs	r1, r4
 8009ff4:	0030      	movs	r0, r6
 8009ff6:	f000 f9a5 	bl	800a344 <_sbrk_r>
 8009ffa:	6038      	str	r0, [r7, #0]
 8009ffc:	0029      	movs	r1, r5
 8009ffe:	0030      	movs	r0, r6
 800a000:	f000 f9a0 	bl	800a344 <_sbrk_r>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d12b      	bne.n	800a060 <_malloc_r+0x9c>
 800a008:	230c      	movs	r3, #12
 800a00a:	0030      	movs	r0, r6
 800a00c:	6033      	str	r3, [r6, #0]
 800a00e:	f000 fa07 	bl	800a420 <__malloc_unlock>
 800a012:	e003      	b.n	800a01c <_malloc_r+0x58>
 800a014:	2d00      	cmp	r5, #0
 800a016:	dade      	bge.n	8009fd6 <_malloc_r+0x12>
 800a018:	230c      	movs	r3, #12
 800a01a:	6033      	str	r3, [r6, #0]
 800a01c:	2000      	movs	r0, #0
 800a01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	1b5b      	subs	r3, r3, r5
 800a024:	d419      	bmi.n	800a05a <_malloc_r+0x96>
 800a026:	2b0b      	cmp	r3, #11
 800a028:	d903      	bls.n	800a032 <_malloc_r+0x6e>
 800a02a:	6023      	str	r3, [r4, #0]
 800a02c:	18e4      	adds	r4, r4, r3
 800a02e:	6025      	str	r5, [r4, #0]
 800a030:	e003      	b.n	800a03a <_malloc_r+0x76>
 800a032:	6863      	ldr	r3, [r4, #4]
 800a034:	42a2      	cmp	r2, r4
 800a036:	d10e      	bne.n	800a056 <_malloc_r+0x92>
 800a038:	600b      	str	r3, [r1, #0]
 800a03a:	0030      	movs	r0, r6
 800a03c:	f000 f9f0 	bl	800a420 <__malloc_unlock>
 800a040:	0020      	movs	r0, r4
 800a042:	2207      	movs	r2, #7
 800a044:	300b      	adds	r0, #11
 800a046:	1d23      	adds	r3, r4, #4
 800a048:	4390      	bics	r0, r2
 800a04a:	1ac2      	subs	r2, r0, r3
 800a04c:	4298      	cmp	r0, r3
 800a04e:	d0e6      	beq.n	800a01e <_malloc_r+0x5a>
 800a050:	1a1b      	subs	r3, r3, r0
 800a052:	50a3      	str	r3, [r4, r2]
 800a054:	e7e3      	b.n	800a01e <_malloc_r+0x5a>
 800a056:	6053      	str	r3, [r2, #4]
 800a058:	e7ef      	b.n	800a03a <_malloc_r+0x76>
 800a05a:	0022      	movs	r2, r4
 800a05c:	6864      	ldr	r4, [r4, #4]
 800a05e:	e7c2      	b.n	8009fe6 <_malloc_r+0x22>
 800a060:	2303      	movs	r3, #3
 800a062:	1cc4      	adds	r4, r0, #3
 800a064:	439c      	bics	r4, r3
 800a066:	42a0      	cmp	r0, r4
 800a068:	d0e1      	beq.n	800a02e <_malloc_r+0x6a>
 800a06a:	1a21      	subs	r1, r4, r0
 800a06c:	0030      	movs	r0, r6
 800a06e:	f000 f969 	bl	800a344 <_sbrk_r>
 800a072:	1c43      	adds	r3, r0, #1
 800a074:	d1db      	bne.n	800a02e <_malloc_r+0x6a>
 800a076:	e7c7      	b.n	800a008 <_malloc_r+0x44>
 800a078:	2000026c 	.word	0x2000026c
 800a07c:	20000270 	.word	0x20000270

0800a080 <__ssputs_r>:
 800a080:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a082:	688e      	ldr	r6, [r1, #8]
 800a084:	b085      	sub	sp, #20
 800a086:	0007      	movs	r7, r0
 800a088:	000c      	movs	r4, r1
 800a08a:	9203      	str	r2, [sp, #12]
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	429e      	cmp	r6, r3
 800a090:	d83c      	bhi.n	800a10c <__ssputs_r+0x8c>
 800a092:	2390      	movs	r3, #144	; 0x90
 800a094:	898a      	ldrh	r2, [r1, #12]
 800a096:	00db      	lsls	r3, r3, #3
 800a098:	421a      	tst	r2, r3
 800a09a:	d034      	beq.n	800a106 <__ssputs_r+0x86>
 800a09c:	2503      	movs	r5, #3
 800a09e:	6909      	ldr	r1, [r1, #16]
 800a0a0:	6823      	ldr	r3, [r4, #0]
 800a0a2:	1a5b      	subs	r3, r3, r1
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	6963      	ldr	r3, [r4, #20]
 800a0a8:	9802      	ldr	r0, [sp, #8]
 800a0aa:	435d      	muls	r5, r3
 800a0ac:	0feb      	lsrs	r3, r5, #31
 800a0ae:	195d      	adds	r5, r3, r5
 800a0b0:	9b01      	ldr	r3, [sp, #4]
 800a0b2:	106d      	asrs	r5, r5, #1
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	181b      	adds	r3, r3, r0
 800a0b8:	42ab      	cmp	r3, r5
 800a0ba:	d900      	bls.n	800a0be <__ssputs_r+0x3e>
 800a0bc:	001d      	movs	r5, r3
 800a0be:	0553      	lsls	r3, r2, #21
 800a0c0:	d532      	bpl.n	800a128 <__ssputs_r+0xa8>
 800a0c2:	0029      	movs	r1, r5
 800a0c4:	0038      	movs	r0, r7
 800a0c6:	f7ff ff7d 	bl	8009fc4 <_malloc_r>
 800a0ca:	1e06      	subs	r6, r0, #0
 800a0cc:	d109      	bne.n	800a0e2 <__ssputs_r+0x62>
 800a0ce:	230c      	movs	r3, #12
 800a0d0:	603b      	str	r3, [r7, #0]
 800a0d2:	2340      	movs	r3, #64	; 0x40
 800a0d4:	2001      	movs	r0, #1
 800a0d6:	89a2      	ldrh	r2, [r4, #12]
 800a0d8:	4240      	negs	r0, r0
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	b005      	add	sp, #20
 800a0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e2:	9a02      	ldr	r2, [sp, #8]
 800a0e4:	6921      	ldr	r1, [r4, #16]
 800a0e6:	f7ff fb6e 	bl	80097c6 <memcpy>
 800a0ea:	89a3      	ldrh	r3, [r4, #12]
 800a0ec:	4a14      	ldr	r2, [pc, #80]	; (800a140 <__ssputs_r+0xc0>)
 800a0ee:	401a      	ands	r2, r3
 800a0f0:	2380      	movs	r3, #128	; 0x80
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	9b02      	ldr	r3, [sp, #8]
 800a0f8:	6126      	str	r6, [r4, #16]
 800a0fa:	18f6      	adds	r6, r6, r3
 800a0fc:	6026      	str	r6, [r4, #0]
 800a0fe:	6165      	str	r5, [r4, #20]
 800a100:	9e01      	ldr	r6, [sp, #4]
 800a102:	1aed      	subs	r5, r5, r3
 800a104:	60a5      	str	r5, [r4, #8]
 800a106:	9b01      	ldr	r3, [sp, #4]
 800a108:	429e      	cmp	r6, r3
 800a10a:	d900      	bls.n	800a10e <__ssputs_r+0x8e>
 800a10c:	9e01      	ldr	r6, [sp, #4]
 800a10e:	0032      	movs	r2, r6
 800a110:	9903      	ldr	r1, [sp, #12]
 800a112:	6820      	ldr	r0, [r4, #0]
 800a114:	f000 f968 	bl	800a3e8 <memmove>
 800a118:	68a3      	ldr	r3, [r4, #8]
 800a11a:	2000      	movs	r0, #0
 800a11c:	1b9b      	subs	r3, r3, r6
 800a11e:	60a3      	str	r3, [r4, #8]
 800a120:	6823      	ldr	r3, [r4, #0]
 800a122:	199e      	adds	r6, r3, r6
 800a124:	6026      	str	r6, [r4, #0]
 800a126:	e7da      	b.n	800a0de <__ssputs_r+0x5e>
 800a128:	002a      	movs	r2, r5
 800a12a:	0038      	movs	r0, r7
 800a12c:	f000 f980 	bl	800a430 <_realloc_r>
 800a130:	1e06      	subs	r6, r0, #0
 800a132:	d1e0      	bne.n	800a0f6 <__ssputs_r+0x76>
 800a134:	0038      	movs	r0, r7
 800a136:	6921      	ldr	r1, [r4, #16]
 800a138:	f7ff fefa 	bl	8009f30 <_free_r>
 800a13c:	e7c7      	b.n	800a0ce <__ssputs_r+0x4e>
 800a13e:	46c0      	nop			; (mov r8, r8)
 800a140:	fffffb7f 	.word	0xfffffb7f

0800a144 <_svfiprintf_r>:
 800a144:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a146:	b0a1      	sub	sp, #132	; 0x84
 800a148:	9003      	str	r0, [sp, #12]
 800a14a:	001d      	movs	r5, r3
 800a14c:	898b      	ldrh	r3, [r1, #12]
 800a14e:	000f      	movs	r7, r1
 800a150:	0016      	movs	r6, r2
 800a152:	061b      	lsls	r3, r3, #24
 800a154:	d511      	bpl.n	800a17a <_svfiprintf_r+0x36>
 800a156:	690b      	ldr	r3, [r1, #16]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d10e      	bne.n	800a17a <_svfiprintf_r+0x36>
 800a15c:	2140      	movs	r1, #64	; 0x40
 800a15e:	f7ff ff31 	bl	8009fc4 <_malloc_r>
 800a162:	6038      	str	r0, [r7, #0]
 800a164:	6138      	str	r0, [r7, #16]
 800a166:	2800      	cmp	r0, #0
 800a168:	d105      	bne.n	800a176 <_svfiprintf_r+0x32>
 800a16a:	230c      	movs	r3, #12
 800a16c:	9a03      	ldr	r2, [sp, #12]
 800a16e:	3801      	subs	r0, #1
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	b021      	add	sp, #132	; 0x84
 800a174:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a176:	2340      	movs	r3, #64	; 0x40
 800a178:	617b      	str	r3, [r7, #20]
 800a17a:	2300      	movs	r3, #0
 800a17c:	ac08      	add	r4, sp, #32
 800a17e:	6163      	str	r3, [r4, #20]
 800a180:	3320      	adds	r3, #32
 800a182:	7663      	strb	r3, [r4, #25]
 800a184:	3310      	adds	r3, #16
 800a186:	76a3      	strb	r3, [r4, #26]
 800a188:	9507      	str	r5, [sp, #28]
 800a18a:	0035      	movs	r5, r6
 800a18c:	782b      	ldrb	r3, [r5, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d001      	beq.n	800a196 <_svfiprintf_r+0x52>
 800a192:	2b25      	cmp	r3, #37	; 0x25
 800a194:	d147      	bne.n	800a226 <_svfiprintf_r+0xe2>
 800a196:	1bab      	subs	r3, r5, r6
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	42b5      	cmp	r5, r6
 800a19c:	d00c      	beq.n	800a1b8 <_svfiprintf_r+0x74>
 800a19e:	0032      	movs	r2, r6
 800a1a0:	0039      	movs	r1, r7
 800a1a2:	9803      	ldr	r0, [sp, #12]
 800a1a4:	f7ff ff6c 	bl	800a080 <__ssputs_r>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d100      	bne.n	800a1ae <_svfiprintf_r+0x6a>
 800a1ac:	e0ae      	b.n	800a30c <_svfiprintf_r+0x1c8>
 800a1ae:	6962      	ldr	r2, [r4, #20]
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	4694      	mov	ip, r2
 800a1b4:	4463      	add	r3, ip
 800a1b6:	6163      	str	r3, [r4, #20]
 800a1b8:	782b      	ldrb	r3, [r5, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d100      	bne.n	800a1c0 <_svfiprintf_r+0x7c>
 800a1be:	e0a5      	b.n	800a30c <_svfiprintf_r+0x1c8>
 800a1c0:	2201      	movs	r2, #1
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	4252      	negs	r2, r2
 800a1c6:	6062      	str	r2, [r4, #4]
 800a1c8:	a904      	add	r1, sp, #16
 800a1ca:	3254      	adds	r2, #84	; 0x54
 800a1cc:	1852      	adds	r2, r2, r1
 800a1ce:	1c6e      	adds	r6, r5, #1
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	60e3      	str	r3, [r4, #12]
 800a1d4:	60a3      	str	r3, [r4, #8]
 800a1d6:	7013      	strb	r3, [r2, #0]
 800a1d8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1da:	2205      	movs	r2, #5
 800a1dc:	7831      	ldrb	r1, [r6, #0]
 800a1de:	4854      	ldr	r0, [pc, #336]	; (800a330 <_svfiprintf_r+0x1ec>)
 800a1e0:	f7ff fae6 	bl	80097b0 <memchr>
 800a1e4:	1c75      	adds	r5, r6, #1
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d11f      	bne.n	800a22a <_svfiprintf_r+0xe6>
 800a1ea:	6822      	ldr	r2, [r4, #0]
 800a1ec:	06d3      	lsls	r3, r2, #27
 800a1ee:	d504      	bpl.n	800a1fa <_svfiprintf_r+0xb6>
 800a1f0:	2353      	movs	r3, #83	; 0x53
 800a1f2:	a904      	add	r1, sp, #16
 800a1f4:	185b      	adds	r3, r3, r1
 800a1f6:	2120      	movs	r1, #32
 800a1f8:	7019      	strb	r1, [r3, #0]
 800a1fa:	0713      	lsls	r3, r2, #28
 800a1fc:	d504      	bpl.n	800a208 <_svfiprintf_r+0xc4>
 800a1fe:	2353      	movs	r3, #83	; 0x53
 800a200:	a904      	add	r1, sp, #16
 800a202:	185b      	adds	r3, r3, r1
 800a204:	212b      	movs	r1, #43	; 0x2b
 800a206:	7019      	strb	r1, [r3, #0]
 800a208:	7833      	ldrb	r3, [r6, #0]
 800a20a:	2b2a      	cmp	r3, #42	; 0x2a
 800a20c:	d016      	beq.n	800a23c <_svfiprintf_r+0xf8>
 800a20e:	0035      	movs	r5, r6
 800a210:	2100      	movs	r1, #0
 800a212:	200a      	movs	r0, #10
 800a214:	68e3      	ldr	r3, [r4, #12]
 800a216:	782a      	ldrb	r2, [r5, #0]
 800a218:	1c6e      	adds	r6, r5, #1
 800a21a:	3a30      	subs	r2, #48	; 0x30
 800a21c:	2a09      	cmp	r2, #9
 800a21e:	d94e      	bls.n	800a2be <_svfiprintf_r+0x17a>
 800a220:	2900      	cmp	r1, #0
 800a222:	d111      	bne.n	800a248 <_svfiprintf_r+0x104>
 800a224:	e017      	b.n	800a256 <_svfiprintf_r+0x112>
 800a226:	3501      	adds	r5, #1
 800a228:	e7b0      	b.n	800a18c <_svfiprintf_r+0x48>
 800a22a:	4b41      	ldr	r3, [pc, #260]	; (800a330 <_svfiprintf_r+0x1ec>)
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	1ac0      	subs	r0, r0, r3
 800a230:	2301      	movs	r3, #1
 800a232:	4083      	lsls	r3, r0
 800a234:	4313      	orrs	r3, r2
 800a236:	002e      	movs	r6, r5
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	e7ce      	b.n	800a1da <_svfiprintf_r+0x96>
 800a23c:	9b07      	ldr	r3, [sp, #28]
 800a23e:	1d19      	adds	r1, r3, #4
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	9107      	str	r1, [sp, #28]
 800a244:	2b00      	cmp	r3, #0
 800a246:	db01      	blt.n	800a24c <_svfiprintf_r+0x108>
 800a248:	930b      	str	r3, [sp, #44]	; 0x2c
 800a24a:	e004      	b.n	800a256 <_svfiprintf_r+0x112>
 800a24c:	425b      	negs	r3, r3
 800a24e:	60e3      	str	r3, [r4, #12]
 800a250:	2302      	movs	r3, #2
 800a252:	4313      	orrs	r3, r2
 800a254:	6023      	str	r3, [r4, #0]
 800a256:	782b      	ldrb	r3, [r5, #0]
 800a258:	2b2e      	cmp	r3, #46	; 0x2e
 800a25a:	d10a      	bne.n	800a272 <_svfiprintf_r+0x12e>
 800a25c:	786b      	ldrb	r3, [r5, #1]
 800a25e:	2b2a      	cmp	r3, #42	; 0x2a
 800a260:	d135      	bne.n	800a2ce <_svfiprintf_r+0x18a>
 800a262:	9b07      	ldr	r3, [sp, #28]
 800a264:	3502      	adds	r5, #2
 800a266:	1d1a      	adds	r2, r3, #4
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	9207      	str	r2, [sp, #28]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	db2b      	blt.n	800a2c8 <_svfiprintf_r+0x184>
 800a270:	9309      	str	r3, [sp, #36]	; 0x24
 800a272:	4e30      	ldr	r6, [pc, #192]	; (800a334 <_svfiprintf_r+0x1f0>)
 800a274:	2203      	movs	r2, #3
 800a276:	0030      	movs	r0, r6
 800a278:	7829      	ldrb	r1, [r5, #0]
 800a27a:	f7ff fa99 	bl	80097b0 <memchr>
 800a27e:	2800      	cmp	r0, #0
 800a280:	d006      	beq.n	800a290 <_svfiprintf_r+0x14c>
 800a282:	2340      	movs	r3, #64	; 0x40
 800a284:	1b80      	subs	r0, r0, r6
 800a286:	4083      	lsls	r3, r0
 800a288:	6822      	ldr	r2, [r4, #0]
 800a28a:	3501      	adds	r5, #1
 800a28c:	4313      	orrs	r3, r2
 800a28e:	6023      	str	r3, [r4, #0]
 800a290:	7829      	ldrb	r1, [r5, #0]
 800a292:	2206      	movs	r2, #6
 800a294:	4828      	ldr	r0, [pc, #160]	; (800a338 <_svfiprintf_r+0x1f4>)
 800a296:	1c6e      	adds	r6, r5, #1
 800a298:	7621      	strb	r1, [r4, #24]
 800a29a:	f7ff fa89 	bl	80097b0 <memchr>
 800a29e:	2800      	cmp	r0, #0
 800a2a0:	d03c      	beq.n	800a31c <_svfiprintf_r+0x1d8>
 800a2a2:	4b26      	ldr	r3, [pc, #152]	; (800a33c <_svfiprintf_r+0x1f8>)
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d125      	bne.n	800a2f4 <_svfiprintf_r+0x1b0>
 800a2a8:	2207      	movs	r2, #7
 800a2aa:	9b07      	ldr	r3, [sp, #28]
 800a2ac:	3307      	adds	r3, #7
 800a2ae:	4393      	bics	r3, r2
 800a2b0:	3308      	adds	r3, #8
 800a2b2:	9307      	str	r3, [sp, #28]
 800a2b4:	6963      	ldr	r3, [r4, #20]
 800a2b6:	9a04      	ldr	r2, [sp, #16]
 800a2b8:	189b      	adds	r3, r3, r2
 800a2ba:	6163      	str	r3, [r4, #20]
 800a2bc:	e765      	b.n	800a18a <_svfiprintf_r+0x46>
 800a2be:	4343      	muls	r3, r0
 800a2c0:	0035      	movs	r5, r6
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	189b      	adds	r3, r3, r2
 800a2c6:	e7a6      	b.n	800a216 <_svfiprintf_r+0xd2>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	425b      	negs	r3, r3
 800a2cc:	e7d0      	b.n	800a270 <_svfiprintf_r+0x12c>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	200a      	movs	r0, #10
 800a2d2:	001a      	movs	r2, r3
 800a2d4:	3501      	adds	r5, #1
 800a2d6:	6063      	str	r3, [r4, #4]
 800a2d8:	7829      	ldrb	r1, [r5, #0]
 800a2da:	1c6e      	adds	r6, r5, #1
 800a2dc:	3930      	subs	r1, #48	; 0x30
 800a2de:	2909      	cmp	r1, #9
 800a2e0:	d903      	bls.n	800a2ea <_svfiprintf_r+0x1a6>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0c5      	beq.n	800a272 <_svfiprintf_r+0x12e>
 800a2e6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2e8:	e7c3      	b.n	800a272 <_svfiprintf_r+0x12e>
 800a2ea:	4342      	muls	r2, r0
 800a2ec:	0035      	movs	r5, r6
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	1852      	adds	r2, r2, r1
 800a2f2:	e7f1      	b.n	800a2d8 <_svfiprintf_r+0x194>
 800a2f4:	ab07      	add	r3, sp, #28
 800a2f6:	9300      	str	r3, [sp, #0]
 800a2f8:	003a      	movs	r2, r7
 800a2fa:	0021      	movs	r1, r4
 800a2fc:	4b10      	ldr	r3, [pc, #64]	; (800a340 <_svfiprintf_r+0x1fc>)
 800a2fe:	9803      	ldr	r0, [sp, #12]
 800a300:	f7fd ffae 	bl	8008260 <_printf_float>
 800a304:	9004      	str	r0, [sp, #16]
 800a306:	9b04      	ldr	r3, [sp, #16]
 800a308:	3301      	adds	r3, #1
 800a30a:	d1d3      	bne.n	800a2b4 <_svfiprintf_r+0x170>
 800a30c:	89bb      	ldrh	r3, [r7, #12]
 800a30e:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a310:	065b      	lsls	r3, r3, #25
 800a312:	d400      	bmi.n	800a316 <_svfiprintf_r+0x1d2>
 800a314:	e72d      	b.n	800a172 <_svfiprintf_r+0x2e>
 800a316:	2001      	movs	r0, #1
 800a318:	4240      	negs	r0, r0
 800a31a:	e72a      	b.n	800a172 <_svfiprintf_r+0x2e>
 800a31c:	ab07      	add	r3, sp, #28
 800a31e:	9300      	str	r3, [sp, #0]
 800a320:	003a      	movs	r2, r7
 800a322:	0021      	movs	r1, r4
 800a324:	4b06      	ldr	r3, [pc, #24]	; (800a340 <_svfiprintf_r+0x1fc>)
 800a326:	9803      	ldr	r0, [sp, #12]
 800a328:	f7fe fa58 	bl	80087dc <_printf_i>
 800a32c:	e7ea      	b.n	800a304 <_svfiprintf_r+0x1c0>
 800a32e:	46c0      	nop			; (mov r8, r8)
 800a330:	0800b3d4 	.word	0x0800b3d4
 800a334:	0800b3da 	.word	0x0800b3da
 800a338:	0800b3de 	.word	0x0800b3de
 800a33c:	08008261 	.word	0x08008261
 800a340:	0800a081 	.word	0x0800a081

0800a344 <_sbrk_r>:
 800a344:	2300      	movs	r3, #0
 800a346:	b570      	push	{r4, r5, r6, lr}
 800a348:	4d06      	ldr	r5, [pc, #24]	; (800a364 <_sbrk_r+0x20>)
 800a34a:	0004      	movs	r4, r0
 800a34c:	0008      	movs	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f9 fb68 	bl	8003a24 <_sbrk>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d103      	bne.n	800a360 <_sbrk_r+0x1c>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d000      	beq.n	800a360 <_sbrk_r+0x1c>
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	46c0      	nop			; (mov r8, r8)
 800a364:	20000448 	.word	0x20000448

0800a368 <__assert_func>:
 800a368:	b530      	push	{r4, r5, lr}
 800a36a:	0014      	movs	r4, r2
 800a36c:	001a      	movs	r2, r3
 800a36e:	4b09      	ldr	r3, [pc, #36]	; (800a394 <__assert_func+0x2c>)
 800a370:	0005      	movs	r5, r0
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	b085      	sub	sp, #20
 800a376:	68d8      	ldr	r0, [r3, #12]
 800a378:	4b07      	ldr	r3, [pc, #28]	; (800a398 <__assert_func+0x30>)
 800a37a:	2c00      	cmp	r4, #0
 800a37c:	d101      	bne.n	800a382 <__assert_func+0x1a>
 800a37e:	4b07      	ldr	r3, [pc, #28]	; (800a39c <__assert_func+0x34>)
 800a380:	001c      	movs	r4, r3
 800a382:	9301      	str	r3, [sp, #4]
 800a384:	9100      	str	r1, [sp, #0]
 800a386:	002b      	movs	r3, r5
 800a388:	4905      	ldr	r1, [pc, #20]	; (800a3a0 <__assert_func+0x38>)
 800a38a:	9402      	str	r4, [sp, #8]
 800a38c:	f000 f80a 	bl	800a3a4 <fiprintf>
 800a390:	f000 fab2 	bl	800a8f8 <abort>
 800a394:	20000010 	.word	0x20000010
 800a398:	0800b3e5 	.word	0x0800b3e5
 800a39c:	0800b420 	.word	0x0800b420
 800a3a0:	0800b3f2 	.word	0x0800b3f2

0800a3a4 <fiprintf>:
 800a3a4:	b40e      	push	{r1, r2, r3}
 800a3a6:	b503      	push	{r0, r1, lr}
 800a3a8:	0001      	movs	r1, r0
 800a3aa:	ab03      	add	r3, sp, #12
 800a3ac:	4804      	ldr	r0, [pc, #16]	; (800a3c0 <fiprintf+0x1c>)
 800a3ae:	cb04      	ldmia	r3!, {r2}
 800a3b0:	6800      	ldr	r0, [r0, #0]
 800a3b2:	9301      	str	r3, [sp, #4]
 800a3b4:	f000 f88a 	bl	800a4cc <_vfiprintf_r>
 800a3b8:	b002      	add	sp, #8
 800a3ba:	bc08      	pop	{r3}
 800a3bc:	b003      	add	sp, #12
 800a3be:	4718      	bx	r3
 800a3c0:	20000010 	.word	0x20000010

0800a3c4 <__ascii_mbtowc>:
 800a3c4:	b082      	sub	sp, #8
 800a3c6:	2900      	cmp	r1, #0
 800a3c8:	d100      	bne.n	800a3cc <__ascii_mbtowc+0x8>
 800a3ca:	a901      	add	r1, sp, #4
 800a3cc:	1e10      	subs	r0, r2, #0
 800a3ce:	d006      	beq.n	800a3de <__ascii_mbtowc+0x1a>
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d006      	beq.n	800a3e2 <__ascii_mbtowc+0x1e>
 800a3d4:	7813      	ldrb	r3, [r2, #0]
 800a3d6:	600b      	str	r3, [r1, #0]
 800a3d8:	7810      	ldrb	r0, [r2, #0]
 800a3da:	1e43      	subs	r3, r0, #1
 800a3dc:	4198      	sbcs	r0, r3
 800a3de:	b002      	add	sp, #8
 800a3e0:	4770      	bx	lr
 800a3e2:	2002      	movs	r0, #2
 800a3e4:	4240      	negs	r0, r0
 800a3e6:	e7fa      	b.n	800a3de <__ascii_mbtowc+0x1a>

0800a3e8 <memmove>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	4288      	cmp	r0, r1
 800a3ec:	d902      	bls.n	800a3f4 <memmove+0xc>
 800a3ee:	188b      	adds	r3, r1, r2
 800a3f0:	4298      	cmp	r0, r3
 800a3f2:	d303      	bcc.n	800a3fc <memmove+0x14>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	e007      	b.n	800a408 <memmove+0x20>
 800a3f8:	5c8b      	ldrb	r3, [r1, r2]
 800a3fa:	5483      	strb	r3, [r0, r2]
 800a3fc:	3a01      	subs	r2, #1
 800a3fe:	d2fb      	bcs.n	800a3f8 <memmove+0x10>
 800a400:	bd10      	pop	{r4, pc}
 800a402:	5ccc      	ldrb	r4, [r1, r3]
 800a404:	54c4      	strb	r4, [r0, r3]
 800a406:	3301      	adds	r3, #1
 800a408:	429a      	cmp	r2, r3
 800a40a:	d1fa      	bne.n	800a402 <memmove+0x1a>
 800a40c:	e7f8      	b.n	800a400 <memmove+0x18>
	...

0800a410 <__malloc_lock>:
 800a410:	b510      	push	{r4, lr}
 800a412:	4802      	ldr	r0, [pc, #8]	; (800a41c <__malloc_lock+0xc>)
 800a414:	f000 fc47 	bl	800aca6 <__retarget_lock_acquire_recursive>
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	46c0      	nop			; (mov r8, r8)
 800a41c:	20000450 	.word	0x20000450

0800a420 <__malloc_unlock>:
 800a420:	b510      	push	{r4, lr}
 800a422:	4802      	ldr	r0, [pc, #8]	; (800a42c <__malloc_unlock+0xc>)
 800a424:	f000 fc40 	bl	800aca8 <__retarget_lock_release_recursive>
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	46c0      	nop			; (mov r8, r8)
 800a42c:	20000450 	.word	0x20000450

0800a430 <_realloc_r>:
 800a430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a432:	0007      	movs	r7, r0
 800a434:	000d      	movs	r5, r1
 800a436:	0016      	movs	r6, r2
 800a438:	2900      	cmp	r1, #0
 800a43a:	d105      	bne.n	800a448 <_realloc_r+0x18>
 800a43c:	0011      	movs	r1, r2
 800a43e:	f7ff fdc1 	bl	8009fc4 <_malloc_r>
 800a442:	0004      	movs	r4, r0
 800a444:	0020      	movs	r0, r4
 800a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a448:	2a00      	cmp	r2, #0
 800a44a:	d103      	bne.n	800a454 <_realloc_r+0x24>
 800a44c:	f7ff fd70 	bl	8009f30 <_free_r>
 800a450:	0034      	movs	r4, r6
 800a452:	e7f7      	b.n	800a444 <_realloc_r+0x14>
 800a454:	f000 fc96 	bl	800ad84 <_malloc_usable_size_r>
 800a458:	002c      	movs	r4, r5
 800a45a:	42b0      	cmp	r0, r6
 800a45c:	d2f2      	bcs.n	800a444 <_realloc_r+0x14>
 800a45e:	0031      	movs	r1, r6
 800a460:	0038      	movs	r0, r7
 800a462:	f7ff fdaf 	bl	8009fc4 <_malloc_r>
 800a466:	1e04      	subs	r4, r0, #0
 800a468:	d0ec      	beq.n	800a444 <_realloc_r+0x14>
 800a46a:	0029      	movs	r1, r5
 800a46c:	0032      	movs	r2, r6
 800a46e:	f7ff f9aa 	bl	80097c6 <memcpy>
 800a472:	0029      	movs	r1, r5
 800a474:	0038      	movs	r0, r7
 800a476:	f7ff fd5b 	bl	8009f30 <_free_r>
 800a47a:	e7e3      	b.n	800a444 <_realloc_r+0x14>

0800a47c <__sfputc_r>:
 800a47c:	6893      	ldr	r3, [r2, #8]
 800a47e:	b510      	push	{r4, lr}
 800a480:	3b01      	subs	r3, #1
 800a482:	6093      	str	r3, [r2, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	da04      	bge.n	800a492 <__sfputc_r+0x16>
 800a488:	6994      	ldr	r4, [r2, #24]
 800a48a:	42a3      	cmp	r3, r4
 800a48c:	db07      	blt.n	800a49e <__sfputc_r+0x22>
 800a48e:	290a      	cmp	r1, #10
 800a490:	d005      	beq.n	800a49e <__sfputc_r+0x22>
 800a492:	6813      	ldr	r3, [r2, #0]
 800a494:	1c58      	adds	r0, r3, #1
 800a496:	6010      	str	r0, [r2, #0]
 800a498:	7019      	strb	r1, [r3, #0]
 800a49a:	0008      	movs	r0, r1
 800a49c:	bd10      	pop	{r4, pc}
 800a49e:	f000 f94f 	bl	800a740 <__swbuf_r>
 800a4a2:	0001      	movs	r1, r0
 800a4a4:	e7f9      	b.n	800a49a <__sfputc_r+0x1e>

0800a4a6 <__sfputs_r>:
 800a4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a8:	0006      	movs	r6, r0
 800a4aa:	000f      	movs	r7, r1
 800a4ac:	0014      	movs	r4, r2
 800a4ae:	18d5      	adds	r5, r2, r3
 800a4b0:	42ac      	cmp	r4, r5
 800a4b2:	d101      	bne.n	800a4b8 <__sfputs_r+0x12>
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	e007      	b.n	800a4c8 <__sfputs_r+0x22>
 800a4b8:	7821      	ldrb	r1, [r4, #0]
 800a4ba:	003a      	movs	r2, r7
 800a4bc:	0030      	movs	r0, r6
 800a4be:	f7ff ffdd 	bl	800a47c <__sfputc_r>
 800a4c2:	3401      	adds	r4, #1
 800a4c4:	1c43      	adds	r3, r0, #1
 800a4c6:	d1f3      	bne.n	800a4b0 <__sfputs_r+0xa>
 800a4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4cc <_vfiprintf_r>:
 800a4cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4ce:	b0a1      	sub	sp, #132	; 0x84
 800a4d0:	0006      	movs	r6, r0
 800a4d2:	000c      	movs	r4, r1
 800a4d4:	001f      	movs	r7, r3
 800a4d6:	9203      	str	r2, [sp, #12]
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	d004      	beq.n	800a4e6 <_vfiprintf_r+0x1a>
 800a4dc:	6983      	ldr	r3, [r0, #24]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <_vfiprintf_r+0x1a>
 800a4e2:	f000 fb3f 	bl	800ab64 <__sinit>
 800a4e6:	4b8e      	ldr	r3, [pc, #568]	; (800a720 <_vfiprintf_r+0x254>)
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	d11c      	bne.n	800a526 <_vfiprintf_r+0x5a>
 800a4ec:	6874      	ldr	r4, [r6, #4]
 800a4ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4f0:	07db      	lsls	r3, r3, #31
 800a4f2:	d405      	bmi.n	800a500 <_vfiprintf_r+0x34>
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	059b      	lsls	r3, r3, #22
 800a4f8:	d402      	bmi.n	800a500 <_vfiprintf_r+0x34>
 800a4fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4fc:	f000 fbd3 	bl	800aca6 <__retarget_lock_acquire_recursive>
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	071b      	lsls	r3, r3, #28
 800a504:	d502      	bpl.n	800a50c <_vfiprintf_r+0x40>
 800a506:	6923      	ldr	r3, [r4, #16]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d11d      	bne.n	800a548 <_vfiprintf_r+0x7c>
 800a50c:	0021      	movs	r1, r4
 800a50e:	0030      	movs	r0, r6
 800a510:	f000 f97a 	bl	800a808 <__swsetup_r>
 800a514:	2800      	cmp	r0, #0
 800a516:	d017      	beq.n	800a548 <_vfiprintf_r+0x7c>
 800a518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a51a:	07db      	lsls	r3, r3, #31
 800a51c:	d50d      	bpl.n	800a53a <_vfiprintf_r+0x6e>
 800a51e:	2001      	movs	r0, #1
 800a520:	4240      	negs	r0, r0
 800a522:	b021      	add	sp, #132	; 0x84
 800a524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a526:	4b7f      	ldr	r3, [pc, #508]	; (800a724 <_vfiprintf_r+0x258>)
 800a528:	429c      	cmp	r4, r3
 800a52a:	d101      	bne.n	800a530 <_vfiprintf_r+0x64>
 800a52c:	68b4      	ldr	r4, [r6, #8]
 800a52e:	e7de      	b.n	800a4ee <_vfiprintf_r+0x22>
 800a530:	4b7d      	ldr	r3, [pc, #500]	; (800a728 <_vfiprintf_r+0x25c>)
 800a532:	429c      	cmp	r4, r3
 800a534:	d1db      	bne.n	800a4ee <_vfiprintf_r+0x22>
 800a536:	68f4      	ldr	r4, [r6, #12]
 800a538:	e7d9      	b.n	800a4ee <_vfiprintf_r+0x22>
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	059b      	lsls	r3, r3, #22
 800a53e:	d4ee      	bmi.n	800a51e <_vfiprintf_r+0x52>
 800a540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a542:	f000 fbb1 	bl	800aca8 <__retarget_lock_release_recursive>
 800a546:	e7ea      	b.n	800a51e <_vfiprintf_r+0x52>
 800a548:	2300      	movs	r3, #0
 800a54a:	ad08      	add	r5, sp, #32
 800a54c:	616b      	str	r3, [r5, #20]
 800a54e:	3320      	adds	r3, #32
 800a550:	766b      	strb	r3, [r5, #25]
 800a552:	3310      	adds	r3, #16
 800a554:	76ab      	strb	r3, [r5, #26]
 800a556:	9707      	str	r7, [sp, #28]
 800a558:	9f03      	ldr	r7, [sp, #12]
 800a55a:	783b      	ldrb	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <_vfiprintf_r+0x98>
 800a560:	2b25      	cmp	r3, #37	; 0x25
 800a562:	d14e      	bne.n	800a602 <_vfiprintf_r+0x136>
 800a564:	9b03      	ldr	r3, [sp, #12]
 800a566:	1afb      	subs	r3, r7, r3
 800a568:	9305      	str	r3, [sp, #20]
 800a56a:	9b03      	ldr	r3, [sp, #12]
 800a56c:	429f      	cmp	r7, r3
 800a56e:	d00d      	beq.n	800a58c <_vfiprintf_r+0xc0>
 800a570:	9b05      	ldr	r3, [sp, #20]
 800a572:	0021      	movs	r1, r4
 800a574:	0030      	movs	r0, r6
 800a576:	9a03      	ldr	r2, [sp, #12]
 800a578:	f7ff ff95 	bl	800a4a6 <__sfputs_r>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d100      	bne.n	800a582 <_vfiprintf_r+0xb6>
 800a580:	e0b5      	b.n	800a6ee <_vfiprintf_r+0x222>
 800a582:	696a      	ldr	r2, [r5, #20]
 800a584:	9b05      	ldr	r3, [sp, #20]
 800a586:	4694      	mov	ip, r2
 800a588:	4463      	add	r3, ip
 800a58a:	616b      	str	r3, [r5, #20]
 800a58c:	783b      	ldrb	r3, [r7, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d100      	bne.n	800a594 <_vfiprintf_r+0xc8>
 800a592:	e0ac      	b.n	800a6ee <_vfiprintf_r+0x222>
 800a594:	2201      	movs	r2, #1
 800a596:	1c7b      	adds	r3, r7, #1
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	2300      	movs	r3, #0
 800a59c:	4252      	negs	r2, r2
 800a59e:	606a      	str	r2, [r5, #4]
 800a5a0:	a904      	add	r1, sp, #16
 800a5a2:	3254      	adds	r2, #84	; 0x54
 800a5a4:	1852      	adds	r2, r2, r1
 800a5a6:	602b      	str	r3, [r5, #0]
 800a5a8:	60eb      	str	r3, [r5, #12]
 800a5aa:	60ab      	str	r3, [r5, #8]
 800a5ac:	7013      	strb	r3, [r2, #0]
 800a5ae:	65ab      	str	r3, [r5, #88]	; 0x58
 800a5b0:	9b03      	ldr	r3, [sp, #12]
 800a5b2:	2205      	movs	r2, #5
 800a5b4:	7819      	ldrb	r1, [r3, #0]
 800a5b6:	485d      	ldr	r0, [pc, #372]	; (800a72c <_vfiprintf_r+0x260>)
 800a5b8:	f7ff f8fa 	bl	80097b0 <memchr>
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	1c5f      	adds	r7, r3, #1
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d120      	bne.n	800a606 <_vfiprintf_r+0x13a>
 800a5c4:	682a      	ldr	r2, [r5, #0]
 800a5c6:	06d3      	lsls	r3, r2, #27
 800a5c8:	d504      	bpl.n	800a5d4 <_vfiprintf_r+0x108>
 800a5ca:	2353      	movs	r3, #83	; 0x53
 800a5cc:	a904      	add	r1, sp, #16
 800a5ce:	185b      	adds	r3, r3, r1
 800a5d0:	2120      	movs	r1, #32
 800a5d2:	7019      	strb	r1, [r3, #0]
 800a5d4:	0713      	lsls	r3, r2, #28
 800a5d6:	d504      	bpl.n	800a5e2 <_vfiprintf_r+0x116>
 800a5d8:	2353      	movs	r3, #83	; 0x53
 800a5da:	a904      	add	r1, sp, #16
 800a5dc:	185b      	adds	r3, r3, r1
 800a5de:	212b      	movs	r1, #43	; 0x2b
 800a5e0:	7019      	strb	r1, [r3, #0]
 800a5e2:	9b03      	ldr	r3, [sp, #12]
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	2b2a      	cmp	r3, #42	; 0x2a
 800a5e8:	d016      	beq.n	800a618 <_vfiprintf_r+0x14c>
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	68eb      	ldr	r3, [r5, #12]
 800a5ee:	9f03      	ldr	r7, [sp, #12]
 800a5f0:	783a      	ldrb	r2, [r7, #0]
 800a5f2:	1c78      	adds	r0, r7, #1
 800a5f4:	3a30      	subs	r2, #48	; 0x30
 800a5f6:	4684      	mov	ip, r0
 800a5f8:	2a09      	cmp	r2, #9
 800a5fa:	d94f      	bls.n	800a69c <_vfiprintf_r+0x1d0>
 800a5fc:	2900      	cmp	r1, #0
 800a5fe:	d111      	bne.n	800a624 <_vfiprintf_r+0x158>
 800a600:	e017      	b.n	800a632 <_vfiprintf_r+0x166>
 800a602:	3701      	adds	r7, #1
 800a604:	e7a9      	b.n	800a55a <_vfiprintf_r+0x8e>
 800a606:	4b49      	ldr	r3, [pc, #292]	; (800a72c <_vfiprintf_r+0x260>)
 800a608:	682a      	ldr	r2, [r5, #0]
 800a60a:	1ac0      	subs	r0, r0, r3
 800a60c:	2301      	movs	r3, #1
 800a60e:	4083      	lsls	r3, r0
 800a610:	4313      	orrs	r3, r2
 800a612:	602b      	str	r3, [r5, #0]
 800a614:	9703      	str	r7, [sp, #12]
 800a616:	e7cb      	b.n	800a5b0 <_vfiprintf_r+0xe4>
 800a618:	9b07      	ldr	r3, [sp, #28]
 800a61a:	1d19      	adds	r1, r3, #4
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	9107      	str	r1, [sp, #28]
 800a620:	2b00      	cmp	r3, #0
 800a622:	db01      	blt.n	800a628 <_vfiprintf_r+0x15c>
 800a624:	930b      	str	r3, [sp, #44]	; 0x2c
 800a626:	e004      	b.n	800a632 <_vfiprintf_r+0x166>
 800a628:	425b      	negs	r3, r3
 800a62a:	60eb      	str	r3, [r5, #12]
 800a62c:	2302      	movs	r3, #2
 800a62e:	4313      	orrs	r3, r2
 800a630:	602b      	str	r3, [r5, #0]
 800a632:	783b      	ldrb	r3, [r7, #0]
 800a634:	2b2e      	cmp	r3, #46	; 0x2e
 800a636:	d10a      	bne.n	800a64e <_vfiprintf_r+0x182>
 800a638:	787b      	ldrb	r3, [r7, #1]
 800a63a:	2b2a      	cmp	r3, #42	; 0x2a
 800a63c:	d137      	bne.n	800a6ae <_vfiprintf_r+0x1e2>
 800a63e:	9b07      	ldr	r3, [sp, #28]
 800a640:	3702      	adds	r7, #2
 800a642:	1d1a      	adds	r2, r3, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	9207      	str	r2, [sp, #28]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	db2d      	blt.n	800a6a8 <_vfiprintf_r+0x1dc>
 800a64c:	9309      	str	r3, [sp, #36]	; 0x24
 800a64e:	2203      	movs	r2, #3
 800a650:	7839      	ldrb	r1, [r7, #0]
 800a652:	4837      	ldr	r0, [pc, #220]	; (800a730 <_vfiprintf_r+0x264>)
 800a654:	f7ff f8ac 	bl	80097b0 <memchr>
 800a658:	2800      	cmp	r0, #0
 800a65a:	d007      	beq.n	800a66c <_vfiprintf_r+0x1a0>
 800a65c:	4b34      	ldr	r3, [pc, #208]	; (800a730 <_vfiprintf_r+0x264>)
 800a65e:	682a      	ldr	r2, [r5, #0]
 800a660:	1ac0      	subs	r0, r0, r3
 800a662:	2340      	movs	r3, #64	; 0x40
 800a664:	4083      	lsls	r3, r0
 800a666:	4313      	orrs	r3, r2
 800a668:	3701      	adds	r7, #1
 800a66a:	602b      	str	r3, [r5, #0]
 800a66c:	7839      	ldrb	r1, [r7, #0]
 800a66e:	1c7b      	adds	r3, r7, #1
 800a670:	2206      	movs	r2, #6
 800a672:	4830      	ldr	r0, [pc, #192]	; (800a734 <_vfiprintf_r+0x268>)
 800a674:	9303      	str	r3, [sp, #12]
 800a676:	7629      	strb	r1, [r5, #24]
 800a678:	f7ff f89a 	bl	80097b0 <memchr>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d045      	beq.n	800a70c <_vfiprintf_r+0x240>
 800a680:	4b2d      	ldr	r3, [pc, #180]	; (800a738 <_vfiprintf_r+0x26c>)
 800a682:	2b00      	cmp	r3, #0
 800a684:	d127      	bne.n	800a6d6 <_vfiprintf_r+0x20a>
 800a686:	2207      	movs	r2, #7
 800a688:	9b07      	ldr	r3, [sp, #28]
 800a68a:	3307      	adds	r3, #7
 800a68c:	4393      	bics	r3, r2
 800a68e:	3308      	adds	r3, #8
 800a690:	9307      	str	r3, [sp, #28]
 800a692:	696b      	ldr	r3, [r5, #20]
 800a694:	9a04      	ldr	r2, [sp, #16]
 800a696:	189b      	adds	r3, r3, r2
 800a698:	616b      	str	r3, [r5, #20]
 800a69a:	e75d      	b.n	800a558 <_vfiprintf_r+0x8c>
 800a69c:	210a      	movs	r1, #10
 800a69e:	434b      	muls	r3, r1
 800a6a0:	4667      	mov	r7, ip
 800a6a2:	189b      	adds	r3, r3, r2
 800a6a4:	3909      	subs	r1, #9
 800a6a6:	e7a3      	b.n	800a5f0 <_vfiprintf_r+0x124>
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	425b      	negs	r3, r3
 800a6ac:	e7ce      	b.n	800a64c <_vfiprintf_r+0x180>
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	001a      	movs	r2, r3
 800a6b2:	3701      	adds	r7, #1
 800a6b4:	606b      	str	r3, [r5, #4]
 800a6b6:	7839      	ldrb	r1, [r7, #0]
 800a6b8:	1c78      	adds	r0, r7, #1
 800a6ba:	3930      	subs	r1, #48	; 0x30
 800a6bc:	4684      	mov	ip, r0
 800a6be:	2909      	cmp	r1, #9
 800a6c0:	d903      	bls.n	800a6ca <_vfiprintf_r+0x1fe>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0c3      	beq.n	800a64e <_vfiprintf_r+0x182>
 800a6c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a6c8:	e7c1      	b.n	800a64e <_vfiprintf_r+0x182>
 800a6ca:	230a      	movs	r3, #10
 800a6cc:	435a      	muls	r2, r3
 800a6ce:	4667      	mov	r7, ip
 800a6d0:	1852      	adds	r2, r2, r1
 800a6d2:	3b09      	subs	r3, #9
 800a6d4:	e7ef      	b.n	800a6b6 <_vfiprintf_r+0x1ea>
 800a6d6:	ab07      	add	r3, sp, #28
 800a6d8:	9300      	str	r3, [sp, #0]
 800a6da:	0022      	movs	r2, r4
 800a6dc:	0029      	movs	r1, r5
 800a6de:	0030      	movs	r0, r6
 800a6e0:	4b16      	ldr	r3, [pc, #88]	; (800a73c <_vfiprintf_r+0x270>)
 800a6e2:	f7fd fdbd 	bl	8008260 <_printf_float>
 800a6e6:	9004      	str	r0, [sp, #16]
 800a6e8:	9b04      	ldr	r3, [sp, #16]
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	d1d1      	bne.n	800a692 <_vfiprintf_r+0x1c6>
 800a6ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6f0:	07db      	lsls	r3, r3, #31
 800a6f2:	d405      	bmi.n	800a700 <_vfiprintf_r+0x234>
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	059b      	lsls	r3, r3, #22
 800a6f8:	d402      	bmi.n	800a700 <_vfiprintf_r+0x234>
 800a6fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6fc:	f000 fad4 	bl	800aca8 <__retarget_lock_release_recursive>
 800a700:	89a3      	ldrh	r3, [r4, #12]
 800a702:	065b      	lsls	r3, r3, #25
 800a704:	d500      	bpl.n	800a708 <_vfiprintf_r+0x23c>
 800a706:	e70a      	b.n	800a51e <_vfiprintf_r+0x52>
 800a708:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a70a:	e70a      	b.n	800a522 <_vfiprintf_r+0x56>
 800a70c:	ab07      	add	r3, sp, #28
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	0022      	movs	r2, r4
 800a712:	0029      	movs	r1, r5
 800a714:	0030      	movs	r0, r6
 800a716:	4b09      	ldr	r3, [pc, #36]	; (800a73c <_vfiprintf_r+0x270>)
 800a718:	f7fe f860 	bl	80087dc <_printf_i>
 800a71c:	e7e3      	b.n	800a6e6 <_vfiprintf_r+0x21a>
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	0800b54c 	.word	0x0800b54c
 800a724:	0800b56c 	.word	0x0800b56c
 800a728:	0800b52c 	.word	0x0800b52c
 800a72c:	0800b3d4 	.word	0x0800b3d4
 800a730:	0800b3da 	.word	0x0800b3da
 800a734:	0800b3de 	.word	0x0800b3de
 800a738:	08008261 	.word	0x08008261
 800a73c:	0800a4a7 	.word	0x0800a4a7

0800a740 <__swbuf_r>:
 800a740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a742:	0005      	movs	r5, r0
 800a744:	000e      	movs	r6, r1
 800a746:	0014      	movs	r4, r2
 800a748:	2800      	cmp	r0, #0
 800a74a:	d004      	beq.n	800a756 <__swbuf_r+0x16>
 800a74c:	6983      	ldr	r3, [r0, #24]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <__swbuf_r+0x16>
 800a752:	f000 fa07 	bl	800ab64 <__sinit>
 800a756:	4b22      	ldr	r3, [pc, #136]	; (800a7e0 <__swbuf_r+0xa0>)
 800a758:	429c      	cmp	r4, r3
 800a75a:	d12e      	bne.n	800a7ba <__swbuf_r+0x7a>
 800a75c:	686c      	ldr	r4, [r5, #4]
 800a75e:	69a3      	ldr	r3, [r4, #24]
 800a760:	60a3      	str	r3, [r4, #8]
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	071b      	lsls	r3, r3, #28
 800a766:	d532      	bpl.n	800a7ce <__swbuf_r+0x8e>
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d02f      	beq.n	800a7ce <__swbuf_r+0x8e>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	b2f7      	uxtb	r7, r6
 800a774:	1a98      	subs	r0, r3, r2
 800a776:	6963      	ldr	r3, [r4, #20]
 800a778:	b2f6      	uxtb	r6, r6
 800a77a:	4283      	cmp	r3, r0
 800a77c:	dc05      	bgt.n	800a78a <__swbuf_r+0x4a>
 800a77e:	0021      	movs	r1, r4
 800a780:	0028      	movs	r0, r5
 800a782:	f000 f94d 	bl	800aa20 <_fflush_r>
 800a786:	2800      	cmp	r0, #0
 800a788:	d127      	bne.n	800a7da <__swbuf_r+0x9a>
 800a78a:	68a3      	ldr	r3, [r4, #8]
 800a78c:	3001      	adds	r0, #1
 800a78e:	3b01      	subs	r3, #1
 800a790:	60a3      	str	r3, [r4, #8]
 800a792:	6823      	ldr	r3, [r4, #0]
 800a794:	1c5a      	adds	r2, r3, #1
 800a796:	6022      	str	r2, [r4, #0]
 800a798:	701f      	strb	r7, [r3, #0]
 800a79a:	6963      	ldr	r3, [r4, #20]
 800a79c:	4283      	cmp	r3, r0
 800a79e:	d004      	beq.n	800a7aa <__swbuf_r+0x6a>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	07db      	lsls	r3, r3, #31
 800a7a4:	d507      	bpl.n	800a7b6 <__swbuf_r+0x76>
 800a7a6:	2e0a      	cmp	r6, #10
 800a7a8:	d105      	bne.n	800a7b6 <__swbuf_r+0x76>
 800a7aa:	0021      	movs	r1, r4
 800a7ac:	0028      	movs	r0, r5
 800a7ae:	f000 f937 	bl	800aa20 <_fflush_r>
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d111      	bne.n	800a7da <__swbuf_r+0x9a>
 800a7b6:	0030      	movs	r0, r6
 800a7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7ba:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <__swbuf_r+0xa4>)
 800a7bc:	429c      	cmp	r4, r3
 800a7be:	d101      	bne.n	800a7c4 <__swbuf_r+0x84>
 800a7c0:	68ac      	ldr	r4, [r5, #8]
 800a7c2:	e7cc      	b.n	800a75e <__swbuf_r+0x1e>
 800a7c4:	4b08      	ldr	r3, [pc, #32]	; (800a7e8 <__swbuf_r+0xa8>)
 800a7c6:	429c      	cmp	r4, r3
 800a7c8:	d1c9      	bne.n	800a75e <__swbuf_r+0x1e>
 800a7ca:	68ec      	ldr	r4, [r5, #12]
 800a7cc:	e7c7      	b.n	800a75e <__swbuf_r+0x1e>
 800a7ce:	0021      	movs	r1, r4
 800a7d0:	0028      	movs	r0, r5
 800a7d2:	f000 f819 	bl	800a808 <__swsetup_r>
 800a7d6:	2800      	cmp	r0, #0
 800a7d8:	d0c9      	beq.n	800a76e <__swbuf_r+0x2e>
 800a7da:	2601      	movs	r6, #1
 800a7dc:	4276      	negs	r6, r6
 800a7de:	e7ea      	b.n	800a7b6 <__swbuf_r+0x76>
 800a7e0:	0800b54c 	.word	0x0800b54c
 800a7e4:	0800b56c 	.word	0x0800b56c
 800a7e8:	0800b52c 	.word	0x0800b52c

0800a7ec <__ascii_wctomb>:
 800a7ec:	0003      	movs	r3, r0
 800a7ee:	1e08      	subs	r0, r1, #0
 800a7f0:	d005      	beq.n	800a7fe <__ascii_wctomb+0x12>
 800a7f2:	2aff      	cmp	r2, #255	; 0xff
 800a7f4:	d904      	bls.n	800a800 <__ascii_wctomb+0x14>
 800a7f6:	228a      	movs	r2, #138	; 0x8a
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	4240      	negs	r0, r0
 800a7fe:	4770      	bx	lr
 800a800:	2001      	movs	r0, #1
 800a802:	700a      	strb	r2, [r1, #0]
 800a804:	e7fb      	b.n	800a7fe <__ascii_wctomb+0x12>
	...

0800a808 <__swsetup_r>:
 800a808:	4b37      	ldr	r3, [pc, #220]	; (800a8e8 <__swsetup_r+0xe0>)
 800a80a:	b570      	push	{r4, r5, r6, lr}
 800a80c:	681d      	ldr	r5, [r3, #0]
 800a80e:	0006      	movs	r6, r0
 800a810:	000c      	movs	r4, r1
 800a812:	2d00      	cmp	r5, #0
 800a814:	d005      	beq.n	800a822 <__swsetup_r+0x1a>
 800a816:	69ab      	ldr	r3, [r5, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d102      	bne.n	800a822 <__swsetup_r+0x1a>
 800a81c:	0028      	movs	r0, r5
 800a81e:	f000 f9a1 	bl	800ab64 <__sinit>
 800a822:	4b32      	ldr	r3, [pc, #200]	; (800a8ec <__swsetup_r+0xe4>)
 800a824:	429c      	cmp	r4, r3
 800a826:	d10f      	bne.n	800a848 <__swsetup_r+0x40>
 800a828:	686c      	ldr	r4, [r5, #4]
 800a82a:	230c      	movs	r3, #12
 800a82c:	5ee2      	ldrsh	r2, [r4, r3]
 800a82e:	b293      	uxth	r3, r2
 800a830:	0711      	lsls	r1, r2, #28
 800a832:	d42d      	bmi.n	800a890 <__swsetup_r+0x88>
 800a834:	06d9      	lsls	r1, r3, #27
 800a836:	d411      	bmi.n	800a85c <__swsetup_r+0x54>
 800a838:	2309      	movs	r3, #9
 800a83a:	2001      	movs	r0, #1
 800a83c:	6033      	str	r3, [r6, #0]
 800a83e:	3337      	adds	r3, #55	; 0x37
 800a840:	4313      	orrs	r3, r2
 800a842:	81a3      	strh	r3, [r4, #12]
 800a844:	4240      	negs	r0, r0
 800a846:	bd70      	pop	{r4, r5, r6, pc}
 800a848:	4b29      	ldr	r3, [pc, #164]	; (800a8f0 <__swsetup_r+0xe8>)
 800a84a:	429c      	cmp	r4, r3
 800a84c:	d101      	bne.n	800a852 <__swsetup_r+0x4a>
 800a84e:	68ac      	ldr	r4, [r5, #8]
 800a850:	e7eb      	b.n	800a82a <__swsetup_r+0x22>
 800a852:	4b28      	ldr	r3, [pc, #160]	; (800a8f4 <__swsetup_r+0xec>)
 800a854:	429c      	cmp	r4, r3
 800a856:	d1e8      	bne.n	800a82a <__swsetup_r+0x22>
 800a858:	68ec      	ldr	r4, [r5, #12]
 800a85a:	e7e6      	b.n	800a82a <__swsetup_r+0x22>
 800a85c:	075b      	lsls	r3, r3, #29
 800a85e:	d513      	bpl.n	800a888 <__swsetup_r+0x80>
 800a860:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a862:	2900      	cmp	r1, #0
 800a864:	d008      	beq.n	800a878 <__swsetup_r+0x70>
 800a866:	0023      	movs	r3, r4
 800a868:	3344      	adds	r3, #68	; 0x44
 800a86a:	4299      	cmp	r1, r3
 800a86c:	d002      	beq.n	800a874 <__swsetup_r+0x6c>
 800a86e:	0030      	movs	r0, r6
 800a870:	f7ff fb5e 	bl	8009f30 <_free_r>
 800a874:	2300      	movs	r3, #0
 800a876:	6363      	str	r3, [r4, #52]	; 0x34
 800a878:	2224      	movs	r2, #36	; 0x24
 800a87a:	89a3      	ldrh	r3, [r4, #12]
 800a87c:	4393      	bics	r3, r2
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	2300      	movs	r3, #0
 800a882:	6063      	str	r3, [r4, #4]
 800a884:	6923      	ldr	r3, [r4, #16]
 800a886:	6023      	str	r3, [r4, #0]
 800a888:	2308      	movs	r3, #8
 800a88a:	89a2      	ldrh	r2, [r4, #12]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	81a3      	strh	r3, [r4, #12]
 800a890:	6923      	ldr	r3, [r4, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10b      	bne.n	800a8ae <__swsetup_r+0xa6>
 800a896:	21a0      	movs	r1, #160	; 0xa0
 800a898:	2280      	movs	r2, #128	; 0x80
 800a89a:	89a3      	ldrh	r3, [r4, #12]
 800a89c:	0089      	lsls	r1, r1, #2
 800a89e:	0092      	lsls	r2, r2, #2
 800a8a0:	400b      	ands	r3, r1
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d003      	beq.n	800a8ae <__swsetup_r+0xa6>
 800a8a6:	0021      	movs	r1, r4
 800a8a8:	0030      	movs	r0, r6
 800a8aa:	f000 fa27 	bl	800acfc <__smakebuf_r>
 800a8ae:	220c      	movs	r2, #12
 800a8b0:	5ea3      	ldrsh	r3, [r4, r2]
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	001a      	movs	r2, r3
 800a8b6:	b299      	uxth	r1, r3
 800a8b8:	4002      	ands	r2, r0
 800a8ba:	4203      	tst	r3, r0
 800a8bc:	d00f      	beq.n	800a8de <__swsetup_r+0xd6>
 800a8be:	2200      	movs	r2, #0
 800a8c0:	60a2      	str	r2, [r4, #8]
 800a8c2:	6962      	ldr	r2, [r4, #20]
 800a8c4:	4252      	negs	r2, r2
 800a8c6:	61a2      	str	r2, [r4, #24]
 800a8c8:	2000      	movs	r0, #0
 800a8ca:	6922      	ldr	r2, [r4, #16]
 800a8cc:	4282      	cmp	r2, r0
 800a8ce:	d1ba      	bne.n	800a846 <__swsetup_r+0x3e>
 800a8d0:	060a      	lsls	r2, r1, #24
 800a8d2:	d5b8      	bpl.n	800a846 <__swsetup_r+0x3e>
 800a8d4:	2240      	movs	r2, #64	; 0x40
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	81a3      	strh	r3, [r4, #12]
 800a8da:	3801      	subs	r0, #1
 800a8dc:	e7b3      	b.n	800a846 <__swsetup_r+0x3e>
 800a8de:	0788      	lsls	r0, r1, #30
 800a8e0:	d400      	bmi.n	800a8e4 <__swsetup_r+0xdc>
 800a8e2:	6962      	ldr	r2, [r4, #20]
 800a8e4:	60a2      	str	r2, [r4, #8]
 800a8e6:	e7ef      	b.n	800a8c8 <__swsetup_r+0xc0>
 800a8e8:	20000010 	.word	0x20000010
 800a8ec:	0800b54c 	.word	0x0800b54c
 800a8f0:	0800b56c 	.word	0x0800b56c
 800a8f4:	0800b52c 	.word	0x0800b52c

0800a8f8 <abort>:
 800a8f8:	2006      	movs	r0, #6
 800a8fa:	b510      	push	{r4, lr}
 800a8fc:	f000 fa74 	bl	800ade8 <raise>
 800a900:	2001      	movs	r0, #1
 800a902:	f7f9 f81d 	bl	8003940 <_exit>
	...

0800a908 <__sflush_r>:
 800a908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a90a:	898b      	ldrh	r3, [r1, #12]
 800a90c:	0005      	movs	r5, r0
 800a90e:	000c      	movs	r4, r1
 800a910:	071a      	lsls	r2, r3, #28
 800a912:	d45f      	bmi.n	800a9d4 <__sflush_r+0xcc>
 800a914:	684a      	ldr	r2, [r1, #4]
 800a916:	2a00      	cmp	r2, #0
 800a918:	dc04      	bgt.n	800a924 <__sflush_r+0x1c>
 800a91a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a91c:	2a00      	cmp	r2, #0
 800a91e:	dc01      	bgt.n	800a924 <__sflush_r+0x1c>
 800a920:	2000      	movs	r0, #0
 800a922:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a924:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a926:	2f00      	cmp	r7, #0
 800a928:	d0fa      	beq.n	800a920 <__sflush_r+0x18>
 800a92a:	2200      	movs	r2, #0
 800a92c:	2180      	movs	r1, #128	; 0x80
 800a92e:	682e      	ldr	r6, [r5, #0]
 800a930:	602a      	str	r2, [r5, #0]
 800a932:	001a      	movs	r2, r3
 800a934:	0149      	lsls	r1, r1, #5
 800a936:	400a      	ands	r2, r1
 800a938:	420b      	tst	r3, r1
 800a93a:	d034      	beq.n	800a9a6 <__sflush_r+0x9e>
 800a93c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	075b      	lsls	r3, r3, #29
 800a942:	d506      	bpl.n	800a952 <__sflush_r+0x4a>
 800a944:	6863      	ldr	r3, [r4, #4]
 800a946:	1ac0      	subs	r0, r0, r3
 800a948:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <__sflush_r+0x4a>
 800a94e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a950:	1ac0      	subs	r0, r0, r3
 800a952:	0002      	movs	r2, r0
 800a954:	6a21      	ldr	r1, [r4, #32]
 800a956:	2300      	movs	r3, #0
 800a958:	0028      	movs	r0, r5
 800a95a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a95c:	47b8      	blx	r7
 800a95e:	89a1      	ldrh	r1, [r4, #12]
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	d106      	bne.n	800a972 <__sflush_r+0x6a>
 800a964:	682b      	ldr	r3, [r5, #0]
 800a966:	2b1d      	cmp	r3, #29
 800a968:	d831      	bhi.n	800a9ce <__sflush_r+0xc6>
 800a96a:	4a2c      	ldr	r2, [pc, #176]	; (800aa1c <__sflush_r+0x114>)
 800a96c:	40da      	lsrs	r2, r3
 800a96e:	07d3      	lsls	r3, r2, #31
 800a970:	d52d      	bpl.n	800a9ce <__sflush_r+0xc6>
 800a972:	2300      	movs	r3, #0
 800a974:	6063      	str	r3, [r4, #4]
 800a976:	6923      	ldr	r3, [r4, #16]
 800a978:	6023      	str	r3, [r4, #0]
 800a97a:	04cb      	lsls	r3, r1, #19
 800a97c:	d505      	bpl.n	800a98a <__sflush_r+0x82>
 800a97e:	1c43      	adds	r3, r0, #1
 800a980:	d102      	bne.n	800a988 <__sflush_r+0x80>
 800a982:	682b      	ldr	r3, [r5, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d100      	bne.n	800a98a <__sflush_r+0x82>
 800a988:	6560      	str	r0, [r4, #84]	; 0x54
 800a98a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a98c:	602e      	str	r6, [r5, #0]
 800a98e:	2900      	cmp	r1, #0
 800a990:	d0c6      	beq.n	800a920 <__sflush_r+0x18>
 800a992:	0023      	movs	r3, r4
 800a994:	3344      	adds	r3, #68	; 0x44
 800a996:	4299      	cmp	r1, r3
 800a998:	d002      	beq.n	800a9a0 <__sflush_r+0x98>
 800a99a:	0028      	movs	r0, r5
 800a99c:	f7ff fac8 	bl	8009f30 <_free_r>
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	6360      	str	r0, [r4, #52]	; 0x34
 800a9a4:	e7bd      	b.n	800a922 <__sflush_r+0x1a>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	0028      	movs	r0, r5
 800a9aa:	6a21      	ldr	r1, [r4, #32]
 800a9ac:	47b8      	blx	r7
 800a9ae:	1c43      	adds	r3, r0, #1
 800a9b0:	d1c5      	bne.n	800a93e <__sflush_r+0x36>
 800a9b2:	682b      	ldr	r3, [r5, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d0c2      	beq.n	800a93e <__sflush_r+0x36>
 800a9b8:	2b1d      	cmp	r3, #29
 800a9ba:	d001      	beq.n	800a9c0 <__sflush_r+0xb8>
 800a9bc:	2b16      	cmp	r3, #22
 800a9be:	d101      	bne.n	800a9c4 <__sflush_r+0xbc>
 800a9c0:	602e      	str	r6, [r5, #0]
 800a9c2:	e7ad      	b.n	800a920 <__sflush_r+0x18>
 800a9c4:	2340      	movs	r3, #64	; 0x40
 800a9c6:	89a2      	ldrh	r2, [r4, #12]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	e7a9      	b.n	800a922 <__sflush_r+0x1a>
 800a9ce:	2340      	movs	r3, #64	; 0x40
 800a9d0:	430b      	orrs	r3, r1
 800a9d2:	e7fa      	b.n	800a9ca <__sflush_r+0xc2>
 800a9d4:	690f      	ldr	r7, [r1, #16]
 800a9d6:	2f00      	cmp	r7, #0
 800a9d8:	d0a2      	beq.n	800a920 <__sflush_r+0x18>
 800a9da:	680a      	ldr	r2, [r1, #0]
 800a9dc:	600f      	str	r7, [r1, #0]
 800a9de:	1bd2      	subs	r2, r2, r7
 800a9e0:	9201      	str	r2, [sp, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	079b      	lsls	r3, r3, #30
 800a9e6:	d100      	bne.n	800a9ea <__sflush_r+0xe2>
 800a9e8:	694a      	ldr	r2, [r1, #20]
 800a9ea:	60a2      	str	r2, [r4, #8]
 800a9ec:	9b01      	ldr	r3, [sp, #4]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	dc00      	bgt.n	800a9f4 <__sflush_r+0xec>
 800a9f2:	e795      	b.n	800a920 <__sflush_r+0x18>
 800a9f4:	003a      	movs	r2, r7
 800a9f6:	0028      	movs	r0, r5
 800a9f8:	9b01      	ldr	r3, [sp, #4]
 800a9fa:	6a21      	ldr	r1, [r4, #32]
 800a9fc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a9fe:	47b0      	blx	r6
 800aa00:	2800      	cmp	r0, #0
 800aa02:	dc06      	bgt.n	800aa12 <__sflush_r+0x10a>
 800aa04:	2340      	movs	r3, #64	; 0x40
 800aa06:	2001      	movs	r0, #1
 800aa08:	89a2      	ldrh	r2, [r4, #12]
 800aa0a:	4240      	negs	r0, r0
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	81a3      	strh	r3, [r4, #12]
 800aa10:	e787      	b.n	800a922 <__sflush_r+0x1a>
 800aa12:	9b01      	ldr	r3, [sp, #4]
 800aa14:	183f      	adds	r7, r7, r0
 800aa16:	1a1b      	subs	r3, r3, r0
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	e7e7      	b.n	800a9ec <__sflush_r+0xe4>
 800aa1c:	20400001 	.word	0x20400001

0800aa20 <_fflush_r>:
 800aa20:	690b      	ldr	r3, [r1, #16]
 800aa22:	b570      	push	{r4, r5, r6, lr}
 800aa24:	0005      	movs	r5, r0
 800aa26:	000c      	movs	r4, r1
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d102      	bne.n	800aa32 <_fflush_r+0x12>
 800aa2c:	2500      	movs	r5, #0
 800aa2e:	0028      	movs	r0, r5
 800aa30:	bd70      	pop	{r4, r5, r6, pc}
 800aa32:	2800      	cmp	r0, #0
 800aa34:	d004      	beq.n	800aa40 <_fflush_r+0x20>
 800aa36:	6983      	ldr	r3, [r0, #24]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <_fflush_r+0x20>
 800aa3c:	f000 f892 	bl	800ab64 <__sinit>
 800aa40:	4b14      	ldr	r3, [pc, #80]	; (800aa94 <_fflush_r+0x74>)
 800aa42:	429c      	cmp	r4, r3
 800aa44:	d11b      	bne.n	800aa7e <_fflush_r+0x5e>
 800aa46:	686c      	ldr	r4, [r5, #4]
 800aa48:	220c      	movs	r2, #12
 800aa4a:	5ea3      	ldrsh	r3, [r4, r2]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d0ed      	beq.n	800aa2c <_fflush_r+0xc>
 800aa50:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa52:	07d2      	lsls	r2, r2, #31
 800aa54:	d404      	bmi.n	800aa60 <_fflush_r+0x40>
 800aa56:	059b      	lsls	r3, r3, #22
 800aa58:	d402      	bmi.n	800aa60 <_fflush_r+0x40>
 800aa5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa5c:	f000 f923 	bl	800aca6 <__retarget_lock_acquire_recursive>
 800aa60:	0028      	movs	r0, r5
 800aa62:	0021      	movs	r1, r4
 800aa64:	f7ff ff50 	bl	800a908 <__sflush_r>
 800aa68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa6a:	0005      	movs	r5, r0
 800aa6c:	07db      	lsls	r3, r3, #31
 800aa6e:	d4de      	bmi.n	800aa2e <_fflush_r+0xe>
 800aa70:	89a3      	ldrh	r3, [r4, #12]
 800aa72:	059b      	lsls	r3, r3, #22
 800aa74:	d4db      	bmi.n	800aa2e <_fflush_r+0xe>
 800aa76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa78:	f000 f916 	bl	800aca8 <__retarget_lock_release_recursive>
 800aa7c:	e7d7      	b.n	800aa2e <_fflush_r+0xe>
 800aa7e:	4b06      	ldr	r3, [pc, #24]	; (800aa98 <_fflush_r+0x78>)
 800aa80:	429c      	cmp	r4, r3
 800aa82:	d101      	bne.n	800aa88 <_fflush_r+0x68>
 800aa84:	68ac      	ldr	r4, [r5, #8]
 800aa86:	e7df      	b.n	800aa48 <_fflush_r+0x28>
 800aa88:	4b04      	ldr	r3, [pc, #16]	; (800aa9c <_fflush_r+0x7c>)
 800aa8a:	429c      	cmp	r4, r3
 800aa8c:	d1dc      	bne.n	800aa48 <_fflush_r+0x28>
 800aa8e:	68ec      	ldr	r4, [r5, #12]
 800aa90:	e7da      	b.n	800aa48 <_fflush_r+0x28>
 800aa92:	46c0      	nop			; (mov r8, r8)
 800aa94:	0800b54c 	.word	0x0800b54c
 800aa98:	0800b56c 	.word	0x0800b56c
 800aa9c:	0800b52c 	.word	0x0800b52c

0800aaa0 <std>:
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	b510      	push	{r4, lr}
 800aaa4:	0004      	movs	r4, r0
 800aaa6:	6003      	str	r3, [r0, #0]
 800aaa8:	6043      	str	r3, [r0, #4]
 800aaaa:	6083      	str	r3, [r0, #8]
 800aaac:	8181      	strh	r1, [r0, #12]
 800aaae:	6643      	str	r3, [r0, #100]	; 0x64
 800aab0:	0019      	movs	r1, r3
 800aab2:	81c2      	strh	r2, [r0, #14]
 800aab4:	6103      	str	r3, [r0, #16]
 800aab6:	6143      	str	r3, [r0, #20]
 800aab8:	6183      	str	r3, [r0, #24]
 800aaba:	2208      	movs	r2, #8
 800aabc:	305c      	adds	r0, #92	; 0x5c
 800aabe:	f7fd fb1d 	bl	80080fc <memset>
 800aac2:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <std+0x38>)
 800aac4:	6263      	str	r3, [r4, #36]	; 0x24
 800aac6:	4b05      	ldr	r3, [pc, #20]	; (800aadc <std+0x3c>)
 800aac8:	6224      	str	r4, [r4, #32]
 800aaca:	62a3      	str	r3, [r4, #40]	; 0x28
 800aacc:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <std+0x40>)
 800aace:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aad0:	4b04      	ldr	r3, [pc, #16]	; (800aae4 <std+0x44>)
 800aad2:	6323      	str	r3, [r4, #48]	; 0x30
 800aad4:	bd10      	pop	{r4, pc}
 800aad6:	46c0      	nop			; (mov r8, r8)
 800aad8:	0800ae29 	.word	0x0800ae29
 800aadc:	0800ae51 	.word	0x0800ae51
 800aae0:	0800ae89 	.word	0x0800ae89
 800aae4:	0800aeb5 	.word	0x0800aeb5

0800aae8 <_cleanup_r>:
 800aae8:	b510      	push	{r4, lr}
 800aaea:	4902      	ldr	r1, [pc, #8]	; (800aaf4 <_cleanup_r+0xc>)
 800aaec:	f000 f8ba 	bl	800ac64 <_fwalk_reent>
 800aaf0:	bd10      	pop	{r4, pc}
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	0800aa21 	.word	0x0800aa21

0800aaf8 <__sfmoreglue>:
 800aaf8:	b570      	push	{r4, r5, r6, lr}
 800aafa:	2568      	movs	r5, #104	; 0x68
 800aafc:	1e4a      	subs	r2, r1, #1
 800aafe:	4355      	muls	r5, r2
 800ab00:	000e      	movs	r6, r1
 800ab02:	0029      	movs	r1, r5
 800ab04:	3174      	adds	r1, #116	; 0x74
 800ab06:	f7ff fa5d 	bl	8009fc4 <_malloc_r>
 800ab0a:	1e04      	subs	r4, r0, #0
 800ab0c:	d008      	beq.n	800ab20 <__sfmoreglue+0x28>
 800ab0e:	2100      	movs	r1, #0
 800ab10:	002a      	movs	r2, r5
 800ab12:	6001      	str	r1, [r0, #0]
 800ab14:	6046      	str	r6, [r0, #4]
 800ab16:	300c      	adds	r0, #12
 800ab18:	60a0      	str	r0, [r4, #8]
 800ab1a:	3268      	adds	r2, #104	; 0x68
 800ab1c:	f7fd faee 	bl	80080fc <memset>
 800ab20:	0020      	movs	r0, r4
 800ab22:	bd70      	pop	{r4, r5, r6, pc}

0800ab24 <__sfp_lock_acquire>:
 800ab24:	b510      	push	{r4, lr}
 800ab26:	4802      	ldr	r0, [pc, #8]	; (800ab30 <__sfp_lock_acquire+0xc>)
 800ab28:	f000 f8bd 	bl	800aca6 <__retarget_lock_acquire_recursive>
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	46c0      	nop			; (mov r8, r8)
 800ab30:	20000454 	.word	0x20000454

0800ab34 <__sfp_lock_release>:
 800ab34:	b510      	push	{r4, lr}
 800ab36:	4802      	ldr	r0, [pc, #8]	; (800ab40 <__sfp_lock_release+0xc>)
 800ab38:	f000 f8b6 	bl	800aca8 <__retarget_lock_release_recursive>
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	20000454 	.word	0x20000454

0800ab44 <__sinit_lock_acquire>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	4802      	ldr	r0, [pc, #8]	; (800ab50 <__sinit_lock_acquire+0xc>)
 800ab48:	f000 f8ad 	bl	800aca6 <__retarget_lock_acquire_recursive>
 800ab4c:	bd10      	pop	{r4, pc}
 800ab4e:	46c0      	nop			; (mov r8, r8)
 800ab50:	2000044f 	.word	0x2000044f

0800ab54 <__sinit_lock_release>:
 800ab54:	b510      	push	{r4, lr}
 800ab56:	4802      	ldr	r0, [pc, #8]	; (800ab60 <__sinit_lock_release+0xc>)
 800ab58:	f000 f8a6 	bl	800aca8 <__retarget_lock_release_recursive>
 800ab5c:	bd10      	pop	{r4, pc}
 800ab5e:	46c0      	nop			; (mov r8, r8)
 800ab60:	2000044f 	.word	0x2000044f

0800ab64 <__sinit>:
 800ab64:	b513      	push	{r0, r1, r4, lr}
 800ab66:	0004      	movs	r4, r0
 800ab68:	f7ff ffec 	bl	800ab44 <__sinit_lock_acquire>
 800ab6c:	69a3      	ldr	r3, [r4, #24]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d002      	beq.n	800ab78 <__sinit+0x14>
 800ab72:	f7ff ffef 	bl	800ab54 <__sinit_lock_release>
 800ab76:	bd13      	pop	{r0, r1, r4, pc}
 800ab78:	64a3      	str	r3, [r4, #72]	; 0x48
 800ab7a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800ab7c:	6523      	str	r3, [r4, #80]	; 0x50
 800ab7e:	4b13      	ldr	r3, [pc, #76]	; (800abcc <__sinit+0x68>)
 800ab80:	4a13      	ldr	r2, [pc, #76]	; (800abd0 <__sinit+0x6c>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	42a3      	cmp	r3, r4
 800ab8a:	d101      	bne.n	800ab90 <__sinit+0x2c>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	61a3      	str	r3, [r4, #24]
 800ab90:	0020      	movs	r0, r4
 800ab92:	f000 f81f 	bl	800abd4 <__sfp>
 800ab96:	6060      	str	r0, [r4, #4]
 800ab98:	0020      	movs	r0, r4
 800ab9a:	f000 f81b 	bl	800abd4 <__sfp>
 800ab9e:	60a0      	str	r0, [r4, #8]
 800aba0:	0020      	movs	r0, r4
 800aba2:	f000 f817 	bl	800abd4 <__sfp>
 800aba6:	2200      	movs	r2, #0
 800aba8:	2104      	movs	r1, #4
 800abaa:	60e0      	str	r0, [r4, #12]
 800abac:	6860      	ldr	r0, [r4, #4]
 800abae:	f7ff ff77 	bl	800aaa0 <std>
 800abb2:	2201      	movs	r2, #1
 800abb4:	2109      	movs	r1, #9
 800abb6:	68a0      	ldr	r0, [r4, #8]
 800abb8:	f7ff ff72 	bl	800aaa0 <std>
 800abbc:	2202      	movs	r2, #2
 800abbe:	2112      	movs	r1, #18
 800abc0:	68e0      	ldr	r0, [r4, #12]
 800abc2:	f7ff ff6d 	bl	800aaa0 <std>
 800abc6:	2301      	movs	r3, #1
 800abc8:	61a3      	str	r3, [r4, #24]
 800abca:	e7d2      	b.n	800ab72 <__sinit+0xe>
 800abcc:	0800b1a8 	.word	0x0800b1a8
 800abd0:	0800aae9 	.word	0x0800aae9

0800abd4 <__sfp>:
 800abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd6:	0007      	movs	r7, r0
 800abd8:	f7ff ffa4 	bl	800ab24 <__sfp_lock_acquire>
 800abdc:	4b1f      	ldr	r3, [pc, #124]	; (800ac5c <__sfp+0x88>)
 800abde:	681e      	ldr	r6, [r3, #0]
 800abe0:	69b3      	ldr	r3, [r6, #24]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d102      	bne.n	800abec <__sfp+0x18>
 800abe6:	0030      	movs	r0, r6
 800abe8:	f7ff ffbc 	bl	800ab64 <__sinit>
 800abec:	3648      	adds	r6, #72	; 0x48
 800abee:	68b4      	ldr	r4, [r6, #8]
 800abf0:	6873      	ldr	r3, [r6, #4]
 800abf2:	3b01      	subs	r3, #1
 800abf4:	d504      	bpl.n	800ac00 <__sfp+0x2c>
 800abf6:	6833      	ldr	r3, [r6, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d022      	beq.n	800ac42 <__sfp+0x6e>
 800abfc:	6836      	ldr	r6, [r6, #0]
 800abfe:	e7f6      	b.n	800abee <__sfp+0x1a>
 800ac00:	220c      	movs	r2, #12
 800ac02:	5ea5      	ldrsh	r5, [r4, r2]
 800ac04:	2d00      	cmp	r5, #0
 800ac06:	d11a      	bne.n	800ac3e <__sfp+0x6a>
 800ac08:	0020      	movs	r0, r4
 800ac0a:	4b15      	ldr	r3, [pc, #84]	; (800ac60 <__sfp+0x8c>)
 800ac0c:	3058      	adds	r0, #88	; 0x58
 800ac0e:	60e3      	str	r3, [r4, #12]
 800ac10:	6665      	str	r5, [r4, #100]	; 0x64
 800ac12:	f000 f847 	bl	800aca4 <__retarget_lock_init_recursive>
 800ac16:	f7ff ff8d 	bl	800ab34 <__sfp_lock_release>
 800ac1a:	0020      	movs	r0, r4
 800ac1c:	2208      	movs	r2, #8
 800ac1e:	0029      	movs	r1, r5
 800ac20:	6025      	str	r5, [r4, #0]
 800ac22:	60a5      	str	r5, [r4, #8]
 800ac24:	6065      	str	r5, [r4, #4]
 800ac26:	6125      	str	r5, [r4, #16]
 800ac28:	6165      	str	r5, [r4, #20]
 800ac2a:	61a5      	str	r5, [r4, #24]
 800ac2c:	305c      	adds	r0, #92	; 0x5c
 800ac2e:	f7fd fa65 	bl	80080fc <memset>
 800ac32:	6365      	str	r5, [r4, #52]	; 0x34
 800ac34:	63a5      	str	r5, [r4, #56]	; 0x38
 800ac36:	64a5      	str	r5, [r4, #72]	; 0x48
 800ac38:	64e5      	str	r5, [r4, #76]	; 0x4c
 800ac3a:	0020      	movs	r0, r4
 800ac3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac3e:	3468      	adds	r4, #104	; 0x68
 800ac40:	e7d7      	b.n	800abf2 <__sfp+0x1e>
 800ac42:	2104      	movs	r1, #4
 800ac44:	0038      	movs	r0, r7
 800ac46:	f7ff ff57 	bl	800aaf8 <__sfmoreglue>
 800ac4a:	1e04      	subs	r4, r0, #0
 800ac4c:	6030      	str	r0, [r6, #0]
 800ac4e:	d1d5      	bne.n	800abfc <__sfp+0x28>
 800ac50:	f7ff ff70 	bl	800ab34 <__sfp_lock_release>
 800ac54:	230c      	movs	r3, #12
 800ac56:	603b      	str	r3, [r7, #0]
 800ac58:	e7ef      	b.n	800ac3a <__sfp+0x66>
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	0800b1a8 	.word	0x0800b1a8
 800ac60:	ffff0001 	.word	0xffff0001

0800ac64 <_fwalk_reent>:
 800ac64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac66:	0004      	movs	r4, r0
 800ac68:	0006      	movs	r6, r0
 800ac6a:	2700      	movs	r7, #0
 800ac6c:	9101      	str	r1, [sp, #4]
 800ac6e:	3448      	adds	r4, #72	; 0x48
 800ac70:	6863      	ldr	r3, [r4, #4]
 800ac72:	68a5      	ldr	r5, [r4, #8]
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	9b00      	ldr	r3, [sp, #0]
 800ac78:	3b01      	subs	r3, #1
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	d504      	bpl.n	800ac88 <_fwalk_reent+0x24>
 800ac7e:	6824      	ldr	r4, [r4, #0]
 800ac80:	2c00      	cmp	r4, #0
 800ac82:	d1f5      	bne.n	800ac70 <_fwalk_reent+0xc>
 800ac84:	0038      	movs	r0, r7
 800ac86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ac88:	89ab      	ldrh	r3, [r5, #12]
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d908      	bls.n	800aca0 <_fwalk_reent+0x3c>
 800ac8e:	220e      	movs	r2, #14
 800ac90:	5eab      	ldrsh	r3, [r5, r2]
 800ac92:	3301      	adds	r3, #1
 800ac94:	d004      	beq.n	800aca0 <_fwalk_reent+0x3c>
 800ac96:	0029      	movs	r1, r5
 800ac98:	0030      	movs	r0, r6
 800ac9a:	9b01      	ldr	r3, [sp, #4]
 800ac9c:	4798      	blx	r3
 800ac9e:	4307      	orrs	r7, r0
 800aca0:	3568      	adds	r5, #104	; 0x68
 800aca2:	e7e8      	b.n	800ac76 <_fwalk_reent+0x12>

0800aca4 <__retarget_lock_init_recursive>:
 800aca4:	4770      	bx	lr

0800aca6 <__retarget_lock_acquire_recursive>:
 800aca6:	4770      	bx	lr

0800aca8 <__retarget_lock_release_recursive>:
 800aca8:	4770      	bx	lr
	...

0800acac <__swhatbuf_r>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	000e      	movs	r6, r1
 800acb0:	001d      	movs	r5, r3
 800acb2:	230e      	movs	r3, #14
 800acb4:	5ec9      	ldrsh	r1, [r1, r3]
 800acb6:	0014      	movs	r4, r2
 800acb8:	b096      	sub	sp, #88	; 0x58
 800acba:	2900      	cmp	r1, #0
 800acbc:	da07      	bge.n	800acce <__swhatbuf_r+0x22>
 800acbe:	2300      	movs	r3, #0
 800acc0:	602b      	str	r3, [r5, #0]
 800acc2:	89b3      	ldrh	r3, [r6, #12]
 800acc4:	061b      	lsls	r3, r3, #24
 800acc6:	d411      	bmi.n	800acec <__swhatbuf_r+0x40>
 800acc8:	2380      	movs	r3, #128	; 0x80
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	e00f      	b.n	800acee <__swhatbuf_r+0x42>
 800acce:	466a      	mov	r2, sp
 800acd0:	f000 f91c 	bl	800af0c <_fstat_r>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	dbf2      	blt.n	800acbe <__swhatbuf_r+0x12>
 800acd8:	23f0      	movs	r3, #240	; 0xf0
 800acda:	9901      	ldr	r1, [sp, #4]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	4019      	ands	r1, r3
 800ace0:	4b05      	ldr	r3, [pc, #20]	; (800acf8 <__swhatbuf_r+0x4c>)
 800ace2:	18c9      	adds	r1, r1, r3
 800ace4:	424b      	negs	r3, r1
 800ace6:	4159      	adcs	r1, r3
 800ace8:	6029      	str	r1, [r5, #0]
 800acea:	e7ed      	b.n	800acc8 <__swhatbuf_r+0x1c>
 800acec:	2340      	movs	r3, #64	; 0x40
 800acee:	2000      	movs	r0, #0
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	b016      	add	sp, #88	; 0x58
 800acf4:	bd70      	pop	{r4, r5, r6, pc}
 800acf6:	46c0      	nop			; (mov r8, r8)
 800acf8:	ffffe000 	.word	0xffffe000

0800acfc <__smakebuf_r>:
 800acfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acfe:	2602      	movs	r6, #2
 800ad00:	898b      	ldrh	r3, [r1, #12]
 800ad02:	0005      	movs	r5, r0
 800ad04:	000c      	movs	r4, r1
 800ad06:	4233      	tst	r3, r6
 800ad08:	d006      	beq.n	800ad18 <__smakebuf_r+0x1c>
 800ad0a:	0023      	movs	r3, r4
 800ad0c:	3347      	adds	r3, #71	; 0x47
 800ad0e:	6023      	str	r3, [r4, #0]
 800ad10:	6123      	str	r3, [r4, #16]
 800ad12:	2301      	movs	r3, #1
 800ad14:	6163      	str	r3, [r4, #20]
 800ad16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ad18:	466a      	mov	r2, sp
 800ad1a:	ab01      	add	r3, sp, #4
 800ad1c:	f7ff ffc6 	bl	800acac <__swhatbuf_r>
 800ad20:	9900      	ldr	r1, [sp, #0]
 800ad22:	0007      	movs	r7, r0
 800ad24:	0028      	movs	r0, r5
 800ad26:	f7ff f94d 	bl	8009fc4 <_malloc_r>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	d108      	bne.n	800ad40 <__smakebuf_r+0x44>
 800ad2e:	220c      	movs	r2, #12
 800ad30:	5ea3      	ldrsh	r3, [r4, r2]
 800ad32:	059a      	lsls	r2, r3, #22
 800ad34:	d4ef      	bmi.n	800ad16 <__smakebuf_r+0x1a>
 800ad36:	2203      	movs	r2, #3
 800ad38:	4393      	bics	r3, r2
 800ad3a:	431e      	orrs	r6, r3
 800ad3c:	81a6      	strh	r6, [r4, #12]
 800ad3e:	e7e4      	b.n	800ad0a <__smakebuf_r+0xe>
 800ad40:	4b0f      	ldr	r3, [pc, #60]	; (800ad80 <__smakebuf_r+0x84>)
 800ad42:	62ab      	str	r3, [r5, #40]	; 0x28
 800ad44:	2380      	movs	r3, #128	; 0x80
 800ad46:	89a2      	ldrh	r2, [r4, #12]
 800ad48:	6020      	str	r0, [r4, #0]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	81a3      	strh	r3, [r4, #12]
 800ad4e:	9b00      	ldr	r3, [sp, #0]
 800ad50:	6120      	str	r0, [r4, #16]
 800ad52:	6163      	str	r3, [r4, #20]
 800ad54:	9b01      	ldr	r3, [sp, #4]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00d      	beq.n	800ad76 <__smakebuf_r+0x7a>
 800ad5a:	0028      	movs	r0, r5
 800ad5c:	230e      	movs	r3, #14
 800ad5e:	5ee1      	ldrsh	r1, [r4, r3]
 800ad60:	f000 f8e6 	bl	800af30 <_isatty_r>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d006      	beq.n	800ad76 <__smakebuf_r+0x7a>
 800ad68:	2203      	movs	r2, #3
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	4393      	bics	r3, r2
 800ad6e:	001a      	movs	r2, r3
 800ad70:	2301      	movs	r3, #1
 800ad72:	4313      	orrs	r3, r2
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	89a0      	ldrh	r0, [r4, #12]
 800ad78:	4307      	orrs	r7, r0
 800ad7a:	81a7      	strh	r7, [r4, #12]
 800ad7c:	e7cb      	b.n	800ad16 <__smakebuf_r+0x1a>
 800ad7e:	46c0      	nop			; (mov r8, r8)
 800ad80:	0800aae9 	.word	0x0800aae9

0800ad84 <_malloc_usable_size_r>:
 800ad84:	1f0b      	subs	r3, r1, #4
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	1f18      	subs	r0, r3, #4
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	da01      	bge.n	800ad92 <_malloc_usable_size_r+0xe>
 800ad8e:	580b      	ldr	r3, [r1, r0]
 800ad90:	18c0      	adds	r0, r0, r3
 800ad92:	4770      	bx	lr

0800ad94 <_raise_r>:
 800ad94:	b570      	push	{r4, r5, r6, lr}
 800ad96:	0004      	movs	r4, r0
 800ad98:	000d      	movs	r5, r1
 800ad9a:	291f      	cmp	r1, #31
 800ad9c:	d904      	bls.n	800ada8 <_raise_r+0x14>
 800ad9e:	2316      	movs	r3, #22
 800ada0:	6003      	str	r3, [r0, #0]
 800ada2:	2001      	movs	r0, #1
 800ada4:	4240      	negs	r0, r0
 800ada6:	bd70      	pop	{r4, r5, r6, pc}
 800ada8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d004      	beq.n	800adb8 <_raise_r+0x24>
 800adae:	008a      	lsls	r2, r1, #2
 800adb0:	189b      	adds	r3, r3, r2
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	d108      	bne.n	800adca <_raise_r+0x36>
 800adb8:	0020      	movs	r0, r4
 800adba:	f000 f831 	bl	800ae20 <_getpid_r>
 800adbe:	002a      	movs	r2, r5
 800adc0:	0001      	movs	r1, r0
 800adc2:	0020      	movs	r0, r4
 800adc4:	f000 f81a 	bl	800adfc <_kill_r>
 800adc8:	e7ed      	b.n	800ada6 <_raise_r+0x12>
 800adca:	2000      	movs	r0, #0
 800adcc:	2a01      	cmp	r2, #1
 800adce:	d0ea      	beq.n	800ada6 <_raise_r+0x12>
 800add0:	1c51      	adds	r1, r2, #1
 800add2:	d103      	bne.n	800addc <_raise_r+0x48>
 800add4:	2316      	movs	r3, #22
 800add6:	3001      	adds	r0, #1
 800add8:	6023      	str	r3, [r4, #0]
 800adda:	e7e4      	b.n	800ada6 <_raise_r+0x12>
 800addc:	2400      	movs	r4, #0
 800adde:	0028      	movs	r0, r5
 800ade0:	601c      	str	r4, [r3, #0]
 800ade2:	4790      	blx	r2
 800ade4:	0020      	movs	r0, r4
 800ade6:	e7de      	b.n	800ada6 <_raise_r+0x12>

0800ade8 <raise>:
 800ade8:	b510      	push	{r4, lr}
 800adea:	4b03      	ldr	r3, [pc, #12]	; (800adf8 <raise+0x10>)
 800adec:	0001      	movs	r1, r0
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	f7ff ffd0 	bl	800ad94 <_raise_r>
 800adf4:	bd10      	pop	{r4, pc}
 800adf6:	46c0      	nop			; (mov r8, r8)
 800adf8:	20000010 	.word	0x20000010

0800adfc <_kill_r>:
 800adfc:	2300      	movs	r3, #0
 800adfe:	b570      	push	{r4, r5, r6, lr}
 800ae00:	4d06      	ldr	r5, [pc, #24]	; (800ae1c <_kill_r+0x20>)
 800ae02:	0004      	movs	r4, r0
 800ae04:	0008      	movs	r0, r1
 800ae06:	0011      	movs	r1, r2
 800ae08:	602b      	str	r3, [r5, #0]
 800ae0a:	f7f8 fd89 	bl	8003920 <_kill>
 800ae0e:	1c43      	adds	r3, r0, #1
 800ae10:	d103      	bne.n	800ae1a <_kill_r+0x1e>
 800ae12:	682b      	ldr	r3, [r5, #0]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d000      	beq.n	800ae1a <_kill_r+0x1e>
 800ae18:	6023      	str	r3, [r4, #0]
 800ae1a:	bd70      	pop	{r4, r5, r6, pc}
 800ae1c:	20000448 	.word	0x20000448

0800ae20 <_getpid_r>:
 800ae20:	b510      	push	{r4, lr}
 800ae22:	f7f8 fd77 	bl	8003914 <_getpid>
 800ae26:	bd10      	pop	{r4, pc}

0800ae28 <__sread>:
 800ae28:	b570      	push	{r4, r5, r6, lr}
 800ae2a:	000c      	movs	r4, r1
 800ae2c:	250e      	movs	r5, #14
 800ae2e:	5f49      	ldrsh	r1, [r1, r5]
 800ae30:	f000 f8a4 	bl	800af7c <_read_r>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	db03      	blt.n	800ae40 <__sread+0x18>
 800ae38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ae3a:	181b      	adds	r3, r3, r0
 800ae3c:	6563      	str	r3, [r4, #84]	; 0x54
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	4a02      	ldr	r2, [pc, #8]	; (800ae4c <__sread+0x24>)
 800ae44:	4013      	ands	r3, r2
 800ae46:	81a3      	strh	r3, [r4, #12]
 800ae48:	e7f9      	b.n	800ae3e <__sread+0x16>
 800ae4a:	46c0      	nop			; (mov r8, r8)
 800ae4c:	ffffefff 	.word	0xffffefff

0800ae50 <__swrite>:
 800ae50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae52:	001f      	movs	r7, r3
 800ae54:	898b      	ldrh	r3, [r1, #12]
 800ae56:	0005      	movs	r5, r0
 800ae58:	000c      	movs	r4, r1
 800ae5a:	0016      	movs	r6, r2
 800ae5c:	05db      	lsls	r3, r3, #23
 800ae5e:	d505      	bpl.n	800ae6c <__swrite+0x1c>
 800ae60:	230e      	movs	r3, #14
 800ae62:	5ec9      	ldrsh	r1, [r1, r3]
 800ae64:	2200      	movs	r2, #0
 800ae66:	2302      	movs	r3, #2
 800ae68:	f000 f874 	bl	800af54 <_lseek_r>
 800ae6c:	89a3      	ldrh	r3, [r4, #12]
 800ae6e:	4a05      	ldr	r2, [pc, #20]	; (800ae84 <__swrite+0x34>)
 800ae70:	0028      	movs	r0, r5
 800ae72:	4013      	ands	r3, r2
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	0032      	movs	r2, r6
 800ae78:	230e      	movs	r3, #14
 800ae7a:	5ee1      	ldrsh	r1, [r4, r3]
 800ae7c:	003b      	movs	r3, r7
 800ae7e:	f000 f81f 	bl	800aec0 <_write_r>
 800ae82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae84:	ffffefff 	.word	0xffffefff

0800ae88 <__sseek>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	000c      	movs	r4, r1
 800ae8c:	250e      	movs	r5, #14
 800ae8e:	5f49      	ldrsh	r1, [r1, r5]
 800ae90:	f000 f860 	bl	800af54 <_lseek_r>
 800ae94:	89a3      	ldrh	r3, [r4, #12]
 800ae96:	1c42      	adds	r2, r0, #1
 800ae98:	d103      	bne.n	800aea2 <__sseek+0x1a>
 800ae9a:	4a05      	ldr	r2, [pc, #20]	; (800aeb0 <__sseek+0x28>)
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	81a3      	strh	r3, [r4, #12]
 800aea0:	bd70      	pop	{r4, r5, r6, pc}
 800aea2:	2280      	movs	r2, #128	; 0x80
 800aea4:	0152      	lsls	r2, r2, #5
 800aea6:	4313      	orrs	r3, r2
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	6560      	str	r0, [r4, #84]	; 0x54
 800aeac:	e7f8      	b.n	800aea0 <__sseek+0x18>
 800aeae:	46c0      	nop			; (mov r8, r8)
 800aeb0:	ffffefff 	.word	0xffffefff

0800aeb4 <__sclose>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	230e      	movs	r3, #14
 800aeb8:	5ec9      	ldrsh	r1, [r1, r3]
 800aeba:	f000 f815 	bl	800aee8 <_close_r>
 800aebe:	bd10      	pop	{r4, pc}

0800aec0 <_write_r>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	0004      	movs	r4, r0
 800aec4:	0008      	movs	r0, r1
 800aec6:	0011      	movs	r1, r2
 800aec8:	001a      	movs	r2, r3
 800aeca:	2300      	movs	r3, #0
 800aecc:	4d05      	ldr	r5, [pc, #20]	; (800aee4 <_write_r+0x24>)
 800aece:	602b      	str	r3, [r5, #0]
 800aed0:	f7f8 fd5f 	bl	8003992 <_write>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d103      	bne.n	800aee0 <_write_r+0x20>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d000      	beq.n	800aee0 <_write_r+0x20>
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
 800aee2:	46c0      	nop			; (mov r8, r8)
 800aee4:	20000448 	.word	0x20000448

0800aee8 <_close_r>:
 800aee8:	2300      	movs	r3, #0
 800aeea:	b570      	push	{r4, r5, r6, lr}
 800aeec:	4d06      	ldr	r5, [pc, #24]	; (800af08 <_close_r+0x20>)
 800aeee:	0004      	movs	r4, r0
 800aef0:	0008      	movs	r0, r1
 800aef2:	602b      	str	r3, [r5, #0]
 800aef4:	f7f8 fd69 	bl	80039ca <_close>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d103      	bne.n	800af04 <_close_r+0x1c>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d000      	beq.n	800af04 <_close_r+0x1c>
 800af02:	6023      	str	r3, [r4, #0]
 800af04:	bd70      	pop	{r4, r5, r6, pc}
 800af06:	46c0      	nop			; (mov r8, r8)
 800af08:	20000448 	.word	0x20000448

0800af0c <_fstat_r>:
 800af0c:	2300      	movs	r3, #0
 800af0e:	b570      	push	{r4, r5, r6, lr}
 800af10:	4d06      	ldr	r5, [pc, #24]	; (800af2c <_fstat_r+0x20>)
 800af12:	0004      	movs	r4, r0
 800af14:	0008      	movs	r0, r1
 800af16:	0011      	movs	r1, r2
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	f7f8 fd60 	bl	80039de <_fstat>
 800af1e:	1c43      	adds	r3, r0, #1
 800af20:	d103      	bne.n	800af2a <_fstat_r+0x1e>
 800af22:	682b      	ldr	r3, [r5, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d000      	beq.n	800af2a <_fstat_r+0x1e>
 800af28:	6023      	str	r3, [r4, #0]
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	20000448 	.word	0x20000448

0800af30 <_isatty_r>:
 800af30:	2300      	movs	r3, #0
 800af32:	b570      	push	{r4, r5, r6, lr}
 800af34:	4d06      	ldr	r5, [pc, #24]	; (800af50 <_isatty_r+0x20>)
 800af36:	0004      	movs	r4, r0
 800af38:	0008      	movs	r0, r1
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	f7f8 fd5d 	bl	80039fa <_isatty>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d103      	bne.n	800af4c <_isatty_r+0x1c>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d000      	beq.n	800af4c <_isatty_r+0x1c>
 800af4a:	6023      	str	r3, [r4, #0]
 800af4c:	bd70      	pop	{r4, r5, r6, pc}
 800af4e:	46c0      	nop			; (mov r8, r8)
 800af50:	20000448 	.word	0x20000448

0800af54 <_lseek_r>:
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	0004      	movs	r4, r0
 800af58:	0008      	movs	r0, r1
 800af5a:	0011      	movs	r1, r2
 800af5c:	001a      	movs	r2, r3
 800af5e:	2300      	movs	r3, #0
 800af60:	4d05      	ldr	r5, [pc, #20]	; (800af78 <_lseek_r+0x24>)
 800af62:	602b      	str	r3, [r5, #0]
 800af64:	f7f8 fd52 	bl	8003a0c <_lseek>
 800af68:	1c43      	adds	r3, r0, #1
 800af6a:	d103      	bne.n	800af74 <_lseek_r+0x20>
 800af6c:	682b      	ldr	r3, [r5, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d000      	beq.n	800af74 <_lseek_r+0x20>
 800af72:	6023      	str	r3, [r4, #0]
 800af74:	bd70      	pop	{r4, r5, r6, pc}
 800af76:	46c0      	nop			; (mov r8, r8)
 800af78:	20000448 	.word	0x20000448

0800af7c <_read_r>:
 800af7c:	b570      	push	{r4, r5, r6, lr}
 800af7e:	0004      	movs	r4, r0
 800af80:	0008      	movs	r0, r1
 800af82:	0011      	movs	r1, r2
 800af84:	001a      	movs	r2, r3
 800af86:	2300      	movs	r3, #0
 800af88:	4d05      	ldr	r5, [pc, #20]	; (800afa0 <_read_r+0x24>)
 800af8a:	602b      	str	r3, [r5, #0]
 800af8c:	f7f8 fce4 	bl	8003958 <_read>
 800af90:	1c43      	adds	r3, r0, #1
 800af92:	d103      	bne.n	800af9c <_read_r+0x20>
 800af94:	682b      	ldr	r3, [r5, #0]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d000      	beq.n	800af9c <_read_r+0x20>
 800af9a:	6023      	str	r3, [r4, #0]
 800af9c:	bd70      	pop	{r4, r5, r6, pc}
 800af9e:	46c0      	nop			; (mov r8, r8)
 800afa0:	20000448 	.word	0x20000448

0800afa4 <_init>:
 800afa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa6:	46c0      	nop			; (mov r8, r8)
 800afa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afaa:	bc08      	pop	{r3}
 800afac:	469e      	mov	lr, r3
 800afae:	4770      	bx	lr

0800afb0 <_fini>:
 800afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afb2:	46c0      	nop			; (mov r8, r8)
 800afb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800afb6:	bc08      	pop	{r3}
 800afb8:	469e      	mov	lr, r3
 800afba:	4770      	bx	lr
